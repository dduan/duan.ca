<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Daniel Duan's Articles</title>
        <link>https://duan.ca/</link>
        <atom:link href="https://duan.ca/feed.xml" rel="self" type="application/rss+xml" />
            <item>
                <title>Control</title>
                <description>&lt;p&gt;For whatever reason, a dialogue from the Matrix trilogy stuck with me. I&#x27;ve never heard anyone else talk
about these quotes. Maybe they aren&#x27;t that deep and I have been over-projecting meanings. Anyways, Neo (&lt;strong&gt;N&lt;/strong&gt;)
and Councillor Hamann (&lt;strong&gt;H&lt;/strong&gt;) are in the last human city Zion, looking at a vast array of machines. They had
this exchange about &lt;em&gt;control&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;H&lt;/strong&gt;: Down here, sometimes I think about all those people still plugged into the Matrix and when I look at these machines I can&#x27;t help thinking that in a way we are plugged into them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;N&lt;/strong&gt;: But we control these machines; they don&#x27;t control us.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;H&lt;/strong&gt;: Of course not. How could they? The idea is pure nonsense. But… it does make one wonder… just… what is control?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;N&lt;/strong&gt;: &lt;em&gt;If we wanted, we could shut these machines down.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;H&lt;/strong&gt;: Of course. That&#x27;s it. You hit it. That&#x27;s control, isn&#x27;t it? If we wanted we could smash them to bits. Although, if we did, we&#x27;d have to consider what would happen to our lights, our heat, our air…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is scary how often this definition of (lack of) control applies in life.&lt;/p&gt;
&lt;p&gt;Figured I&#x27;d share.&lt;/p&gt;
</description>
                <pubDate>Wed, 22 Jun 2022 13:13:09 -0700</pubDate>
                <link>https://duan.ca/2022/06/22/control/</link>
                <guid isPermaLink="true">https://duan.ca/2022/06/22/control/</guid>
            </item>
            <item>
                <title>Pro-Science, Anti Research</title>
                <description>&lt;p&gt;Science discussion in the mainstream always focus on the reductive &amp;quot;pro&amp;quot; vs &amp;quot;anti&amp;quot; dynamic. While there are
a lot of people in the world who flat-out &lt;em&gt;deny&lt;/em&gt; the existence of established science, making the mainstream
conversation a worthy discourse, that&#x27;s not what I&#x27;m trying to participate here.&lt;/p&gt;
&lt;p&gt;Within the &amp;quot;for-science faction&amp;quot;, there are two seemingly compatible points of view:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We should save humanity from distinction.&lt;/li&gt;
&lt;li&gt;We should improve the human condition.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;See the difference? Some do, others blind themselves to it.&lt;/p&gt;
&lt;p&gt;Surely, distinction is a worse human condition?&lt;/p&gt;
&lt;p&gt;Correct!&lt;/p&gt;
&lt;p&gt;... therefore, we shouldn&#x27;t get distracted by things like making rockets, digitizing our minds, creating suns
on earth. Oh, we still need basic science research but... if we could spend money on saving ourselves, those
far-out ideas should take a chill pill. Survival is the most important thing!&lt;/p&gt;
&lt;p&gt;The argument is around austerity: &lt;a href=&quot;https://en.wikipedia.org/wiki/Roulette&quot;&gt;why put the chips on 21, when we can put it on black&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;It&#x27;s strange, isn&#x27;t it? The crowd that wants dirty energy sources gone, also dislike space exploration? The
&amp;quot;progressives&amp;quot; wants nothing but to conserve?&lt;/p&gt;
&lt;p&gt;Scientific research &lt;em&gt;should&lt;/em&gt; be expensive, because, in order to improve our lives in unimaginable ways, &amp;quot;the
science&amp;quot; must &lt;em&gt;actuate&lt;/em&gt;. Knowing an asteroid&#x27;s existence is not the same as harvesting the resource from it;
knowing how the sun works is not the same as replicating it here; knowing a monkey can play pong with brain
probes is not the same as humans doing it safely. (Some may categorize these things as &amp;quot;engineering&amp;quot; or
&amp;quot;commercialization&amp;quot;: yes, all of that.)&lt;/p&gt;
&lt;p&gt;The austerity argument is anti-scientific research. Saying we should save money on fusion to spend more money
on solar panels is the same as &amp;quot;but children are starving in Africa!&amp;quot;.&lt;/p&gt;
&lt;p&gt;The world sucks in multiple ways. You may feel overwhelmed that, as a whole, humanity is under siege for one
reason or another. But others may feel differently. They want to put their limited chips on a riskier bet for
bigger returns. They &lt;a href=&quot;https://en.wikipedia.org/wiki/Expected_value&quot;&gt;are no less rational&lt;/a&gt; than you. And (thank god) we don&#x27;t have a world dictator that
forces us to take their bet, or yours.&lt;/p&gt;
&lt;p&gt;I&#x27;m at peace with that.&lt;/p&gt;
</description>
                <pubDate>Fri, 20 May 2022 15:33:25 -0700</pubDate>
                <link>https://duan.ca/2022/05/20/pro-science-yet-anti-research/</link>
                <guid isPermaLink="true">https://duan.ca/2022/05/20/pro-science-yet-anti-research/</guid>
            </item>
            <item>
                <title>Visceral</title>
                <description>&lt;p&gt;Growing up in China, I remember using google.cn daily. At some point in my teens, it stopped working, and I had to use google.com.hk . Then ... I left. The first time I got off the plane in the US, and got on a computer, google.com was the browser homepage.&lt;/p&gt;
&lt;p&gt;Now, this is not a story about how important Google is to me (to the dismay of the fully adult version of me, it is). Around the same time, there were other, perhaps less relatable things happening to the internet that was once niche, and open to Chinese users (small website hosting services got shut down one by one, blog posts got deleted a few days later, all websites forced to have government approval to exist). As a teen, I didn&#x27;t like that feeling of spaces closing around me. I didn&#x27;t have money, the freedom to explore virtually was precious.&lt;/p&gt;
&lt;p&gt;Most people on Twitter never had visceral experience of censorship like mine. It&#x27;s not something that happens to some asshole spewing hate on a website; not a sinister plot that aims at your group with some shared some beliefs. True censorship feels like environment decay, like oxygen leaving the air. It&#x27;s quite, gradual, steady. It happens to everyone, and no one. It happens to &lt;em&gt;you&lt;/em&gt;, whether you know it or not.&lt;/p&gt;
&lt;p&gt;The thing about &amp;quot;visceral&amp;quot; tho, is that it&#x27;s personal by definition. These words won&#x27;t duplicate my experience in you. But maybe you will pause and smell the roses, and the subtle decrease of oxygen in your air.&lt;/p&gt;
</description>
                <pubDate>Tue, 26 Apr 2022 10:42:58 -0700</pubDate>
                <link>https://duan.ca/2022/04/26/visceral/</link>
                <guid isPermaLink="true">https://duan.ca/2022/04/26/visceral/</guid>
            </item>
            <item>
                <title>Using Instruments on Non-macOS, Non-iOS Executables</title>
                <description>&lt;p&gt;How do you use use Instruments, the instrumentation tool distributed alongside Xcode? It&#x27;s easy if you are
profiling a macOS or iOS app. No so with a regular old command-line tool built, say, with SwiftPM. To do so,
you&#x27;ll need to codesign the target binary. Otherwise Instruments will give you a &lt;code&gt;&amp;quot;Failed to gain authorization&amp;quot;&lt;/code&gt; error message.&lt;/p&gt;
&lt;p&gt;Here&#x27;s the steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a entitlement file with &lt;code&gt;com.apple.security.get-task-allow&lt;/code&gt; set to true:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;
&amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt;
    &amp;lt;dict&amp;gt;
        &amp;lt;key&amp;gt;com.apple.security.get-task-allow&amp;lt;/key&amp;gt;
        &amp;lt;true/&amp;gt;
    &amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&#x27;s call it &lt;code&gt;Entitlements.plist&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;
&lt;p&gt;Build the executable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Codesign your executable with the entitlement file&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;codesign -s - -f --entitlements path/to/Entitlements.plist path/to/executable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now proceed with your profiling in Instruments.&lt;/p&gt;
&lt;p&gt;Not sure where this is officially documented. So I&#x27;m officially documenting it here.&lt;/p&gt;
</description>
                <pubDate>Thu, 31 Mar 2022 20:39:05 -0700</pubDate>
                <link>https://duan.ca/2022/03/31/instrumenting-commandline-executables/</link>
                <guid isPermaLink="true">https://duan.ca/2022/03/31/instrumenting-commandline-executables/</guid>
            </item>
            <item>
                <title>Flake For Non-Nix Projects</title>
                <description>&lt;p&gt;The ideal outcome of using Nix or home-manager is to have as many things as possible under their control.
Among these things are developer tools for coding. You may need &lt;code&gt;cargo&lt;/code&gt;, and &lt;code&gt;rust-analyzer&lt;/code&gt; for Rust projects;
&lt;code&gt;ipython&lt;/code&gt;, and &lt;code&gt;python-lsp-server&lt;/code&gt; for Python projects, etc.&lt;/p&gt;
&lt;p&gt;Of course, the simplest solution is to have them all installed and configured in home-manager or the OS level.
But, over time, you&#x27;ll end up with a ton of stuff.&lt;/p&gt;
&lt;p&gt;Maybe that won&#x27;t bother you. Fine, but this approach is at odds with some convention of the Nix community. You
see, there&#x27;s this command called &lt;code&gt;nix-shell&lt;/code&gt;, or &lt;code&gt;nix develop&lt;/code&gt;, which sets up a environment with certain
packages, with the expectation that you only need them sometimes, usually within the context of developing
a certain software project.&lt;/p&gt;
&lt;p&gt;So, arguably, a better alternative to installing everything you possibly need is to keep only the essential
tools you always need, regardless of what you are working on. Things like &lt;code&gt;neovim&lt;/code&gt;, &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;ripgrep&lt;/code&gt;, etc.
When a project demands things such as &lt;code&gt;rust-analyzer&lt;/code&gt;, running &lt;code&gt;nix develop&lt;/code&gt; should set it up for you.&lt;/p&gt;
&lt;p&gt;How do we implement that? In a imaginary world where every single software project is built with a flake.nix,
the &lt;code&gt;devShell&lt;/code&gt; property should provide everything the software project owner expect you to need. And you just
&lt;code&gt;cd&lt;/code&gt; into the root of the project, run &lt;code&gt;nix develop&lt;/code&gt;, and you are off to the races.&lt;/p&gt;
&lt;p&gt;Several problems:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;running &lt;code&gt;nix develop&lt;/code&gt; is repetitive, and therefore, annoying.&lt;/li&gt;
&lt;li&gt;the owner of a flake.nix may have drastically different taste for the best dev tools for their project
(bet!).&lt;/li&gt;
&lt;li&gt;we don&#x27;t live in a world built with Nix flakes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Yikes.&lt;/p&gt;
&lt;p&gt;To solve &lt;code&gt;1&lt;/code&gt;, enter &lt;a href=&quot;https://github.com/nix-community/nix-direnv&quot;&gt;direnv&lt;/a&gt;. It&#x27;s a piece of software that let you create a environment for a directory,
and automatically switch to it when you enter said directory. The &amp;quot;environment&amp;quot; could contain envvars, and,
you guessed it: a Nix developer shell. If you have a flake.nix, add &lt;code&gt;use flake&lt;/code&gt; in your project directory&#x27;s
&lt;code&gt;.envrc&lt;/code&gt; file, direnv will automatically call &lt;code&gt;nix develop&lt;/code&gt; the next time you &lt;code&gt;cd&lt;/code&gt; in. Neat!&lt;/p&gt;
&lt;p&gt;To make this work in practice, you&#x27;ll want to add &lt;code&gt;.envrc&lt;/code&gt; and &lt;code&gt;.direnv/&lt;/code&gt; to your global git ignore list, as
they are personal preferences that probably shouldn&#x27;t end up in git history.&lt;/p&gt;
&lt;p&gt;Ok, we are so close to solve problem &lt;code&gt;2&lt;/code&gt;, and &lt;code&gt;3&lt;/code&gt; now. In short, &lt;code&gt;nix develop&lt;/code&gt; may set up &lt;strong&gt;a&lt;/strong&gt; environment,
but it may not be &lt;strong&gt;the&lt;/strong&gt; environment that suits you the best. &lt;a href=&quot;https://github.com/nix-community/nix-direnv&quot;&gt;nix-direnv&lt;/a&gt; extends direnv to save us:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;use flake path/to/flake#target
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;... with this in &lt;code&gt;.envrc&lt;/code&gt;, direnv will set up the Nix environment according to &lt;code&gt;path/to/flake#target&lt;/code&gt;. That
could point to any location on your hard drive! You can have a flake.nix whose &lt;code&gt;devShell&lt;/code&gt; has &lt;code&gt;cargo&lt;/code&gt;, and
&lt;code&gt;rust-analyzer&lt;/code&gt;. You can have another with &lt;code&gt;ipython&lt;/code&gt;, and &lt;code&gt;python-lsp-server&lt;/code&gt;. Mix and match to your liking to
the infinite degree...&lt;/p&gt;
&lt;p&gt;For now, I&#x27;ve decided to give nix-direnv a try. Alongside my home-manager configuration, I&#x27;ve also included
extra flakes for generic Python/Rust projects, and specific projects that may require a mix of tools. A lot of
the project I work on don&#x27;t use flake as their package manager. With this approach, I get to customize my
setup for them each, and stay in the comfort of Nix and home-manager.&lt;/p&gt;
&lt;p&gt;direnv and nix-direnv can be configured together with home-manager. To achieve everything mentioned in this
article, including direnv&#x27;s shell integration (Fish, for me), it&#x27;s as simple as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Nix&quot;&gt;# In home manager config...
programs.direnv = {
  enable = true;
  nix-direnv = {
    enable = true;
    enableFlakes = true;
  };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To recap, having the snippet above in my home-manager setup, I now can enter any project&#x27;s root directory and
add a &lt;code&gt;.envrc&lt;/code&gt; file with the content &lt;code&gt;use flake ~/src/dotfiles/direnvs/python&lt;/code&gt;.
&lt;code&gt;~/src/dotfiles/direnvs/python&lt;/code&gt; contains a &lt;code&gt;flake.nix&lt;/code&gt; (and a &lt;code&gt;flake.lock&lt;/code&gt;) that has the &lt;code&gt;devShell&lt;/code&gt; value
I like for all Python projects. When I &lt;code&gt;cd&lt;/code&gt; into this project, &lt;code&gt;(nix-)direnv&lt;/code&gt; will read from that &lt;code&gt;devShell&lt;/code&gt;
and set every tool listed under there. The tools are cached in a &lt;code&gt;.direnv&lt;/code&gt; directory so when I return here,
the setup is basically instantaneous. Since I make &lt;code&gt;git&lt;/code&gt; to ignore &lt;code&gt;.envrc&lt;/code&gt;, and &lt;code&gt;.direnv&lt;/code&gt; no matter where
they are, this project I&#x27;m working on is unaffected by all this.&lt;/p&gt;
</description>
                <pubDate>Sat, 19 Mar 2022 00:37:01 -0700</pubDate>
                <link>https://duan.ca/2022/03/19/nix-dirnev/</link>
                <guid isPermaLink="true">https://duan.ca/2022/03/19/nix-dirnev/</guid>
            </item>
            <item>
                <title>Flake, Home Manager, and Extra Packages</title>
                <description>&lt;p&gt;So, you use a standalone home-manager, it&#x27;s set up with flake, tracking a particular nixpkgs channel. How do
you use a package from another channel? This seemingly simple task took me, a Nix noob, quite a bit of
research to solve. Here&#x27;s how I did it.&lt;/p&gt;
&lt;p&gt;A simple flake.nix for home-manager might look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;{
  inputs = {
    nixpkgs.url = &amp;quot;github:nixos/nixpkgs/nixos-21.11&amp;quot;;
    home-manager.url = &amp;quot;github:nix-community/home-manager/release-21.11&amp;quot;;
    home-manager.inputs.nixpkgs.follows = &amp;quot;nixpkgs&amp;quot;;
  };
  outputs = { self, nixpkgs, home-manager }: {
    &amp;quot;dan@some-mac&amp;quot; = home-manager.lib.homeManagerConfiguration {
      username = &amp;quot;dan&amp;quot;;
      system = &amp;quot;x86_64-darwin&amp;quot;;
      homeDirectory = &amp;quot;/home/dan&amp;quot;;
      configuration = { config, pkgs ... }: {
          home.packages = [
            pkgs.hello
          ];
      };
    };
  };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A few things of note:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;home manager is set to follow &lt;code&gt;nixpkgs&lt;/code&gt;, which tracks &lt;code&gt;nixos-21.11&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pkgs.hello&lt;/code&gt; refers to the package in &lt;code&gt;nixos-21.11&lt;/code&gt; as well.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To put things in concrete terms, our goal is to put a package from a channel other than &lt;code&gt;nixos-21.11&lt;/code&gt;
alongside &lt;code&gt;pkgs.hello&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The key to my solution is the &lt;code&gt;extraModules&lt;/code&gt; in &lt;code&gt;home-manager.lib.homeManagerConfiguration&lt;/code&gt;&#x27;s argument set.
We&#x27;ll leverage it to modify the environment made available to its sibling, &lt;code&gt;configuration&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First, add the new channel as input &lt;code&gt;nixpkgs-unstable&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;{
  inputs = {
    # ...
    nixpkgs-unstable.url = &amp;quot;github:nixos/nixpkgs&amp;quot;;
  };
  ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, add a small module to &lt;code&gt;extraModules&lt;/code&gt;. In it we make &lt;code&gt;nixpkgs-unstable&lt;/code&gt; an argument to &lt;code&gt;_module&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;{
  input = { ... };
  outputs = { self, nixpkgs, nixpkgs-unstable, home-manager }: { # Note we also pass in nixpkgs-unstable here
    &amp;quot;dan@some-mac&amp;quot; = home-manager.lib.homeManagerConfiguration {
      extraModules = [
        ({ pkgs, ... }: rec {
          _module.args.nixpkgs-unstable = import nixpkgs-unstable { inherit system; };
        })
      ];
      # ...
    };
  };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;... now that we added &lt;code&gt;args.nixpkgs-unstable&lt;/code&gt;, it becomes available in the configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;{
  input = { ... };
  outputs = { self, nixpkgs, nixpkgs-unstable, home-manager }: { # Note we also pass in nixpkgs-unstable here
    &amp;quot;dan@some-mac&amp;quot; = home-manager.lib.homeManagerConfiguration {
      # ...
      configuration = { config, pkgs, nixpkgs-unstable, ... }:
          home.packages = [
            pkgs.hello
            nixpkgs-unstable.python39Packages.python-lsp-server
          ];
      };
    };
  };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There, we made &lt;code&gt;python39Packages.python-lsp-server&lt;/code&gt; from nixpkgs&#x27;s master branch appear alongside our
standard, default channel.&lt;/p&gt;
&lt;p&gt;And that&#x27;s how you add packages from a different channel in a flake setup for standalone home-manager.&lt;/p&gt;
</description>
                <pubDate>Tue, 15 Mar 2022 18:53:59 -0700</pubDate>
                <link>https://duan.ca/2022/03/15/standalone-home-manager-flake-channels/</link>
                <guid isPermaLink="true">https://duan.ca/2022/03/15/standalone-home-manager-flake-channels/</guid>
            </item>
            <item>
                <title>An Invisible Chasm</title>
                <description>&lt;p&gt;In the journey of growing software systems, there comes a point where certain engineering decision will create
a chasm so large that it&#x27;s practically impossible to go back. The initial crossing of this chasm is so easy
that it often happens without anyone noticing. Nonetheless, it is a costly mistake.&lt;/p&gt;
&lt;p&gt;On one side of this chasm, any member of the engineering team can answer the question &amp;quot;how, exactly, is my
code being consumed in our engineering org?&amp;quot;. Here lies clarity. Your team fearlessly delete dead code. Legacy
logic has their days marked. Lacking documentation? Not ideal, but you can always find how an API gets used
in all scenarios easily.&lt;/p&gt;
&lt;p&gt;On the other side, no one has the answer. The corpses pile up. Deprecating things comes with uncertainty. You
warn your team &amp;quot;please carefully consider adding things here, because we&#x27;ll keep it around forever&amp;quot;. Need to
respond to an incident? Better hope your monitoring system is good. Trying to trace the code path won&#x27;t get
you answers in time. We&#x27;ll leave that for the post-mortem.&lt;/p&gt;
&lt;p&gt;Tooling, yes, exactly what decision leads to the chasm depends on the state of tooling for your technology
stack. The programming languages, build system, repository setup, coding style guides, IDEs, linters, search
engine ... all factor into the final answer. A statically typed language compiler won&#x27;t help you look up
users in a different micro-service. State-of-art symbol lookup may exist for a dynamically typed system
because some companies have thrown enormous amount of money to solve it. Maybe your kick-ass style guides
enforced by linters across multiple languages makes it possible to locate anything by text. You see, it is
a quantitative matter: it is always &lt;em&gt;possible&lt;/em&gt; to revert to the good old days. But it will be &lt;em&gt;expensive&lt;/em&gt; in
terms of dollars, and/or will power.&lt;/p&gt;
&lt;p&gt;When did you cross the chasm?&lt;/p&gt;
&lt;p&gt;Beware of the chasm.&lt;/p&gt;
</description>
                <pubDate>Thu, 17 Feb 2022 13:40:27 -0800</pubDate>
                <link>https://duan.ca/2022/02/17/invisible-chasm/</link>
                <guid isPermaLink="true">https://duan.ca/2022/02/17/invisible-chasm/</guid>
            </item>
            <item>
                <title>Building IndexStoreDB on Linux: The Portable Technique</title>
                <description>&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;As of writing of this article, when you attempt to use Apple&#x27;s Swift library &lt;a href=&quot;https://github.com/apple/indexstore-db&quot;&gt;IndexStoreDB&lt;/a&gt; on Linux as
a normal SwiftPM dependency, it won&#x27;t build successfully:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fish&quot;&gt;❯ cat Package.resolved
{
  &amp;quot;object&amp;quot;: {
    &amp;quot;pins&amp;quot;: [
      {
        &amp;quot;package&amp;quot;: &amp;quot;IndexStoreDB&amp;quot;,
        &amp;quot;repositoryURL&amp;quot;: &amp;quot;https://github.com/apple/indexstore-db&amp;quot;,
        &amp;quot;state&amp;quot;: {
          &amp;quot;branch&amp;quot;: &amp;quot;swift-5.5.2-RELEASE&amp;quot;,
          &amp;quot;revision&amp;quot;: &amp;quot;e771994778265c2efe8d33a7ca30adf5f3d2065a&amp;quot;,
          &amp;quot;version&amp;quot;: null
        }
      }
    ]
  },
  &amp;quot;version&amp;quot;: 1
}

❯ swift build &amp;gt; /dev/null

❯ echo $status
1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The issue is documented in the build instruction for Linux:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The C++ code in the index requires &lt;code&gt;libdispatch&lt;/code&gt;, but unlike Swift code, it cannot find it automatically on Linux. You can work around this by adding a search path manually.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;$ swift build -Xcxx -I&amp;lt;path_to_swift_toolchain&amp;gt;/usr/lib/swift -Xcxx -I&amp;lt;path_to_swift_toolchain&amp;gt;/usr/lib/swift/Block
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Okay, so, how would my package build in Linux environments where the Swift toolchain&#x27;s setup is unknown? How
do we avoid building with one toolchain while mixing in &lt;code&gt;libdispatch&lt;/code&gt; from another toolchain somewhere? Here&#x27;s
what I did for my command-line tool &lt;a href=&quot;https://github.com/dduan/Clue&quot;&gt;Clue&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;The solution&lt;/h2&gt;
&lt;p&gt;The essence of the problem is about the installation location of the Swift toolchain. Our solution makes the
following assumptions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A Swift toolchain is installed on the file system on Linux (duh!).&lt;/li&gt;
&lt;li&gt;The toolchain is at least similar to the one distributed on Swift.org. So &lt;code&gt;libdispatch&lt;/code&gt; is distributed
alongside the other binaries, in a stable relative directory.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Having the &lt;code&gt;swift&lt;/code&gt; command available (assumption #1), we can just let it tell us about itself with the
&lt;code&gt;-print-target-info&lt;/code&gt; flag:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fish&quot;&gt;❯ swift -print-target-info
{
  &amp;quot;compilerVersion&amp;quot;: &amp;quot;Swift version 5.5.2 (swift-5.5.2-RELEASE)&amp;quot;,
  &amp;quot;target&amp;quot;: {
    &amp;quot;triple&amp;quot;: &amp;quot;x86_64-unknown-linux-gnu&amp;quot;,
    &amp;quot;unversionedTriple&amp;quot;: &amp;quot;x86_64-unknown-linux-gnu&amp;quot;,
    &amp;quot;moduleTriple&amp;quot;: &amp;quot;x86_64-unknown-linux-gnu&amp;quot;,
    &amp;quot;compatibilityLibraries&amp;quot;: [ ],
    &amp;quot;librariesRequireRPath&amp;quot;: false
  },
  &amp;quot;paths&amp;quot;: {
    &amp;quot;runtimeLibraryPaths&amp;quot;: [
      &amp;quot;/home/dan/.swiftenv/versions/5.5.2/usr/lib/swift/linux&amp;quot;
    ],
    &amp;quot;runtimeLibraryImportPaths&amp;quot;: [
      &amp;quot;/home/dan/.swiftenv/versions/5.5.2/usr/lib/swift/linux&amp;quot;,
      &amp;quot;/home/dan/.swiftenv/versions/5.5.2/usr/lib/swift/linux/x86_64&amp;quot;
    ],
    &amp;quot;runtimeResourcePath&amp;quot;: &amp;quot;/home/dan/.swiftenv/versions/5.5.2/usr/lib/swift&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great! We see where the runtime is installed. Now we can invoke assumption #2, that &lt;code&gt;libdispatch&lt;/code&gt; is at
a relative location to the rest of the runtime. In the output from above, the value for &lt;code&gt;runtimeResourcePath&lt;/code&gt;
happens to be the parent directory for &lt;code&gt;libdispatch&lt;/code&gt;&#x27;s headers. The &lt;code&gt;&amp;lt;path_to_swift_toolchain&amp;gt;&lt;/code&gt; value in
&lt;a href=&quot;https://github.com/apple/indexstore-db&quot;&gt;IndexStoreDB&lt;/a&gt;&#x27;s official instruction in this particular setup would be
&lt;code&gt;/home/dan/.swiftenv/versions/5.5.2&lt;/code&gt;.  So the following command would have worked:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;swift build -Xcxx -I/home/dan/.swiftenv/versions/5.5.2/usr/lib/swift -Xcxx -I/home/dan/.swiftenv/versions/5.5.2/usr/lib/swift/Block
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All we need to do is parse this information at build time, and it should work on every Linux setup! Choose
whatever parsing method you like. Here&#x27;s (more or less) the &lt;code&gt;Makefile&lt;/code&gt; for &lt;a href=&quot;https://github.com/dduan/Clue&quot;&gt;Clue&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-make&quot;&gt;SHELL = /bin/bash
ifeq ($(shell uname),Darwin)
EXTRA_SWIFT_FLAGS = &amp;quot;--disable-sandbox&amp;quot;
else
SWIFT_TOOLCHAIN = &amp;quot;$(shell swift -print-target-info | grep runtimeResourcePath | cut -f 2 -d &#x27;:&#x27; | cut -f 2 -d &#x27;&amp;quot;&#x27;)&amp;quot;
EXTRA_SWIFT_FLAGS = -Xcxx -I${SWIFT_TOOLCHAIN} -Xcxx -I${SWIFT_TOOLCHAIN}/Block
endif

define build
	@swift build --configuration $(1) -Xswiftc -warnings-as-errors ${EXTRA_SWIFT_FLAGS}
endef

.PHONY: build
build:
	$(call build,release)

.PHONY: test
test:
	@swift test ${EXTRA_SWIFT_FLAGS}

.PHONY: debug
debug:
	$(call build,debug)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;make build&lt;/code&gt; / &lt;code&gt;make test&lt;/code&gt; / &lt;code&gt;make debug&lt;/code&gt; all work as expected, building IndexStoreDB successfully.&lt;/li&gt;
&lt;li&gt;As-is, this snippet is project-agnostic. So you can throw it in your SwiftPM project and it should &amp;quot;just
work&amp;quot;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Alright!&lt;/p&gt;
</description>
                <pubDate>Wed, 09 Feb 2022 15:58:41 -0800</pubDate>
                <link>https://duan.ca/2022/02/09/building-indexstoredb-on-linux/</link>
                <guid isPermaLink="true">https://duan.ca/2022/02/09/building-indexstoredb-on-linux/</guid>
            </item>
            <item>
                <title>Making of a TOML parser</title>
                <description>&lt;p&gt;During the holidays, I spent some time on the parser that underlies &lt;a href=&quot;https://github.com/dduan/TOMDecoder&quot;&gt;TOMLDecoder&lt;/a&gt;. The original
implementation targeted TOML&#x27;s spec version 0.5. A few release-candidates for version 1.0 has come
out since then. So it&#x27;s a good time to give this project attention.&lt;/p&gt;
&lt;p&gt;Back in the 0.5 days, the TOML spec was (well) written in English with a few examples for each
element in the language. The spec document both:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;how a TOML document should be spelled out (table header should have a &lt;code&gt;[&lt;/code&gt;, followed by 0 or more
whitespace, then, a key, 0 or more whitespace, then &lt;code&gt;]&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;rules for detecting conflicts in a syntactically correct document (if &lt;code&gt;a.b&lt;/code&gt; is a table, then it&#x27;s
invalid to set its value to be a date in the same document).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My memory of hand-rolling a recursive-descent scanner that conforms to both of the above
requirements was unpleasant. My lesser understanding of the markup language, the vagueness for the
validation rules in the spec, as well as (I think?) poorer skill for writing parsers all contributed
to the unpleasantness. TOML has gained an ABNF for its syntax since then, making it less necessary
to reply on the English descriptions. It&#x27;s the holidays, maintaining existing code is hard.&lt;/p&gt;
&lt;p&gt;So, I decided to have some fun, and re-write the parser from scratch. The rest of this post contains
notable things from the rewrite.&lt;/p&gt;
&lt;p&gt;I translated the ABNF with parser combinators. The recent &lt;a href=&quot;https://pointfree.co&quot;&gt;Pointfree&lt;/a&gt; video series made me curious
about the performance of this parsing style in Swift. At the end of the rewrite, I added benchmarks
to find out. Here&#x27;s benchmark for parsing an example TOML document&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name                    time          std        iterations
-----------------------------------------------------------
example-toml.decoder    454840.000 ns ±   3.63 %       3045
example-toml.combinator 422721.500 ns ±   4.28 %       3266
example-toml.scanner     82232.000 ns ±   9.39 %      16793
example-toml.c            5901.000 ns ±  24.72 %     216140
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;example-toml.decoder&lt;/code&gt; is time spent on parsing + decoding. &lt;code&gt;example-toml.scanner&lt;/code&gt; is the time spent
by the old parser. &lt;code&gt;example-toml.c&lt;/code&gt; is the performance of a C library.&lt;/p&gt;
&lt;p&gt;So, the new parser is much much slower! However, I know from debugging through 200+ unit tests that,
the new parser fixed a few serious bugs compared to the old. It also conforms to diffs between
version 0.5 and 1.0 of the TOML spec. Speed alone is not good enough of a reason to throw this work
away! There&#x27;s another reason the new parser is superior, but I&#x27;ll talk about it later.&lt;/p&gt;
&lt;p&gt;To be fair to parser combinators, I made several decisions that preferred development speed over
runtime speed during development. These were conscious decisions. There were no benchmarks at
time so I didn&#x27;t want to worry about it pre-maturely. Point is, there are rooms for significant
runtime speed improvements. Perhaps I&#x27;ll write a follow-up post detailing my journey to make the
parser go fast later; the C library is part of the benchmark for a reason!&lt;/p&gt;
&lt;p&gt;I was also inspired by Joe Groff&#x27;s blog post &lt;a href=&quot;http://duriansoftware.com/joe/Constructing-human-grade-parsers.html&quot;&gt;Constructing human-grade parsers&lt;/a&gt;. Instead of
stopping at the first syntax error, a parser (any parser!) should treat the error as part of its
successful output, deal with the erroneous part of the input, and recover from it. This approach
means the portion of the input after the first error gets parsed, and any error it may contain can
be found and reported, too! Joe&#x27;s post explains this well.&lt;/p&gt;
&lt;p&gt;To talk about this further, let&#x27;s dive into some details.&lt;/p&gt;
&lt;p&gt;As mentioned earlier, to validate a TOML document, there are rules for both syntax and semantics to
consider. TOML has a few top-level constructs: table header, array-table header, and key-value
pairs. Each of these alone can be validated purely based on syntax. On a high level, a TOML parser
can do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;parse a list of top-level constructs&lt;/li&gt;
&lt;li&gt;iterate over this list, gradually assembly the complete TOML object&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Errors could exist from each of these two steps To make the parser &lt;em&gt;human-grade&lt;/em&gt;, the errors must
not propagate by disrupting the parsing logic. In Swift, this means the code don&#x27;t throw the
(conceptual) errors, instead, the top-level constructs include error as a possible value:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;enum TopLevel: Equatable {
    case table(Key)
    case arrayTable(Key)
    case keyValue(KeyValuePair)
    case error(Reason)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Upon evaluating a &lt;code&gt;TopLevel&lt;/code&gt; value, the parser must not stop if it generates a conflict according to
TOML&#x27;s requirement. We take note of this error, and move on to consume the next &lt;code&gt;TopLevel&lt;/code&gt;. Errors
from this step will join the error from &lt;code&gt;TopLevel.error&lt;/code&gt; at the end for users to see. Therefore, the
second step&#x27;s code roughly does this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;var errors = [Error]()

for value in topLevelValues {
    switch value {
    case .error(let reason):
        errors.append(reason)
    default:
        do {
            evaluate(value)
        } catch {
            errors.append(error)
        }
    }
}

if !errors.isEmpty {
    throw UserFacingError(details: errors)
}

// no error! parsing succeeded
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code &amp;quot;synchronizes&amp;quot; the errors from both the syntactical, and semantical level. With some
additional effort to make the errors &lt;code&gt;CustomStringConvertible&lt;/code&gt;, a erroneous TOML document such as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-TOML&quot;&gt;a = &amp;quot;Hello
b = 43
[b]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;makes the parser generate the following error message:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Deserialization failure:
    * Value |1, 5| Missing closing character `&amp;quot;` in string
    * Conflict |3, 2| Conflicting value at [b] Existing value is 43
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The explanation I presented above is simplified by a lot. In reality, the &amp;quot;human-grade&amp;quot; upgrade can
go a lot further. For example, if the definition of &lt;code&gt;a&lt;/code&gt; has a syntax error, instead of rejecting it,
as long as we can figure out what the intent is, we can pretend it&#x27;s a good value. That way, any
semantic issues related to &lt;code&gt;a&lt;/code&gt; can be discovered. Improvements like this can be added to the parser
in many places still.&lt;/p&gt;
&lt;p&gt;Anyways, here&#x27;s where I abruptly stop the story of my new TOML parser. There are a lot of exciting
space for improvment. So this article might be a &amp;quot;part 1&amp;quot;. No promises, though.&lt;/p&gt;
</description>
                <pubDate>Sun, 03 Jan 2021 14:56:10 -0800</pubDate>
                <link>https://duan.ca/2021/01/03/human-grade-toml-parser-in-swift/</link>
                <guid isPermaLink="true">https://duan.ca/2021/01/03/human-grade-toml-parser-in-swift/</guid>
            </item>
            <item>
                <title>Installing Nix on macOS 11 Big Sur</title>
                <description>&lt;p&gt;&lt;em&gt;Note: as of Feburary, 2022, the steps written below has been incorporated by the official Nix install script for macOS. This article is, therefore, obsolete.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Here are the steps for installing nix on macOS 11 Big Sur.&lt;/p&gt;
&lt;h3&gt;Preparation&lt;/h3&gt;
&lt;p&gt;Decide on which disk the nix store is to be installed. By end of this process, you&#x27;ll have a disk
name like &lt;code&gt;disk4&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Personally, I like looking it up in the Disk Utility app:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2020/12/disk-utility.png&quot; alt=&quot;Disk Utility&quot; /&gt;&lt;/p&gt;
&lt;p&gt;You can also use other methods, such us the &lt;code&gt;diskutil list&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;Have this disk name ready.&lt;/p&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;h4&gt;1. Create the path &lt;code&gt;/nix&lt;/code&gt; the macOS way.&lt;/h4&gt;
&lt;p&gt;Edit or create the file &lt;code&gt;/etc/synthetic.conf&lt;/code&gt;, adding this line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nix
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reboot the Mac.&lt;/p&gt;
&lt;h4&gt;2. Create a APFS volume for the nix store.&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;sudo diskutil apfs addVolume diskX APFS &#x27;Nix Store&#x27; -mountpoint /nix
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make sure to replace &lt;code&gt;diskX&lt;/code&gt; with the disk you identified in the preparation step.&lt;/p&gt;
&lt;h4&gt;3. Mount the volume.&lt;/h4&gt;
&lt;p&gt;Edit or create the file &lt;code&gt;/etc/fstab&lt;/code&gt;, adding this line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LABEL=Nix\040Store /nix apfs rw,nobrowse
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reboot the Mac.&lt;/p&gt;
&lt;h4&gt;4. Install Nix the &amp;quot;normal&amp;quot; way&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;sh &amp;lt;(curl -L https://nixos.org/nix/install)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;5. You are done! Try it out. I ran this little &lt;a href=&quot;https://nix.dev/tutorials/dev-environment.html&quot;&gt;example&lt;/a&gt; as a test and things appears to work as expected.&lt;/h4&gt;
&lt;h3&gt;Bonus: using Nix in Fish shell&lt;/h3&gt;
&lt;p&gt;As a fish user, I&#x27;m used to fixing things up myself since software from non-fish users usually
pretends fish doesn&#x27;t exist. Anyways, in the final steps of its installation, Nix sets up a few
environment variables in a bash script. I&#x27;ve adapted these specifically for fish on macOS. Add these
to your config.fish:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set -x NIX_PROFILES &amp;quot;/nix/var/nix/profiles/default $HOME/.nix-profile&amp;quot;
set -x NIX_SSL_CERT_FILE &amp;quot;$HOME/.nix-profile/etc/ssl/certs/ca-bundle.crt&amp;quot;
set -x NIX_PATH /nix $HOME/.nix-defexpr/channels
set -x PATH $HOME/.nix-profile/bin $PATH
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It shouldn&#x27;t be to hard to do this on other OSes. The relevant information is in
&lt;code&gt;~/.nix-profile/etc/profile.d/nix.sh&lt;/code&gt;.&lt;/p&gt;
</description>
                <pubDate>Sun, 13 Dec 2020 12:00:52 -0800</pubDate>
                <link>https://duan.ca/2020/12/13/nix-on-macos-11-big-sur/</link>
                <guid isPermaLink="true">https://duan.ca/2020/12/13/nix-on-macos-11-big-sur/</guid>
            </item>
            <item>
                <title>Markra 1.0</title>
                <description>&lt;p&gt;I&#x27;ve never been patient enough to learn the JIRA plain-text syntax, depite being
a frequent user throughout the years. So a while ago I wrote this little utility
that lets me compose JIRA ticket in Markdown. Some thoughts were put into
whether this should be an OSS and free (as in beer) app, or something
I distribute via the Mac App Store. Ultimately, the first option prevailed. So,
without further adiue, here&#x27;s the repo for &lt;a href=&quot;https://github.com/dduan/Markra&quot;&gt;Markra&lt;/a&gt; with &lt;a href=&quot;https://github.com/dduan/Markra/releases/tag/1.0&quot;&gt;version 1.0 macOS
app download in the release page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2020/11/markra-screenshot.png&quot; alt=&quot;A Marka macOS app screenshot&quot; /&gt;&lt;/p&gt;
&lt;p&gt;As far as I&#x27;m concerned, the app is pretty much done. And its feature set is
small and self-explanatory. So I don&#x27;t expect more releases other than minor
bug fix in the future.&lt;/p&gt;
&lt;p&gt;I hope some find it as useful as I do.&lt;/p&gt;
</description>
                <pubDate>Sun, 22 Nov 2020 12:53:52 -0800</pubDate>
                <link>https://duan.ca/2020/11/22/marka/</link>
                <guid isPermaLink="true">https://duan.ca/2020/11/22/marka/</guid>
            </item>
            <item>
                <title>Fantastic Beasts in C and Where To Find Them in Swift</title>
                <description>&lt;p&gt;Swift has a pretty decent C-interoperability story. But C has many features! Today, I&#x27;ll tell you
a story involving a few not-so-well supported C features and Swift.&lt;/p&gt;
&lt;p&gt;It all started when I decided to re-write &lt;a href=&quot;https://github.com/dduan/Pathos&quot;&gt;Pathos&lt;/a&gt; with Windows support. One of the library&#x27;s
offering is reading the literal target of a symbolic link: if &lt;code&gt;b&lt;/code&gt; is a link to &lt;code&gt;a&lt;/code&gt;, then
&lt;code&gt;Path(&amp;quot;b&amp;quot;).readSymlink()&lt;/code&gt; should return a another path that&#x27;s equivalent to &lt;code&gt;Path(&amp;quot;a&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The Windows API that returns this information is &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/ioapiset/nf-ioapiset-deviceiocontrol&quot;&gt;DeviceIoControl&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;BOOL DeviceIoControl(
  HANDLE       hDevice,
  DWORD        dwIoControlCode,
  LPVOID       lpInBuffer,
  DWORD        nInBufferSize,
  LPVOID       lpOutBuffer,
  DWORD        nOutBufferSize,
  LPDWORD      lpBytesReturned,
  LPOVERLAPPED lpOverlapped
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice anything weird? Hint: &lt;code&gt;LPVOID&lt;/code&gt; is &lt;code&gt;void *&lt;/code&gt; in standard C.&lt;/p&gt;
&lt;p&gt;This function is, for the lack of better words, polymorphic: depending on your input, it can intake
and output different types. As a caller, it is your responsibility to look up what type is needed
and cast them to and from those &lt;code&gt;void *&lt;/code&gt;s. The size of the data structure is returned as well. We&#x27;ll
have a lot to talk about that later.&lt;/p&gt;
&lt;p&gt;Perhaps, surprisingly, this is not too hard to deal with in Swift. In my &lt;a href=&quot;/2020/09/09/free-c-strings&quot;&gt;last article&lt;/a&gt;,
I detailed how we can use an Swift API to work with C buffers:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;/// get the file `handle`...
/// now call `DeviceIoControl`
var data = ContiguousArray&amp;lt;CChar&amp;gt;(
    unsafeUninitializedCapacity: kMax
) { buffer, count in
    var size: DWORD = 0
    DeviceIoControl(
        handle,
        FSCTL_GET_REPARSE_POINT,
        nil,
        0,
        buffer.baseAddress,
        DWORD(buffer.count),
        &amp;amp;size,
        nil
    )
    count = Int(size)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So this fills the array of &lt;code&gt;CChar&lt;/code&gt;s with the necessary bytes for out result. I named the variable
&lt;code&gt;data&lt;/code&gt; because it is exactly the same concept as &lt;code&gt;Foundation&lt;/code&gt;&#x27;s Data, as most Swift programmers
know.&lt;/p&gt;
&lt;p&gt;As promised, we&#x27;ll cast this data to the actual type so that we can retrieve information from its
bytes. Side note: casting in this context is a documented usage, So it really is more awkward rather
than bad. And there&#x27;s a safe way to do it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;withUnsafePointer(to: data) {
    $0.withMemoryRebound(
        to: [ReparseDataBuffer].self,
        capacity: 1
    ) { buffer in
        // first element in `buffer` is 
        /// a `ReparseDataBuffer`! Yay
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;It&#x27;s very important to note that &lt;code&gt;ReparseDataBuffer&lt;/code&gt; is a struct with fixed, predictable layout,
that the API &lt;code&gt;DeviceIoControl&lt;/code&gt; promises to return. In practice, this means it is defined in C. Swift
does not currently guarantee struct layout. So unless you really know what you are doing and don&#x27;t
care about forward compatibility, you should not do this with Swift structs.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So far this story has been boring for avid Swift programmers. Fear not, things will get spicy now.&lt;/p&gt;
&lt;p&gt;Let&#x27;s talk about this &lt;code&gt;ReparseDataBuffer&lt;/code&gt;. It&#x27;s an imported C type with a few notable features.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;typedef struct {
  unsigned long  ReparseTag;
  unsigned short ReparseDataLength;
  unsigned short Reserved;
  union {
    struct {
      unsigned short SubstituteNameOffset;
      unsigned short SubstituteNameLength;
      unsigned short PrintNameOffset;
      unsigned short PrintNameLength;
      unsigned long  Flags;
      wchar_t  PathBuffer[1];
    } SymbolicLinkReparseBuffer;
    struct {
      unsigned short SubstituteNameOffset;
      unsigned short SubstituteNameLength;
      unsigned short PrintNameOffset;
      unsigned short PrintNameLength;
      wchar_t  PathBuffer[1];
    } MountPointReparseBuffer;
    struct {
      unsigned char DataBuffer[1];
    } GenericReparseBuffer;
  };
} ReparseDataBuffer;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Feature #1: it has a &lt;em&gt;union member&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;union&lt;/code&gt; in C is an area in memory that could be any of the types specified in the union:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;// X.a is a `char` and X.b is a `uint64_t`. 
// And they occupy the same memory because
// only 1 of them exists at a time.
typedef union {
    char a;
    uint64_t b;
} X;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Swift does not own a direct analog for this. So if we import this &lt;code&gt;ReparseDataBuffer&lt;/code&gt; definition,
there wouldn&#x27;t be a good way to access the data inside the union.&lt;/p&gt;
&lt;p&gt;As I pointed out in the comment, members of a union occupy the same space in memory. The largest
member defines the size of that space, so everyone can fit inside of it. Each union member
interprets the same bytes according to their own definition. Given this knowledge, we can derive
a solution that works around Swift&#x27;s limitations: break up the union (sorry, this whole paragraph
reads super suggestive of the real world union. It&#x27;s probably why this word is picked for this data
structure in the first place. But I do not intend to say anything about the real world here)!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;typedef struct {
  unsigned long reparseTag;
  unsigned short reparseDataLength;
  unsigned short reserved;
  unsigned short substituteNameOffset;
  unsigned short substituteNameLength;
  unsigned short printNameOffset;
  unsigned short printNameLength;
  unsigned long flags;
  wchar_t pathBuffer[1];
} SymbolicLinkReparseBuffer;

typedef struct {
  unsigned long reparseTag;
  unsigned short reparseDataLength;
  unsigned short reserved;
  unsigned short substituteNameOffset;
  unsigned short substituteNameLength;
  unsigned short printNameOffset;
  unsigned short printNameLength;
  wchar_t pathBuffer[1];
} MountPointReparseBuffer;

// we don&#x27;t care about the 3rd union
// member in this use case
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Conveniently for us, the union member in &lt;code&gt;ReparseDataBuffer&lt;/code&gt; is at the end. So we don&#x27;t need to
worry about padding the unused space for smaller alternatives. Back in Swift, instead of dealing
with &lt;code&gt;ReparseDataBuffer&lt;/code&gt; directly, we can work with &lt;code&gt;SymbolicLinkReparseBuffer&lt;/code&gt; or
&lt;code&gt;MountPointReparseBuffer&lt;/code&gt;, depending on our expectation of which union member to read.&lt;/p&gt;
&lt;p&gt;Yeah, this is a good time to mention that, &lt;a href=&quot;https://github.com/dduan/Pathos&quot;&gt;Pathos&lt;/a&gt; has to include copies of these definition in a
separate C module. Not only because we need to &amp;quot;break up the union&amp;quot;, the original definition is also
only accessible after importing some headers in the NT kernel. So the standard &lt;code&gt;import WinSDK&lt;/code&gt; won&#x27;t
suffice.&lt;/p&gt;
&lt;p&gt;Moving on to notable feature #2. The last member of both &lt;code&gt;SymbolicLinkReparseBuffer&lt;/code&gt; and
&lt;code&gt;MountPointReparseBuffer&lt;/code&gt; &lt;code&gt;pathBuffer&lt;/code&gt; is a 1-character long array...why?&lt;/p&gt;
&lt;p&gt;In C, this is a &lt;em&gt;flexible array member&lt;/em&gt;. Such member must always appear at the end of a struct.
The word &amp;quot;flexible&amp;quot; in this context refers to the amount of memory allocated for this type of
structs : it can vary according to the length of the array as needed. The member such as
&lt;code&gt;pathBuffer&lt;/code&gt; is here to provide access to the beginning of the buffer.&lt;/p&gt;
&lt;p&gt;To Swift, &lt;code&gt;pathBuffer&lt;/code&gt; looks like a single &lt;code&gt;UInt16&lt;/code&gt;. The language obviously don&#x27;t have a good idea
of this C feature. So how to we get the rest of the data from this array?&lt;/p&gt;
&lt;p&gt;Once again, we have to lean on our understanding of memory layout in C structs.&lt;/p&gt;
&lt;p&gt;As is common in APIs for flexible array members, the length of the array trailing the struct is
provide to us. Let&#x27;s call it &lt;code&gt;flexibleLength&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2020/09/flexible_array_member.png&quot; alt=&quot;Illustration of memory layout for a C struct with flexible array member&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We already have the memory for these structs in bytes (remember &lt;code&gt;data&lt;/code&gt;?). And we can get the size
for the fixed potion of the structs with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let fixedStructSize = MemoryLayout&amp;lt;
    SymbolicLinkReparseBuffer
&amp;gt;.stride
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Putting it all together, we can get the full content of the array by&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;chopping off the content for struct itself,&lt;/li&gt;
&lt;li&gt;casting the rest of the raw buffer to the expected element type, and&lt;/li&gt;
&lt;li&gt;include the last member in this struct as the first element in the array&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Include the first element, which is at
// the end of the fixed struct potion.
let arrayStart = fixedStructSize - 1
// Cast the data buffer so it&#x27;s composed 
// of `wchar_t` aka `UInt16`s.
let array = withUnsafePointer(to: data) {
    $0.withMemoryRebound(
        to: [UInt16].self,
        capacity: data.count / 2
    ) { sixteenBitData in
        // chop off the non-array potion
        sixteenBitData.pointee[
            arrayStart ..&amp;lt; (arrayStart + flexibleLength)
        ]
    }
}

// now, go nuts on the array! You earned it!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Considerations such as error handling are intentionally left out in this article. You can checkout
the source code of &lt;a href=&quot;https://github.com/dduan/Pathos&quot;&gt;Pathos&lt;/a&gt; (on the &lt;code&gt;next&lt;/code&gt; branch) for the full glory.&lt;/p&gt;
&lt;p&gt;Anyways, the flexible array member turns out to be the literal target of the symbolic link. So here
is the end of our story. I&#x27;m interested to hear about alternative approaches for dealing with union
members and flexible array members in Swift. Let me know on &lt;a href=&quot;https://twitter.com/daniel_duan&quot;&gt;Twitter&lt;/a&gt;, or &lt;a href=&quot;&quot;&gt;Twitch&lt;/a&gt; when I&#x27;m
streaming!&lt;/p&gt;
</description>
                <pubDate>Sat, 12 Sep 2020 23:11:48 -0700</pubDate>
                <link>https://duan.ca/2020/09/12/fantastic-c-beasts-and-where-to-find-them-in-swift/</link>
                <guid isPermaLink="true">https://duan.ca/2020/09/12/fantastic-c-beasts-and-where-to-find-them-in-swift/</guid>
            </item>
            <item>
                <title>Faster C Strings in Swift</title>
                <description>&lt;p&gt;One of the goals in the re-write of my VFS library &lt;a href=&quot;https://github.com/dduan/Pathos&quot;&gt;Pathos&lt;/a&gt; is to make it go
fast. What does that mean when most of the time users are hitting the hard
drive when running your code? Well, let&#x27;s not dwell on that for now.&lt;/p&gt;
&lt;p&gt;A library like this passes &lt;em&gt;file paths&lt;/em&gt; back and forth with C APIs from the OS
a lot. So one way to go fast is to keep the original representation of the paths
as they are provided to us. On macOS and Linux (and other OSes that Swift
doesn&#x27;t officially support yet), paths are bought and sold in the so called
&amp;quot;C strings&amp;quot;: &lt;code&gt;NUL&lt;/code&gt;-terminated bytes (8-bit integers) with POSIX APIs and 16-bit
values on Windows with &lt;code&gt;UNICODE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&#x27;s walk over a couple of examples. Here&#x27;s how to get the current working
directory:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;// POSIX
char *getcwd(char *buf, size_t size);

// Windows
// LPTSTR (with right environment) is `wchar_t *`
DWORD GetCurrentDirectory(
    DWORD nBufferLength,
    LPTSTR lpBuffer
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The expected steps for using APIs like this are the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;you allocate a buffer large enough to store any result you expect.&lt;/li&gt;
&lt;li&gt;you give the buffer to the C function.&lt;/li&gt;
&lt;li&gt;the C function fills the buffer with some characters, and a &lt;code&gt;NUL&lt;/code&gt; (or &lt;code&gt;0&lt;/code&gt;)
right after the last character in the result.&lt;/li&gt;
&lt;li&gt;the function use a separate variable to tell you the size of the actual
result, not counting the &lt;code&gt;NUL&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It&#x27;s very generous of these functions to give us the size of the result. Because
the point of using &lt;code&gt;NUL&lt;/code&gt; to terminate &amp;quot;strings&amp;quot; is to avoid having to use
a separate size. Let&#x27;s use &lt;em&gt;setting the current working directory&lt;/em&gt; as the next
example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;// POSIX
int chdir(const char *path);

// Windows
BOOL SetCurrentDirectory(LPCTSTR lpPathName);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yup, these APIs don&#x27;t need you to tell them the content size of your buffer. But
if your content doesn&#x27;t end with a &lt;code&gt;NUL&lt;/code&gt;, they&#x27;ll happily read beyond your
intended stopping point until it finds a random &lt;code&gt;0&lt;/code&gt; in memory.&lt;/p&gt;
&lt;p&gt;Anyways, this is pretty classic C stuff. Now let&#x27;s talk about Swift!&lt;/p&gt;
&lt;p&gt;The default option to store a file path for most should be a &lt;code&gt;Swift.String&lt;/code&gt;,
which is a encoding-agnostic, Unicode glyph based list of characters. But as
I mentioned earlier, I want to avoid the cost of decoding and encoding in the
case where the path is only passing through the Swift code from C to C, without
being analyzed or modified. (If you need a refresher, &lt;a href=&quot;https://youtu.be/Vy2r21kli0Q&quot;&gt;I recently made a video
on Unicode and encoding&lt;/a&gt;.) So I chose to use an
&lt;a href=&quot;https://developer.apple.com/documentation/swift/contiguousarray&quot;&gt;ContiguousArray&lt;/a&gt; to store these C values:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Simplified for POSIX
struct Path {
    let storage: ContiguousArray&amp;lt;CChar&amp;gt;
    // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ContiguousArray&lt;/code&gt; (and &lt;code&gt;Array&lt;/code&gt;) provides an excellent way to interact with C
APIs we encountered earlier:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;init(
    unsafeUninitializedCapacity: Int,
    initializingWith initializer: (
        inout UnsafeMutableBufferPointer&amp;lt;Element&amp;gt;,
        inout Int
    ) throws -&amp;gt; Void
) rethrows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Don&#x27;t let the complex-looking signature intimidate you. Essentially, it gives
you write access to the array&#x27;s memory right after its allocation, but before
Swift does standard initialization to it. It works really well with the C APIs
we looked at earlier:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Store the current directory in a ContiguousArray
// Using the Windows API
let storage = ContiguousArray(
    unsafeUninitializedCapacity: Int(MAX_PATH)
) { buffer, count
    let length = GetCurrentWorkingDirectoryW(
        DWORD(MAX_PATH),
        buffer.baseAddress // C API writes in the allocated memory
    )

    count = length // you are responsible for setting size of the array
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Read the steps 1-4 again from earlier, it&#x27;s easy to see how this initializer is
designed to fit that pattern. The resulting array will have all the characters
as its content, and carries the correct size.&lt;/p&gt;
&lt;p&gt;When it&#x27;s time to pass the array back to C, we can provide a pointer easily:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;storage.withUnsafeBufferPointer {
    SetCurrentDirectory($0.baseAddress!)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is not great, because we don&#x27;t have a &lt;code&gt;NUL&lt;/code&gt; at the end of our array.  The
C function that read our array will sometimes read over the contents memory
until it finds a 0! Yikes.&lt;/p&gt;
&lt;p&gt;So here&#x27;s an easy fix:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;(storage + [0]).withUnsafeBufferPointer {
    SetCurrentDirectory($0.baseAddress!)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of using the memory of &lt;code&gt;storage&lt;/code&gt;, we construct a new array with an 0 as
its last value. This lets C APIs pick the right place to stop reading.
(Incidentally, Swift includes a built-in version of this &lt;a href=&quot;https://developer.apple.com/documentation/swift/string/2430818-utf8cstring&quot;&gt;for converting String
to UTF-8 (8-bit) C strings&lt;/a&gt;,
which includes the &lt;code&gt;NUL&lt;/code&gt; and it&#x27;s possible to further encode with different
encodings.)&lt;/p&gt;
&lt;p&gt;Although we&#x27;ve fixed the correctness bug, doing this defeats the purpose of
storing the C string directly somewhat: constructing a new array each time we
want to call a C API is kind of expensive. It involves allocating new memories
and copying over the content, etc.&lt;/p&gt;
&lt;p&gt;Alright. How about we carry around the &lt;code&gt;NUL&lt;/code&gt; in our array? Let&#x27;s update the
construction code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let storage = ContiguousArray(
    unsafeUninitializedCapacity: Int(MAX_PATH) + 1
) { buffer, count
    let length = GetCurrentWorkingDirectoryW(
        DWORD(MAX_PATH),
        buffer.baseAddress
    )

    buffer[length] = 0
    count = length + 1
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We add 1 every time we have a say in size. Then we manually set a 0 at the end
of the stuff from C. Having done this, we&#x27;ve solved both the correctness problem
and performance concern from earlier!&lt;/p&gt;
&lt;p&gt;The last bit of of this journey is ergonomics. Carrying an extra &lt;code&gt;NUL&lt;/code&gt; is fine
if you never look at the array&#x27;s content. But when you do, it&#x27;s important to
remember that the content we care about is &lt;em&gt;almost&lt;/em&gt; all of the array, except for
the &lt;code&gt;NUL&lt;/code&gt; at the end. In other words, simply don&#x27;t make off-by-1 mistakes and
everything will be fine.&lt;/p&gt;
&lt;p&gt;Alright, that&#x27;s easier said than done. To alleviate this off-by-1 painfulness,
I ended up exposing a &amp;quot;view&amp;quot; into the array storage that excludes the last
element. Here&#x27;s the actual definition in &lt;a href=&quot;https://github.com/dduan/Pathos&quot;&gt;Pathos&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct CString&amp;lt;Unit: BinaryInteger&amp;gt;: Equatable, Hashable {
    private var storage: ContiguousArray&amp;lt;Unit&amp;gt;
    var content: ContiguousArray&amp;lt;Unit&amp;gt;.SubSequence {
        storage[0 ..&amp;lt; storage.count - 1]
    }

    public func c&amp;lt;T&amp;gt;(
        action: (UnsafePointer&amp;lt;Unit&amp;gt;) throws -&amp;gt; T) throws -&amp;gt; T
    {
        try content.withUnsafeBufferPointer {
            try action($0.baseAddress!)
        }
    }

    init(cString: UnsafePointer&amp;lt;Unit&amp;gt;) {
       var length = 0
       while cString.advanced(by: length).pointee != 0 {
           length += 1
       }

       storage = ContiguousArray(
           unsafeUninitializedCapacity: length + 1
       ) { buffer, count in
           for offset in 0 ..&amp;lt; length {
               buffer[offset] = cString.advanced(by: offset).pointee
           }

           buffer[length] = 0
           count = length + 1
       }
    }

    // ... more stuff
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;storage&lt;/code&gt; in this solution is an private implementation detail. &lt;code&gt;content&lt;/code&gt; is
the primary access to the content of the string. And finally, this type
interops with C APIs correctly and efficiently because of the extra &lt;code&gt;NUL&lt;/code&gt; we put
at the end of &lt;code&gt;storage&lt;/code&gt;.&lt;/p&gt;
</description>
                <pubDate>Wed, 09 Sep 2020 01:21:26 -0700</pubDate>
                <link>https://duan.ca/2020/09/09/free-c-strings/</link>
                <guid isPermaLink="true">https://duan.ca/2020/09/09/free-c-strings/</guid>
            </item>
            <item>
                <title>Fall Guys are Among Us</title>
                <description>&lt;p&gt;I noticed a lot of people are playing these two games on Twitch recently: Fall Guys and Among Us.
Personally, I think Fall Guys is a pretty fun game to play and Among Us is an entertaining game to
watch. I&#x27;m glad these games are out and popular in this strange year, even though I&#x27;m not
playing either frequently (perhaps that&#x27;s a mistake).&lt;/p&gt;
&lt;p&gt;Anyways, I want to write about this observation that seems unique from me: that the in-game
characters in these two games are both blob-y, short and colorful. This similarity stuck in my head
for a while, and I&#x27;m getting increasingly anxious because those who frequently play these games
aren&#x27;t making similar remarks &lt;em&gt;at all&lt;/em&gt;. So, in this Sunday evening, I just had to get it out of my
head:&lt;/p&gt;
&lt;video id=&quot;video-tag&quot; width=&quot;100%&quot; autoplay muted loop playsinline&gt; 
    &lt;source src=&quot;/assets/2020/08/FallGuysAmongUs.mov&quot; type=&quot;video/quicktime&quot; /&gt;  
&lt;/video&gt;
&lt;img id=&quot;img-tag&quot; width=&quot;100%&quot; src=&quot;/assets/2020/08/FallGuysAmongUs.mov&quot;&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    function BrowserDetection() {
        //Check if browser is Safari, if it is, hide the &lt;video&gt; tag, otherwise hide the &lt;img&gt; tag
        if (navigator.userAgent.search(&quot;Safari&quot;) &gt;= 0 &amp;&amp; navigator.userAgent.search(&quot;Chrome&quot;) &lt; 0) {
            document.getElementById(&#x27;video-tag&#x27;).style.display= &quot;none&quot;;
        } else {
            document.getElementById(&#x27;img-tag&#x27;).style.display= &quot;none&quot;;
        }
    }

    //And run the script. Note that the script tag needs to be run after HTML so where you place it is important. 
    BrowserDetection();
&lt;/script&gt;
&lt;p&gt;This animation is made from Pixelmator and Keynote. Those two along with Sketch and Final Cut Pro
make me feel invincible these days.&lt;/p&gt;
</description>
                <pubDate>Sun, 16 Aug 2020 23:42:44 -0700</pubDate>
                <link>https://duan.ca/2020/08/16/fall-guys-and-among-us/</link>
                <guid isPermaLink="true">https://duan.ca/2020/08/16/fall-guys-and-among-us/</guid>
            </item>
            <item>
                <title>Taking Screenshots On Linux</title>
                <description>&lt;p&gt;Having used macOS for a number of years, I&#x27;ve formed some habit that I&#x27;m never
going to shake. Among them is taking screenshots with &lt;code&gt;Alt-Shift-3&lt;/code&gt; and
&lt;code&gt;Alt-Shift-4&lt;/code&gt;, follow up with area or window selection. So, when I bought a PC
and put Linux on it, it&#x27;s time to mess with it for these habits!&lt;/p&gt;
&lt;p&gt;And, it didn&#x27;t take too long to solve. I&#x27;ve found &lt;a href=&quot;https://github.com/naelstrof/maim&quot;&gt;maim&lt;/a&gt;. Writing this down
for mine and maybe, yours, future reference.&lt;/p&gt;
&lt;p&gt;To capture the entire screen:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bash -c &amp;quot;maim ~/Screenshots/fullscreen_$(date +%s).png&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To active area/windows selection for the capture:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bash -c &amp;quot;maim -s ~/Screenshots/area_$(date +%s).png&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&#x27;s how the latter in action (with keybinds via Ubuntu 20.20 desktop&#x27;s
Settings app).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2020/06/18/area-screenshot-on-ubuntu.gif&quot; alt=&quot;How selecting an area with maim works on Ubuntu&quot; /&gt;&lt;/p&gt;
</description>
                <pubDate>Thu, 18 Jun 2020 13:22:01 -0700</pubDate>
                <link>https://duan.ca/2020/06/18/taking-linux-screenshots/</link>
                <guid isPermaLink="true">https://duan.ca/2020/06/18/taking-linux-screenshots/</guid>
            </item>
            <item>
                <title>StreamLogger</title>
                <description>&lt;p&gt;After turning off stream on &lt;a href=&quot;https://twitch.tv/daniel_duan&quot;&gt;Twitch&lt;/a&gt;, the first thing I normally do is
exporting the stream video to YouTube, so that the stream has an archive that
survives Twitch&#x27;s short-ish retain policy.&lt;/p&gt;
&lt;p&gt;These videos, perhaps surprisingly, get a few views! It&#x27;s not a lot by any
measures, but I&#x27;m conscientious of the fact that a typical stream archive is
a multi-hour long video with no content curation, no clear schedule, and
it sometimes contains breaks. Needless to say, watching them after-the-fact
requires some (or a lot of) fast-forwarding.&lt;/p&gt;
&lt;p&gt;So, last week &lt;a href=&quot;https://twitch.tv/daniel_duan&quot;&gt;on stream&lt;/a&gt;, I set out to improve the fast-forwarding
experience. YouTube has this feature that lets you jump to specific timestamp
in the video through a URL parameter in the video&#x27; link. Further, they generate
this parameter for text in video&#x27;s description, if the text is in the right
format. This is handy for generating a &amp;quot;table of content&amp;quot; for the video so that
viewers can click the timestamp in the description to jump to the section they
are most interested in.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/dduan/StreamLogger&quot;&gt;StreamLogger&lt;/a&gt; is a little utility that lets me note down what happened while
I&#x27;m streaming. It&#x27;s kind of like writing a commit message, except the message
describes what happened since the last &amp;quot;commit&amp;quot;. These messages, along with
their associated timestamps, will be used by StreamLogger to generate the &amp;quot;table
of content&amp;quot;. Using it in command line looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Turn on stream, maybe check signs of being live, etc. Then
slog start # start a new log

# Do stuff, when it comes to a natural conclusion point...
slog -- &#x27;I did stuff&#x27;

# Do more stuff...
slog -- &#x27;some other stuff&#x27;

# Some time later... end stream
# No action is required to end the stream as far as StreamLogger is concerned.

# Now, to generate the table-of-content
slog stamp -s 1:32
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That last command outputs&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0:01:32 I did stuff
1:41:59 some other stuff
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;... which goes to the video&#x27;s description.&lt;/p&gt;
&lt;p&gt;There&#x27;s a few subtleties in this overall simple tool.&lt;/p&gt;
&lt;p&gt;Whenever a message is added, it gets associated with the time at which the
&lt;em&gt;previous&lt;/em&gt; message was add. So the act of logging marks both the end of
a chapter and the beginning of the next.&lt;/p&gt;
&lt;p&gt;In reality, there&#x27;s always going to be a gap between the start of the stream and
the time the log is initialized. That&#x27;s what the &lt;code&gt;-s 1:32&lt;/code&gt; in the last command
is trying to correct. It tells StreamLogger the length of the gap. Now the
absolute time associated with each event has a relationship with the archive
video.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I chose to write this in Rust because I&#x27;m going to need the final product on
Linux, macOS, and Windows since I stream on all 3 platforms. (fun fact: I never
built it directly on my PC running Linux. Instead, I simply downloaded the
musl-based build from the GitHub release, which was built by GitHub Actions. It
works beautifully.) Maybe one day I&#x27;ll add a GUI for it that works across these
platforms, too, so that it&#x27;s more friendly to wider group of users.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The more I use and think about StreamLogger, the more I like it. You can see
me working its entirety in the following archives ;)&lt;/p&gt;
&lt;p&gt;Part 1: https://youtu.be/xWRcdaEjir4
Part 2: https://youtu.be/RS-ZMBzu9Dg&lt;/p&gt;
</description>
                <pubDate>Sat, 13 Jun 2020 12:36:55 -0700</pubDate>
                <link>https://duan.ca/2020/06/13/stream-logger/</link>
                <guid isPermaLink="true">https://duan.ca/2020/06/13/stream-logger/</guid>
            </item>
            <item>
                <title>Introducing Dye</title>
                <description>&lt;p&gt;&lt;em&gt;Recently, I got a PC. And I started writing some code on Windows for the
giggles. Naturally, I gravitate towards stuff I use on macOS and Linux when it
comes to tooling. To my delight, NeoVim, ripgrep and fzf all work out of the box
in terminal simulators, which brings us to todays main topic...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I made a terminal coloring library for Swift that works on Windows,
&lt;a href=&quot;https://github.com/dduan/Dye/releases/tag/0.0.1&quot;&gt;Dye 0.0.1 is available now&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;So, why?&lt;/h2&gt;
&lt;p&gt;When I started working on &lt;a href=&quot;https://github.com/dduan/tre&quot;&gt;tre&lt;/a&gt;, I search in the
Rust ecosystem for a CLI interface library that supports as many platforms as
possible. Eventually I found &lt;a href=&quot;https://github.com/BurntSushi/termcolor&quot;&gt;termcolor&lt;/a&gt; among an ocean of options. As
a result, tre, like a lot of other CLI tools (like rg) written in Rust, has
a consistent UI on Windows and Unix. This experience has brought lots of joy, as
a user of both the library, and the app. I want to pay it forward to my fellow
Swift CLI makers, and their users.&lt;/p&gt;
&lt;p&gt;Zooming out slightly, success of Swift on Windows makes Swift as a skill more
valuable. And &lt;a href=&quot;https://duan.ca/2019/01/20/kick-ass-cli-tools-in-swift/&quot;&gt;I want more CLI tools written in Swift&lt;/a&gt;. So it&#x27;s
a double-win, really.&lt;/p&gt;
&lt;p&gt;Lastly, it&#x27;s a small library, all things considered. Being able to get it to
a shippable state on a weekend is a key reason I decided to work on it.&lt;/p&gt;
&lt;h2&gt;Technical tidbits&lt;/h2&gt;
&lt;p&gt;I love Max Howell&#x27;s &lt;a href=&quot;https://github.com/mxcl/Chalk&quot;&gt;Chalk&lt;/a&gt; library. It&#x27;s a 100-line Swift file that
implements &lt;a href=&quot;https://en.wikipedia.org/wiki/ANSI_escape_code&quot;&gt;ANSI escape code&lt;/a&gt; with Swift&#x27;s custom string interpolation
API. It demonstrates well how simple it is to customize your terminal output.&lt;/p&gt;
&lt;p&gt;Enter Windows, where ANSI sequences are ignored by built-in terminal simulators
from the past. The console is customized via a entirely separate, stateful,
imperative APIs (Newer simulators such as the freshly released &lt;a href=&quot;&quot;&gt;Terminal&lt;/a&gt;
actually supports ANSI codes pretty well). This is our lowest common API
denominator, which ultimately dictated the design of Dye.&lt;/p&gt;
&lt;p&gt;Dye&#x27;s API is centered around Swift&#x27;s built-in protocol &lt;code&gt;TextOutputStream&lt;/code&gt;. You
create a stream object and mutate the style need for upcoming output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let output = OutputStream.standardOutput()
output.color.foreground = .blue
print(&amp;quot;blue text&amp;quot;, to &amp;amp;stream) // blue text is blue
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the stream is redirected to something other than the terminal, styling gets
automatically disabled. There are various options to customize this behavior.&lt;/p&gt;
&lt;p&gt;Take a look at this &lt;a href=&quot;https://github.com/dduan/Dye/blob/master/Examples/main.swift&quot;&gt;sample app&lt;/a&gt; to get a more concrete picture of
how things work.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I&#x27;ll end with a screenshot of the sample app running in Command Prompt:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2020/06/01/windows-example-screenshot.jpg&quot; alt=&quot;Dye sample app running in Windows Command Prompt&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Let&#x27;s build more.&lt;/p&gt;
</description>
                <pubDate>Mon, 01 Jun 2020 15:08:01 -0700</pubDate>
                <link>https://duan.ca/2020/06/01/dye/</link>
                <guid isPermaLink="true">https://duan.ca/2020/06/01/dye/</guid>
            </item>
            <item>
                <title>Naive NixOS Rust Development</title>
                <description>&lt;p&gt;tl;dr: To work on Rust project with nix-shell, rls and extensions such as
&lt;code&gt;rust-analysis&lt;/code&gt;, &lt;code&gt;rust-src&lt;/code&gt;, without caring too much about specific Rust
toolchain version (except for it being &lt;code&gt;stable&lt;/code&gt;), use the following &lt;code&gt;shell.nix&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;let
  moz_overlay = import (builtins.fetchTarball https://github.com/mozilla/nixpkgs-mozilla/archive/master.tar.gz);
  nixpkgs = import &amp;lt;nixpkgs&amp;gt; {
    overlays = [ moz_overlay ];
  };
  ruststable = (nixpkgs.latest.rustChannels.stable.rust.override {
    extensions = [ &amp;quot;rust-src&amp;quot; &amp;quot;rust-analysis&amp;quot; ];}
  );
in
  with nixpkgs;
  stdenv.mkDerivation {
    name = &amp;quot;rust&amp;quot;;
    buildInputs = [ rustup ruststable ];
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you have a Nix hammer, everything looks like a Nix expression.&lt;/p&gt;
&lt;p&gt;Having used NixOS on a real PC for a number of days, this is the impression
I get from the world of Nix. Unfortunately, so far, it&#x27;s been a negative for me.&lt;/p&gt;
&lt;p&gt;One of the most exciting thing I want to use Nix for is to bootstrap development
environment with &lt;code&gt;nix-shell&lt;/code&gt;. I imagined it to be similar to using &lt;a href=&quot;https://pipenv-fork.readthedocs.io/en/latest/&quot;&gt;pipenv&lt;/a&gt;
with Python, except for everything. Well, I&#x27;ve since learned that it&#x27;s not true
(yet?) for many reasons.&lt;/p&gt;
&lt;p&gt;Modern programming languages come with their own attempt at &lt;em&gt;reproducibility&lt;/em&gt;.
Some does it better than others. To make it concrete, I&#x27;m talking about things
like &lt;a href=&quot;https://haskellstack.org&quot;&gt;Stack&lt;/a&gt; for Haskell or &lt;a href=&quot;https://rustup.rs/&quot;&gt;rustup&lt;/a&gt; for Rust: given the source code, how do
I make it build in the way the project intended? What&#x27;s the correct version of
the compiler, runtime, and tools that works best with this revision of the
source code? The common solution usually follows this pattern: as author of
a project, specify as much as you can, the environment best suited for the
current state of the project. As a &amp;quot;builder&amp;quot;, use a &lt;em&gt;single program&lt;/em&gt; that&#x27;s
capable of updating itself, as well as ensuring that the project builds exactly
as specified, including managing the compiler/runtime/tooling versions, etc.&lt;/p&gt;
&lt;p&gt;This &lt;em&gt;single program&lt;/em&gt;&#x27;s role is very much the same as the Nix system, except the
latter is independent of programming languages: &lt;code&gt;rustup&lt;/code&gt; installs Rust, so does
Nix. That&#x27;s a bad thing. As a package manager, Nix either have to tightly
integrate with each of these other package managers, leveraging their evolving
behaviors to give its user the build environment; or, it must replace them.
The former is impractical; the latter, well, sucks.&lt;/p&gt;
&lt;p&gt;Back to reality. This is the experience I want to have with NixOS: Some programs
I use daily such as Alacritty, NeoVim, Firfox, etc, are installed globally and
readily available. They are part of my &lt;code&gt;/etc/nixos/configuration.nix&lt;/code&gt;. So far so
good. Now, I regularly program in a few languages. For each of the project, I&#x27;d
like to have a &lt;code&gt;shell.nix&lt;/code&gt; that brings in its compilers, libraries, LSP servers,
etc. This is what &lt;code&gt;nix-shell&lt;/code&gt; is supposed to give me! This is known as the &amp;quot;per
project&amp;quot; setup.&lt;/p&gt;
&lt;p&gt;Let&#x27;s see: with Rust, that means &lt;code&gt;rustc&lt;/code&gt; (compiler), &lt;code&gt;cargo&lt;/code&gt; (package manager),
&lt;code&gt;rls&lt;/code&gt;, &lt;code&gt;rust-src&lt;/code&gt; and &lt;code&gt;rust-analysis&lt;/code&gt; (LSP). In macOS, I&#x27;d install all of these
globally with &lt;code&gt;rustup&lt;/code&gt;. In NixOS...well, I can ask for &lt;code&gt;rustup&lt;/code&gt; for my project:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;with import &amp;lt;nixpkgs&amp;gt; {};

stdenv.mkDerivation {
  name = &amp;quot;rust&amp;quot;;
  nativeBuildInputs = [ rustup ];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;...which gives me &lt;code&gt;rustup&lt;/code&gt; and nothing else. That&#x27;s right, you don&#x27;t even get
a &lt;code&gt;rustc&lt;/code&gt; after running &lt;code&gt;nix-shell&lt;/code&gt;. But &lt;code&gt;rustup&lt;/code&gt; can get you everything else,
all I need to do is ask. Hmm, do I need to run a series of set-up commands with
&lt;code&gt;rustup&lt;/code&gt; every time I enter the environment? No? I just need to run it the first
time? Until the cached tools get deleted by some garbage collection mechanism?
That seems unsatisfying, doesn&#x27;t it?&lt;/p&gt;
&lt;p&gt;Instead of &lt;code&gt;rustup&lt;/code&gt;, I could also ask Nix to use the &lt;code&gt;rustc&lt;/code&gt;/&lt;code&gt;cargo&lt;/code&gt;/&lt;code&gt;rls&lt;/code&gt; it
knows about directly. This is marginally better. Except I still need &lt;code&gt;rust-src&lt;/code&gt;
and &lt;code&gt;rust-analysis&lt;/code&gt; for my needs. As far as I can tell, these &lt;a href=&quot;https://github.com/rust-lang/rls&quot;&gt;RLS&lt;/a&gt; components
are out of Nix&#x27;s control (as of today).&lt;/p&gt;
&lt;p&gt;Everywhere on the internet I looked, for every problem that
Nix-the-package-manager doesn&#x27;t work out-of-the-box, there&#x27;s someone responding
along the line of &amp;quot;you can write some Nix expression yourself&amp;quot;. In other words,
Nix-the-language is powerful enough to solve it, probably. In the case of Rust,
luckily, Mozilla wrote enough Nix expressions for us and provides them via an
&lt;a href=&quot;https://github.com/mozilla/nixpkgs-mozilla&quot;&gt;overlay&lt;/a&gt;. These expressions are rich enough to meet my needs.
As you can see in the tl;dr at the top, when entering the development
environment, nix-shell would: download the overlay&#x27;s source code (from the
internet, or local cache), load the expression it includes, mix in my
customization, and execute it.&lt;/p&gt;
&lt;p&gt;That marks the end of my search. I like the final solution because it&#x27;s mostly
&amp;quot;vanilla&amp;quot; Nix and doesn&#x27;t require me to mess with a bunch of other tools. For
solutions that do, read &lt;a href=&quot;https://christine.website/blog/how-i-start-nix-2020-03-08&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;At end of the day, my needs are pretty basic: consistency from rustup and
convenience from nix-shell. I didn&#x27;t need to pin the compiler to a specific Rust
release, or checksum the final build output.&lt;/p&gt;
&lt;p&gt;I&#x27;m very new to both technologies so there may be a follow-up post sometime in
the future.&lt;/p&gt;
</description>
                <pubDate>Thu, 07 May 2020 11:04:58 -0700</pubDate>
                <link>https://duan.ca/2020/05/07/nix-rust-development/</link>
                <guid isPermaLink="true">https://duan.ca/2020/05/07/nix-rust-development/</guid>
            </item>
            <item>
                <title>Site Improvements 2020</title>
                <description>&lt;p&gt;I took back my website.&lt;/p&gt;
&lt;p&gt;I took it back from the claws of Jekyll and Ruby. I took it back from some
random template among a few that were immediately available. I took it back
from my own ignorance of modern web technology.&lt;/p&gt;
&lt;p&gt;This time, I rewrote the hole effing thing from scratch.&lt;/p&gt;
&lt;h3&gt;The Why&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;/2017/01/16/site-changes/&quot;&gt;last time&lt;/a&gt; I ended with&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I wrote the most Ruby in my life today. Yay?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That question mark turned out to be prescient. Ruby is not my thing. No
judgement against the language per ce. But the Ruby ecosystem is not friendly to
a casual user who needs it once every few months. No really, when I write an
article, it&#x27;s a toss-up whether I can deploy it without being forced to mess
with Ruby/Gems/Jekyll/Homebrew etc. I&#x27;m almost certain there&#x27;s a set of best
practices I could learn to improve this. But it&#x27;d be a skill that I barely need
and probably forget a few times. Meanwhile I just want to translate a new
Markdown file to HTML and put it on Github.&lt;/p&gt;
&lt;p&gt;As a teen, one of my favorite things about the web is how accessible it is.
I could sit in front of anyone&#x27;s computer, open Notepad.exe and type in some
tags, and open the file with a browser to see the result. That simple bootstrap
process, however repetitive, never got old for me.&lt;/p&gt;
&lt;p&gt;In the last decade, my professional work is focused on native, mobile
applications. This experience biased me in a few ways. &amp;quot;Native&amp;quot; made me
appreciate the closeness to &amp;quot;the metal&amp;quot;: you have an OS; you get the executable;
you launch strace, and boom, everything the OS thinks what your code does is
revealed to you. &amp;quot;Mobile&amp;quot; forced me to reckon with the reality: desktop
experience has become a niche. It&#x27;s nowhere near as important as it was prior to
the iPhone. Not making your software run well on mobile devices is a particular
kind of choice that come with some severe trade-offs.&lt;/p&gt;
&lt;p&gt;And, finally, I subscribe to the idea that &lt;em&gt;plain text is supreme&lt;/em&gt;. Yes, even
more supreme than the web. This website is a derivative of the articles I write
in Markdown. Plain text as a format will out-last the web in the long run (not
necessarily &lt;em&gt;these&lt;/em&gt; texts). So it really bothers me when I have to put &amp;quot;front
matter&amp;quot; in YAML/TOML/whatever in front of the real Markdown. Yes, if you want
reasonable HTMLs, these metadata is necessary. But the text is &lt;em&gt;Supreme&lt;/em&gt;. The
text is to be readable directly. Succumbing the supreme to the derivative is
&lt;em&gt;wrong&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Okay, so where does all that leave me? In this iteration of this website,
I wrote every single line of CSS and HTML (there&#x27;s barely any JavaScript) which
look decent on mobile. It&#x27;s generated by portable Linux and Darwin executables
that are part of the website. As long as the OSes stay relatively stable, the
site will build without any dependencies, in a matter of milliseconds. The best
part?  It&#x27;ll stay like this unless I wish it otherwise.&lt;/p&gt;
&lt;h3&gt;The Frontend&lt;/h3&gt;
&lt;p&gt;A few words on the design of the site.&lt;/p&gt;
&lt;p&gt;This site gained the concept of &amp;quot;links&amp;quot; the &lt;a href=&quot;/2017/01/16/site-changes/&quot;&gt;last time&lt;/a&gt;. It has since become
clear that I don&#x27;t use this feature (blame Twitter). It&#x27;s gone, for now. The old
&amp;quot;about&amp;quot; page is replaced by the home page.&lt;/p&gt;
&lt;p&gt;When I decided the site needed a rewrite, I fantasized a place with only HTML.
Perhaps users who want a better reading experience can simply put it in Reader
mode. Alas, if browsers (with the exception of Safari) implemented automatic
dark mode with a &lt;a href=&quot;https://drafts.csswg.org/css-color-adjust-1/#color-scheme-meta&quot;&gt;color-scheme meta&lt;/a&gt; tag, it&#x27;d almost be a working idea.&lt;/p&gt;
&lt;p&gt;So, that&#x27;s my starting point.&lt;/p&gt;
&lt;p&gt;The site is a list of articles organized by tags and dates, and a few web pages.
&lt;em&gt;I want you to read the site, not navigate it&lt;/em&gt;. So text is the point. It&#x27;s the
only design element. The site uses 2 fonts and 2 text-color (not counting
highlighted code). Links are always underscored (because you can&#x27;t hover in
mobile browsers to find something clickable).&lt;/p&gt;
&lt;p&gt;The site is responsive to mobile layout, and dark mode. It&#x27;s aware that it could
be added to the home screen of a mobile device, or linked to some external site
that wants to generate a preview.&lt;/p&gt;
&lt;p&gt;I did end up using &lt;a href=&quot;https://ethanschoonover.com/solarized/&quot;&gt;solarized&lt;/a&gt; theme for code highlighting, which lead to 2
static CSS files. Other than that, all CSS and HTML are hand-written. There&#x27;s no
build step for them, farm to table, Vim to your browser.&lt;/p&gt;
&lt;p&gt;It turned out standardized CSS variable is game-changing. Combined with media
queries, I barely needed any class to support dark mode/mobile layout. More
importantly, it makes my programmer brain happy. Oh, yes I&#x27;m talking about them
here because this is the first time I truly attempted to catch up since they
were introduced to the world. It&#x27;s freeing to let go of constrains of an
read-to-use theme, or some CSS frameworks.&lt;/p&gt;
&lt;h3&gt;The Backend&lt;/h3&gt;
&lt;p&gt;This site is a collection of static files. The so-called backend is a program
that assembles these files from some HTML templates and Markdown files. In the
past, this program had been &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. This time around, I replaced it with
some Rust code.&lt;/p&gt;
&lt;p&gt;Boy, this thing is cool, if I say so myself. I&#x27;m going to refer to it as &amp;quot;the
generator&amp;quot;.&lt;/p&gt;
&lt;p&gt;The biggest &amp;quot;feature&amp;quot; is the fact that it doesn&#x27;t pretend to be re-usable.
The generator is as part of this site as the articles.&lt;/p&gt;
&lt;p&gt;Thanks to Rust, the programs are built into executable binaries. On macOS, it
requires libSystem to run. On Linux, I can (and prefer) build with &lt;a href=&quot;https://www.musl-libc.org/&quot;&gt;musl&lt;/a&gt;. The
binaries for these two OSes are checked in with the content of the site. So
it requires zero installation to &amp;quot;build&amp;quot; the site. (I may need to
include a 3rd executable for the upcoming ARM-based Macs soon).&lt;/p&gt;
&lt;p&gt;The generator spits out the final content of the website. It&#x27;s deployed without
further modification.&lt;/p&gt;
&lt;p&gt;The build process is pretty fast. As of this writing, it averages around 250 ms.
I could probably make it faster by avoiding some repeated reads when it comes to
article inputs.&lt;/p&gt;
&lt;p&gt;The generator handles HTML/XML templating with a library named &lt;a href=&quot;https://github.com/djc/askama&quot;&gt;Askama&lt;/a&gt;.
Learning it had been an eye opening experience. Askama is built atop Rust&#x27;s
macro system. For each template (e.g. web page), it requires users to write
a Rust data structure that fulfills its variable requirements.  Here&#x27;s the
kicker: in this data structure, you &lt;em&gt;cannot&lt;/em&gt; miss any variable the corresponding
template requires.  When you do, the Rust project won&#x27;t compile! Rust&#x27;s tooling
is so good that these errors were surfaced in my editor as I wrote this part
in real time. This level of type-safety for template language felt like magic.&lt;/p&gt;
&lt;p&gt;Syntax highlighting is powered by &lt;a href=&quot;https://github.com/trishume/syntect&quot;&gt;syntect&lt;/a&gt;, the library behind &lt;a href=&quot;https://github.com/sharkdp/bat&quot;&gt;bat&lt;/a&gt;. But
the interesting bit here is how the syntax definitions are embedded within the
final executable. To support a particular syntax, syntect takes the syntax&#x27;s
SublimeText definition. So this is a configurable, extendible system. The
generator includes 118 syntax definitions. Uncompressed, their files take up 5MB
of disk space. As one can imagine, loading 5MB from 118 files each time the
program runs is quite slow. Turns out, Rust has a standard library macro
&lt;a href=&quot;https://doc.rust-lang.org/std/macro.include_bytes.html%60&quot;&gt;include_bytes!&lt;/a&gt; that solves this problem. &lt;a href=&quot;https://doc.rust-lang.org/std/macro.include_bytes.html%60&quot;&gt;include_bytes!&lt;/a&gt; embeds
contents of a file as literals in source code, as if it&#x27;s hand-written. syntect
takes advantage of this feature by supporting serialization of its in-memory
representation of syntaxes into bytes, and accepting in-line byte literals in
reverse in order to create these representations. This system solves two
problems for me:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I no longer need to ship the SublimeText syntax files along with the
generator.&lt;/li&gt;
&lt;li&gt;The generator doesn&#x27;t need to perform all that disk I/O, so it runs
significantly faster.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Overall, the Rust ecosystem delivered. Although a lot of library are still in
rough shape/early stage, there usually are multiple alternatives for roughly the
same purpose. Gluing a few of them together for this generator project had been
fun.&lt;/p&gt;
&lt;p&gt;Finally, let&#x27;s talk metadata, I can&#x27;t realistically manage to generate the site
without them.  Articles and static pages each define their URL by their file
locations relative to the root. For example, &lt;code&gt;/articles/2020/04/23/hello.md&lt;/code&gt;
means the URL is &lt;code&gt;/2020/04/23/hello/&lt;/code&gt;. Each article still has a front matter.
But I made the text version look as &amp;quot;natural&amp;quot; as possible. There&#x27;s no markers
for beginning and end of the metadata since I know exactly what&#x27;s needed. The
title is marked as an H1. Date is in RFC3339 format. Tags are comma-separated
values. So an example of an article&#x27;s beginning looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;# Site Improvements 2020
2020-04-22T21:58:03-07:00
tags: Rust, HTML, CSS, Ruby, Jekyll, Markdown

I took back my website...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Text supremacy! Glory!&lt;/p&gt;
&lt;h3&gt;Onward&lt;/h3&gt;
&lt;p&gt;Over the course of roughly 15 years, I&#x27;ve had blogs of quite a few variates.
I wish I&#x27;d done a better job archiving them as I moved on from one to the next.
This is not the first time I attempted to gain full control over the theming,
generating, hosting, and deployment of a site. But I&#x27;m hopeful that it&#x27;ll last
longer. You could say that&#x27;s what I optimized for. And who knew, maybe my
experience from past failures counts for something.&lt;/p&gt;
&lt;p&gt;Here&#x27;s to less stressful deploys and more writing!&lt;/p&gt;
</description>
                <pubDate>Wed, 22 Apr 2020 21:58:03 -0700</pubDate>
                <link>https://duan.ca/2020/04/22/site-improvements-2020/</link>
                <guid isPermaLink="true">https://duan.ca/2020/04/22/site-improvements-2020/</guid>
            </item>
            <item>
                <title>Git Commit Message, Vim, and Markdown</title>
                <description>&lt;p&gt;It&#x27;s been bothering me for years.&lt;/p&gt;
&lt;p&gt;That is, &lt;code&gt;#&lt;/code&gt; is both the start of a comment in a git commit message, but also
the syntax for headings in Markdown.&lt;/p&gt;
&lt;p&gt;Personally, I prefer using commit messages to populate pull request descriptions
whenever possible. On GitHub, This happens automatically when the pull request
contains a single commit. But I can&#x27;t type, say an H3 as &lt;code&gt;### Heading&lt;/code&gt; in the
commit message (in Vim, most of the time) because it gets treated as a comment!&lt;/p&gt;
&lt;p&gt;But thanks to this twitter interaction with &lt;a href=&quot;https://twitter.com/dmartincy&quot;&gt;@dmartincy&lt;/a&gt;, I finally solved
this problem:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I haven&amp;#39;t found myself in that situation, but maybe you could do &amp;#39;git config core.commentChar &amp;quot;;&amp;quot;&amp;#39; before creating the commits? That will change the default git commit marker (#) to something that won&amp;#39;t conflict with Markdown titles.&lt;/p&gt;&amp;mdash; Daniel Martín (@dmartincy) &lt;a href=&quot;https://twitter.com/dmartincy/status/1247271508420026368?ref_src=twsrc%5Etfw&quot;&gt;April 6, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;p&gt;As mentioned by Daniel, Git has introduced a setting called &lt;code&gt;core.commentChar&lt;/code&gt;,
documented &lt;a href=&quot;https://git-scm.com/docs/git-config#Documentation/git-config.txt-corecommentChar&quot;&gt;here&lt;/a&gt;, which lets us control which character
becomes the start of a comment line. Let&#x27;s say we want to replace the default
&lt;code&gt;#&lt;/code&gt; with &lt;code&gt;;&lt;/code&gt;, we can edit &lt;code&gt;~/.gitconfig&lt;/code&gt; to include this preference:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[core]
	commentChar = &amp;quot;;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… and this will affect every Git repository on this computer.&lt;/p&gt;
&lt;p&gt;For me, though, this broke git commit syntax highlighting in Vim: the comments,
beginning with &lt;code&gt;;&lt;/code&gt;, are no longer recognized as comments. To fix this, I updated
Vim&#x27;s syntax for file type &lt;code&gt;gitcommit&lt;/code&gt;. In your Vim setting directory
(&lt;code&gt;~/.config/nvim/&lt;/code&gt; for me), create a file &lt;code&gt;syntax/gitcommit.vim&lt;/code&gt; file (unless
you already have one), add the following line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;syn match gitcommitComment	&amp;quot;^;.*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note &lt;code&gt;;&lt;/code&gt; matches my preferred &lt;code&gt;core.commentChar&lt;/code&gt; for Git.&lt;/p&gt;
&lt;p&gt;Et voilà! Git commit message looks tippy-top in Vim again!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2020/04/gitcommit.png&quot; alt=&quot;editing git commit in vim, with alternative character being the beginning of a comment&quot; /&gt;&lt;/p&gt;
</description>
                <pubDate>Mon, 13 Apr 2020 13:41:02 -0700</pubDate>
                <link>https://duan.ca/2020/04/13/git-commit-comment/</link>
                <guid isPermaLink="true">https://duan.ca/2020/04/13/git-commit-comment/</guid>
            </item>
            <item>
                <title>On the Subject of Interface Hygiene</title>
                <description>&lt;p&gt;In a purly reactive world, your entire program merge into a single stream. Now,
close your eyes, and envision: your project as one, beautiful, stream.&lt;/p&gt;
&lt;p&gt;Now open your eyes. Yeah, it&#x27;s not. Your project is a Mac or iOS app. It&#x27;s full
of your memories, sweat, and blood. And you are ready to sweat and bleed some
more by putting some Combine and SwiftUI into it. You watched the WWDC19
sessions and learned that &amp;quot;Subjcets are super powerful&amp;quot;. You looked into your
code and realized you can&#x27;t really do anything with Combine without &lt;code&gt;Subject&lt;/code&gt;s
at the current state of the project.&lt;/p&gt;
&lt;p&gt;Well…&lt;/p&gt;
&lt;p&gt;Here are a few habits that help keeping your project that prevasively uses
&lt;code&gt;Combine.Subject&lt;/code&gt; &lt;em&gt;sane&lt;/em&gt;. They should seem obvious to anyone who understands
Murphy&#x27;s law and the value of minialism in interfaces. If you already are using
some reactive stream implementation, substitute the types with their
counterparts in your framework and these rules should seem down right &lt;strong&gt;basic&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Vend &lt;code&gt;Subject&lt;/code&gt;s as &lt;code&gt;Publisher&lt;/code&gt;s&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Subject&lt;/code&gt;s help bridge from the imperitive to the reactive world. Somewhat
paradoxically, sharing them is not very &amp;quot;RX-y&amp;quot;. This is akin to prefering &lt;code&gt;let&lt;/code&gt;s
over &lt;code&gt;var&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Most of the time, what you want to share is the values pumped into the stream,
not the privilage to mutate it. Because Subjects conform to &lt;code&gt;Publisher&lt;/code&gt;, it&#x27;s
easy to hide from the users the fact that your stream is backed by them.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Bad: now anyone who get a hold of it can mess with your stream!
public enum GreatInts {
    public var updates = CurrentValueSubject&amp;lt;Int, Never&amp;gt;(0)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With Combine this conversion happens via type-erasure:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Better: all your users care is the stream (publisher), so give them that!
public enum GreatInts {
    // Internally, it&#x27;s backed by a subject.
    var subject = CurrentValueSubject&amp;lt;Int, Never&amp;gt;(0)
    // Externally, it&#x27;s just a Publisher. 
    public var subject: AnyPublisher&amp;lt;Int, Never&amp;gt; {
        subject.eraseToAnyPublisher()
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;CurrentValueSubject natually caches the latest value&lt;/h2&gt;
&lt;p&gt;RX theorists will hate this: sometimes it&#x27;s just practical to expose
a synchronous interface to the latest vaule in the stream!&lt;/p&gt;
&lt;p&gt;Two things.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It might be tempting to expose the subject and let your user use its
&lt;code&gt;.value&lt;/code&gt;. Well, you shouldn&#x27;t (as explained in the previous section).
A separate interface dedicated to the latest value prevents people from
polluting your stream.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// (Still) bad
public final class GreatInts {
    public var updates = CurrentValueSubject&amp;lt;Int, Never&amp;gt;(0)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Remember &lt;code&gt;CurrentValueSubject&lt;/code&gt; has that &lt;code&gt;.value&lt;/code&gt; property! It may seem
surprising, but I&#x27;ve seen folks transitioning to RX clinging to the old ways:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;public final class GreatInts {
    // well, at least it&#x27;s not a public subject...
    var subject = CurrentValueSubject&amp;lt;Int, Never&amp;gt;(0) // &amp;lt;- initial value 0
    public var updates: AnyPublisher&amp;lt;Int, Never&amp;gt; {
        subject.eraseToAnyPublisher()
    }

    // Wait, there&#x27;s that 0 again
    public var latest: Int = 0 {
        didSet {
            subject.send(latest) // ?
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, you&#x27;ll notice that &lt;code&gt;0&lt;/code&gt;, the initial value, is duplicated as both the
subject&#x27;s initial value, as well as the value of a stored property. And these
duplicated sources of truth persist throughout the parent&#x27;s life time. Weird,
right?&lt;/p&gt;
&lt;p&gt;Here&#x27;s a slightly better version:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;public final class GreatInts {
    var subject = PassthroughSubject&amp;lt;Int, Never&amp;gt;()
    public var updates: AnyPublisher&amp;lt;Int, Never&amp;gt; {
        subject.eraseToAnyPublisher()
    }

    public var latest: Int = 0 {
        didSet {
            subject.send(latest) // ?
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now there&#x27;s no two copy of the latest value in memory anymore. But in my opinion
it does not embrace the full power of Combine. Here&#x27;s the most natual way to do
this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;public final class GreatInts {
    /// This is a CurrentValueSubject again.
    var subject = CurrentValueSubject&amp;lt;Int, Never&amp;gt;(0)
    public var updates: AnyPublisher&amp;lt;Int, Never&amp;gt; {
        subject.eraseToAnyPublisher()
    }

    public var latest: Int {
        subject.value
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Essentially, you create separate public interface, each vends a little piece of
&lt;code&gt;CurrentValueSubject&lt;/code&gt;&#x27;s power.&lt;/p&gt;
&lt;h2&gt;No really, don&#x27;t use &lt;code&gt;Subject&lt;/code&gt;s&lt;/h2&gt;
&lt;p&gt;Even a well-scoped &lt;code&gt;Subject&lt;/code&gt; (properly being private or internal, depending on
your tool of choice for access control) still has a mutable state that you
probably don&#x27;t want: its stream can go from &amp;quot;alive&amp;quot; to &amp;quot;complete&amp;quot;. And, again,
anyone with access can make this state transition happen, leaving you in the
undefensible position of … hoping everyone on your team to not misuse your
stuff?&lt;/p&gt;
&lt;p&gt;Lucky for you (and me), a &amp;quot;incompletable&amp;quot; subject is a established concept -- a
&amp;quot;Relay&amp;quot;. I&#x27;ve put together a repo for you to look and/or use:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/dduan/relay&quot;&gt;https://github.com/dduan/relay&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Yeah, ban all Subjects in your project with a linter. Seriously.&lt;/p&gt;
&lt;h2&gt;Fin&lt;/h2&gt;
&lt;p&gt;That&#x27;s all for now. I&#x27;m not an expert with RX myself. Hopefully these
perspective can help you avoid some nasties.&lt;/p&gt;
</description>
                <pubDate>Mon, 01 Jul 2019 20:22:48 -0700</pubDate>
                <link>https://duan.ca/2019/07/01/combine-hygiene/</link>
                <guid isPermaLink="true">https://duan.ca/2019/07/01/combine-hygiene/</guid>
            </item>
            <item>
                <title>TOML Decoder Playlist</title>
                <description>&lt;p&gt;I enjoyed making &lt;a href=&quot;https://github.com/dduan/TOMLDeserializer&quot;&gt;TOMLDeserializer&lt;/a&gt; and &lt;a href=&quot;https://github.com/dduan/TOMLDecoder&quot;&gt;TOMLDecoder&lt;/a&gt; recently. Let&#x27;s hope
some projects will pick them up and TOML as a configuration format will start to
spead in Swift communities.&lt;/p&gt;
&lt;p&gt;What&#x27;s outstanding about these projects is that I started working on them while
&lt;a href=&quot;https://twitch.tv/daniel_duan&quot;&gt;streaming&lt;/a&gt;. Personally, I consume a lot of content like this. So now people
can watch me writing Swift, too.&lt;/p&gt;
&lt;p&gt;I&#x27;ve been archiving recordings of these streams as much as I can. Here are the
links to these videos, each is around 1-1.5 hours long:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/XLLlCEfuFLw&quot;&gt;Turn TOML Test Fixtures Into XCTests With Vim Macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/Ztq3K3cq8f0&quot;&gt;Passing TOML Deserialization Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/GTCYSIc6n3U&quot;&gt;Finishing TOML Invalidation Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/HP2Wzh8MVvg&quot;&gt;TOML Decoder: The Beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/EZ7VpbrLkH0&quot;&gt;TOML Decoder: Filling In Missing Implementation Pieces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/bISMVVWOHKg&quot;&gt;TOML Decoder: Adding The First TOML Decoding Strategy!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/oOOS4bnhwx4&quot;&gt;TOML Decoder: Project Overview And Data Decoding Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/9yDtXsrMtbU&quot;&gt;TOML Decoder: Key Decoding Strategies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/g1V872HL4Dk&quot;&gt;TOML Decoder: Project Updates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The TOMLDecoder projects would&#x27;ve been capture on camera entirely if I weren&#x27;t
such a streaming n00b and messed up a few streams. Hilarious.&lt;/p&gt;
</description>
                <pubDate>Sun, 10 Mar 2019 20:32:37 -0700</pubDate>
                <link>https://duan.ca/2019/03/10/toml-decoder/</link>
                <guid isPermaLink="true">https://duan.ca/2019/03/10/toml-decoder/</guid>
            </item>
            <item>
                <title>Kick-ass CLI Tools In Swift</title>
                <description>&lt;p&gt;As someone who lives in a terminal simulator, I&#x27;m pleasantly surprised by the
new toys we get in recent years such as &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt;, &lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep&lt;/a&gt;, &lt;a href=&quot;https://github.com/sharkdp/fd&quot;&gt;fd&lt;/a&gt;, etc.
A great number of these are written in relatively young programming languages
such as Go and Rust. But, noticibly, none of them are written in Swift.&lt;/p&gt;
&lt;p&gt;In this post, I&#x27;ll try to explain why that is.&lt;/p&gt;
&lt;h2&gt;POSIX Ergonomics&lt;/h2&gt;
&lt;p&gt;Unix-like virtual file systems has been around for decades. API that manupulates
such systems has standardized a long time ago and exists in most computers
running Linux/BSD/macOS today (and, to a large extend, smart phones). To Swift
users, Using these APIs is straight-forward (&lt;code&gt;rmdir(&amp;quot;path/to/dir&amp;quot;)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;So Swift programmers are all happy campers (re-)inventeing all sorts of file
system utilities, right?&lt;/p&gt;
&lt;p&gt;Well, not quite.&lt;/p&gt;
&lt;p&gt;Okay, I lied about POSIX APIs being &amp;quot;straight-forward&amp;quot; in Swift. Or rather, this
is very subjective.&lt;/p&gt;
&lt;p&gt;Continuing with the &lt;code&gt;rmdir&lt;/code&gt; example, we must first import it from either &lt;code&gt;Glibc&lt;/code&gt;
or &lt;code&gt;Darwin&lt;/code&gt;, depending on your OS. To know whether the operation is successful,
we need to see whether it returned integer 0. To learn &lt;em&gt;why&lt;/em&gt; 0 was not returned,
we need to read the &amp;quot;magical&amp;quot; variable &lt;code&gt;errno&lt;/code&gt;. &lt;code&gt;errno&lt;/code&gt; could be written to by
other APIs so we&#x27;d better capture it in time…&lt;/p&gt;
&lt;p&gt;And that&#x27;s one of the simpler APIs in POSIX calls!&lt;/p&gt;
&lt;p&gt;Programmers whine about ergonomics partially because we are previlidged and
spoiled. But mostly because our attention is a limited resources. Mixing API
conventions distracts us from solving the problem at hand. Bad ergonomics,
therefore, drives away a good potion of users who cares about quality of their
tools.&lt;/p&gt;
&lt;h2&gt;Culture and History&lt;/h2&gt;
&lt;p&gt;As of this writing, the release of Swift 5 is imminent. The vast majority of
existing Swift code is written to run on iOS. The concept of a file, or the
traditional virtal file system, is hidden to iOS users, and sandboxed for
developers. I bet most Swift users rarely think about the fact that there&#x27;s
a entire set of POSIX API at their disposal.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Foundation&lt;/code&gt; alleviates the need to deal with files and directories: &lt;code&gt;Bundle&lt;/code&gt;
locates the files; &lt;code&gt;CoreData&lt;/code&gt;, &lt;code&gt;UserDefaults&lt;/code&gt; or the keychain is your primary
way to persist data; &lt;code&gt;Data&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;NSCoding&lt;/code&gt; has methods to read and
write to files.  And finally, if you really need to deal with files,
&lt;code&gt;NSFileManager&lt;/code&gt; has everything you&#x27;ll ever need.&lt;/p&gt;
&lt;p&gt;Why would a productive Swift programmer think about POSIX in this environment?
Why would a tutor teach POSIX over the useful/practical/&amp;quot;native&amp;quot; alternatives?&lt;/p&gt;
&lt;p&gt;We can trace &amp;quot;riding on the Apple platform&amp;quot; mentality back to the pre-iPhone
days, where a very small Mac developer community labors on on a niche platform
(compared to iOS today) and they &lt;em&gt;loved&lt;/em&gt; it. However, I&#x27;m sure they used more
POSIX stuff back then than the average iOS developers today.&lt;/p&gt;
&lt;p&gt;Having a great library such as Foundation on the most popular developer
platform where the language thrives means it&#x27;ll take longer for &amp;quot;subcultures&amp;quot;
to emerge, if they do at all.&lt;/p&gt;
&lt;h2&gt;The Standard Library And Its Influence on New Users&lt;/h2&gt;
&lt;p&gt;File system APIs being in &lt;code&gt;Foundation&lt;/code&gt; as opposed to the standard library is
probably a temporary condition. Nevertheless, it has at least the following
implications:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Its quality of implementation is not held on the same standard that those
APIs in the standard library. This is especially true for the separate,
open-source &lt;code&gt;Foundation&lt;/code&gt; implementation. Getting consistent and correct
behaviors across macOS and Linux is hard.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A person learning Swift won&#x27;t explore the language with a file system API.
This I suspect, is &lt;strong&gt;the most important reason many of these great CLI
utilites are written in other programming languages&lt;/strong&gt;. Programmers seek
instant gratification when they learn. And they usually stay in a limited
domain (like iOS) at first. This is where the built-in library is special: no
matter which domain is chosen, it&#x27;s always available. Languages such as Go
and Rust include things like paths and files in their built-in library.
Playing with these APIs while learning the lanugage plants a seed for future,
serious, projects. There are less users of these languages compared to Swift,
but there are more people thinking about projects that involves file systems
in thoes communities. (Note I don&#x27;t have statistics here, just a guess.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The next killer CLI tool is still more likely to be written in Go or Rust,
than in Swift. Hopefully, somewhere in these speculations is a true cause of
this phenomena. Maybe someone reading this will be inspired to accelerate change
that will eventually revert the condition. (I&#x27;m &lt;a href=&quot;https://github.com/dduan/Pathos&quot;&gt;trying&lt;/a&gt;).&lt;/p&gt;
</description>
                <pubDate>Sun, 20 Jan 2019 16:09:38 -0800</pubDate>
                <link>https://duan.ca/2019/01/20/kick-ass-cli-tools-in-swift/</link>
                <guid isPermaLink="true">https://duan.ca/2019/01/20/kick-ass-cli-tools-in-swift/</guid>
            </item>
            <item>
                <title>Magical Interactions</title>
                <description>&lt;p&gt;I want to talk about this little function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;func interact(_ process: (String) -&amp;gt; String) {
    var input = &amp;quot;&amp;quot;
    while let line = readLine() {
        input += line
    }

    print(process(input))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Brief explanation: it reads all the input from stdin as a &lt;code&gt;String&lt;/code&gt;, feeds it
into a closure &lt;code&gt;process&lt;/code&gt;, which it takes in as its only argument, and prints
&lt;code&gt;process&lt;/code&gt;&#x27;s output.&lt;/p&gt;
&lt;p&gt;Here&#x27;s how one might use it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// counts characters from stdin and prints result to stdout
interact { String($0.count) }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Got that? Well, now I&#x27;m going to rewrite it in a slightly less Swift-y way:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let count: (String) -&amp;gt; String = {
    return String($0.count)
}

interact(count)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The argument for &lt;code&gt;interact&lt;/code&gt; got defined with a name and an explicit type
signature.&lt;/p&gt;
&lt;p&gt;So, what&#x27;s so special about this &lt;code&gt;interact&lt;/code&gt; function? Two words: &lt;em&gt;side effects&lt;/em&gt;.
More precisely, it took away the concern of side-effects from the user. &lt;code&gt;count&lt;/code&gt;
belongs in the realm of &lt;em&gt;pure&lt;/em&gt; functions. It has no worries about file handles
or operating systems. It&#x27;s &lt;code&gt;(String) -&amp;gt; String&lt;/code&gt;. I wanted to emphasize this with
the rewrite. Look at that empty line. Now you see a boundary between 2 worlds.&lt;/p&gt;
&lt;p&gt;This may all seem contrived. But when I learned about &lt;a href=&quot;http://hackage.haskell.org/package/base-4.11.1.0/docs/Prelude.html#v:interact&quot;&gt;this function in
Haskell&lt;/a&gt;, I was blown away.&lt;/p&gt;
&lt;p&gt;It&#x27;s like a great magic trick: you are presented a scenario, say, writing
a little script. Maybe you need to process some CLI output and print out a CSV
or JSON string (literally 90% of the script I write).  A Haskell programmer
would jump into the bottom level of the problem and start writing these little
pure functions: one to split the string, one to convert some numbers, one to
manipulate a list, one to match some patterns...gradually the broken-down
absractions get built back up via function composition. You can see the light at
the end of the tunnel, yes, yes! If you feed this list into that function that
returns a string you&#x27;ll have the right value to print out!  Okay, now the
problem is solved in the pure functional world! The only thing left to do is...&lt;/p&gt;
&lt;p&gt;Now, the setup of the magic is complete. Now, you are onboard with the solution,
you thought the problem through with the magician...you are distracted. The
ending came so...quickly, but unexpected. What? You just feed your solution to
this &lt;code&gt;interact&lt;/code&gt; function and...that&#x27;s it? I was expecting some &lt;code&gt;readLine&lt;/code&gt;s or
&lt;code&gt;print&lt;/code&gt;s (okay, at least 1 &lt;code&gt;print&lt;/code&gt; statement)!&lt;/p&gt;
&lt;p&gt;That&#x27;s the thing: &lt;code&gt;interact&lt;/code&gt; deals with &lt;em&gt;two&lt;/em&gt; side effects, the input and the
output. But its user deals with &lt;em&gt;zero&lt;/em&gt;. It&#x27;s as if the two effects &amp;quot;cancel&amp;quot; each
other out! It&#x27;s a &lt;em&gt;neat&lt;/em&gt; trick, really. Small, low-key, easy to miss. But I&#x27;m
glad I noticed it and come to appreciate its power and simplicity.&lt;/p&gt;
</description>
                <pubDate>Sat, 01 Sep 2018 11:08:57 -0700</pubDate>
                <link>https://duan.ca/2018/09/01/magical-interaction/</link>
                <guid isPermaLink="true">https://duan.ca/2018/09/01/magical-interaction/</guid>
            </item>
            <item>
                <title>A Tale of Two Dates</title>
                <description>&lt;p&gt;Recently, I discovered a curious thing about &lt;code&gt;Date&lt;/code&gt;s in two large projects
I work on. Simply put, both projects receives, from various HTTP endpoints, the
same object component: a timestamp, and a duration. Combining these two pieces,
both projects derives two &lt;code&gt;Foundation.Date&lt;/code&gt;s to represent a time range. So far,
so good.&lt;/p&gt;
&lt;p&gt;However, project &lt;code&gt;A&lt;/code&gt; uses &lt;code&gt;Fonudation.DateInterval&lt;/code&gt; to represent this concept,
while project &lt;code&gt;B&lt;/code&gt; uses &lt;code&gt;Range&amp;lt;Date&amp;gt;&lt;/code&gt;. But why? Why represent the same component
differently? What a gigantic waste of brain power for everyone on both projects!&lt;/p&gt;
&lt;p&gt;So I set out to unify this thing. Wherever a &lt;code&gt;Range&lt;/code&gt; literal is used, I swap in
&lt;code&gt;DateInterval.init(start:end:)&lt;/code&gt;; &lt;code&gt;Range.lowerBound&lt;/code&gt; becomes
&lt;code&gt;DateInterval.start&lt;/code&gt;; &lt;code&gt;Range.upperBound&lt;/code&gt; becomes &lt;code&gt;DateInterval.end&lt;/code&gt;, etc. It
didn&#x27;t take long to complete the conversion to &lt;code&gt;DateInterval&lt;/code&gt; in project &lt;code&gt;B&lt;/code&gt;,
now it builds and runs!&lt;/p&gt;
&lt;p&gt;Oh, wait, why are some tests failing in project &lt;code&gt;B&lt;/code&gt;? Shouldn&#x27;t this just be an
mechanical change?&lt;/p&gt;
&lt;p&gt;I spent time investigating. The failing tests are for some very specific
business logic that I&#x27;m not familiar with. So things took a while to become
clear. What felt like a long time later, I realized my mistake.&lt;/p&gt;
&lt;p&gt;(I&#x27;m sorry if this has been obvious to you. You are a better Swift programmer!)&lt;/p&gt;
&lt;p&gt;Somewhere in project &lt;code&gt;B&lt;/code&gt; is the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Item {
    let range: Range&amp;lt;Date&amp;gt;
}

struct Container {
    let items: [Item]
}

func containerFactory(range: Range&amp;lt;Date&amp;gt;, items: [Item]) -&amp;gt; Container {
    /// pretend there&#x27;s more code here

    return Conatiner(items: items.filter { $0.range.contains(range.lowerBound) })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And of course, after my &amp;quot;refactor&amp;quot;, it became&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Item {
    let range: DateInterval
}

struct Container {
    let items: [Item]
}

func containerFactory(range: DateInterval, items: [Item]) -&amp;gt; Container {
    /// pretend there&#x27;s more code here

    return Conatiner(items: items.filter { $0.range.contains(range.start) })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tests for &lt;code&gt;containerFactory&lt;/code&gt; failed. And here&#x27;s why: &lt;strong&gt;&lt;code&gt;DateInterval.contains&lt;/code&gt;
is inclusive for its upper bound (&lt;code&gt;.end&lt;/code&gt;), whereas &lt;code&gt;Range.contains&lt;/code&gt; isn&#x27;t!&lt;/strong&gt; You
can see it plainly by running the following&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import Foundation

let sooner = Date(timeIntervalSince1970: 0)
let later = sooner.addingTimeInterval(1000)

DateInterval(start: sooner, end: later).contains(later) // true
(sooner..&amp;lt;later).contains(later)                        // false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So here&#x27;s what stumped me:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The 2 projects chose to interpret the same component differently, which
I didn&#x27;t not expect.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I didn&#x27;t know how &lt;code&gt;Foundation.DateInterval&lt;/code&gt; works.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Well, today I learned.&lt;/p&gt;
</description>
                <pubDate>Sat, 25 Aug 2018 17:11:43 -0700</pubDate>
                <link>https://duan.ca/2018/08/25/a-tale-of-two-dates/</link>
                <guid isPermaLink="true">https://duan.ca/2018/08/25/a-tale-of-two-dates/</guid>
            </item>
            <item>
                <title>Supporting Foundation.Data Without Depending On It</title>
                <description>&lt;p&gt;While implementing some file I/O APIs in &lt;a href=&quot;https://github.com/dduan/Pathos&quot;&gt;Pathos&lt;/a&gt;, I decided reading/writing
file content as &lt;code&gt;Foundation.Data&lt;/code&gt; is kind of important (can you blame me?). But
Pathos, by accident, does not depend on Swift &lt;code&gt;Foundation&lt;/code&gt;. Now what?&lt;/p&gt;
&lt;p&gt;After browsing the &lt;a href=&quot;https://developer.apple.com/documentation/foundation/data&quot;&gt;documentation&lt;/a&gt;, a pretty good solution emerged: &lt;code&gt;Data&lt;/code&gt; is
a sequence of bytes! Lets say we hand our users some bytes, they can easily
construct a &lt;code&gt;Data&lt;/code&gt; from it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let content: [UInt8] = try readBytes(fromPath &amp;quot;/tmp/test&amp;quot;)
Data(bytes: content)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Okay, so this built-in initializer makes &lt;code&gt;[UInt8]&lt;/code&gt; an acceptable substitute for
returning &lt;code&gt;Data&lt;/code&gt;. What can we do about about &lt;code&gt;Data&lt;/code&gt; as input? Well, turns out,
&lt;code&gt;Data&lt;/code&gt; is a &lt;code&gt;Collection&lt;/code&gt; of &lt;code&gt;UInt8&lt;/code&gt;s! So we can accept &lt;code&gt;Data&lt;/code&gt; indirectly like
so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;func write&amp;lt;Bytes&amp;gt;(_ bytes: Bytes)
    where Bytes: Collection, Bytes.Element == UInt8
{
    // blah
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;User can pass in a &lt;code&gt;Data&lt;/code&gt; as argument and it just works™.&lt;/p&gt;
&lt;p&gt;The only disadvantage of supporting &lt;code&gt;Data&lt;/code&gt; in these ways is that it requires
your user to discover it either via your excellent documentation, or through
their super good knowledge of &lt;code&gt;Foundation&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update: this could also &lt;a href=&quot;https://mastodon.social/@helge/100573358160444340&quot;&gt;be&lt;/a&gt; &lt;a href=&quot;https://twitter.com/daniel_dunbar/status/1030938273047179264&quot;&gt;slower&lt;/a&gt; than using Data directly. Luckily
I&#x27;m only doing file I/O here.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But this is pretty nice, regardless.&lt;/p&gt;
</description>
                <pubDate>Sat, 18 Aug 2018 11:00:41 -0700</pubDate>
                <link>https://duan.ca/2018/08/18/supporting-data-without-depending-on-it/</link>
                <guid isPermaLink="true">https://duan.ca/2018/08/18/supporting-data-without-depending-on-it/</guid>
            </item>
            <item>
                <title>Unix File Permissions In Swift</title>
                <description>&lt;p&gt;Wrap file permissions from &lt;code&gt;stat&lt;/code&gt; and &lt;code&gt;chmod&lt;/code&gt; in an &lt;code&gt;OptionSet&lt;/code&gt; in Swift.&lt;/p&gt;
&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/1ZrouR_F-AU&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
                <pubDate>Sun, 06 May 2018 16:43:20 -0700</pubDate>
                <link>https://duan.ca/2018/05/06/unix-file-permissions-in-swift/</link>
                <guid isPermaLink="true">https://duan.ca/2018/05/06/unix-file-permissions-in-swift/</guid>
            </item>
            <item>
                <title>An Interpreter Without A Language</title>
                <description>&lt;p&gt;From the &lt;a href=&quot;/2018/01/13/coding-without-a-language/&quot;&gt;AST&lt;/a&gt; and &lt;a href=&quot;/2018/01/20/scopes/&quot;&gt;scopes&lt;/a&gt;, come a simple interpreter. This intepreter can &amp;quot;execute&amp;quot; the fibonacci
function AST and produce a correct results.&lt;/p&gt;
&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/C16PD44qyOY&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
                <pubDate>Tue, 30 Jan 2018 12:53:38 -0800</pubDate>
                <link>https://duan.ca/2018/01/30/an-interpreter-without-a-language/</link>
                <guid isPermaLink="true">https://duan.ca/2018/01/30/an-interpreter-without-a-language/</guid>
            </item>
            <item>
                <title>Scopes Without A Language</title>
                <description>&lt;p&gt;A short video on the concept of static scope.&lt;/p&gt;
&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/o0jwyd8nUK4&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
                <pubDate>Sat, 20 Jan 2018 19:50:24 -0800</pubDate>
                <link>https://duan.ca/2018/01/20/scopes/</link>
                <guid isPermaLink="true">https://duan.ca/2018/01/20/scopes/</guid>
            </item>
            <item>
                <title>Coding Without A Language</title>
                <description>&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/OKjQtn_Gvug&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Sorry for the click-baity title. I actually really like this one.&lt;/p&gt;
</description>
                <pubDate>Sat, 13 Jan 2018 12:07:19 -0800</pubDate>
                <link>https://duan.ca/2018/01/13/coding-without-a-language/</link>
                <guid isPermaLink="true">https://duan.ca/2018/01/13/coding-without-a-language/</guid>
            </item>
            <item>
                <title>Scripting A &#x27;cat&#x27; Under 1 Minute</title>
                <description>&lt;p&gt;This video demonstrates a few things: the &lt;code&gt;readLine&lt;/code&gt; standard library function, scripting with Swift, and
pattern matching as loop conditions. Enjoy!&lt;/p&gt;
&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/8rAqzvChbak&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
                <pubDate>Sat, 06 Jan 2018 18:34:39 -0800</pubDate>
                <link>https://duan.ca/2018/01/06/cat-under-1-minute/</link>
                <guid isPermaLink="true">https://duan.ca/2018/01/06/cat-under-1-minute/</guid>
            </item>
            <item>
                <title>Hello World In WebAssembly</title>
                <description>&lt;p&gt;Every now and then, I check on the progress of Web Assembly. I did it again
around the time of this post and finally found enough tutorials, examples, and
working software to get myself started in this area. In doing so, I made a video
to demo some progress. (&lt;em&gt;this article includes all the same information and
more, so just read on if you don&#x27;t have 15 minutes for YouTube&lt;/em&gt;).&lt;/p&gt;
&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/yEYtwmI7bDg&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h2&gt;Our goal:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Use as much built-in tools on a Mac as possible. The web development
toolchain scares me.&lt;/li&gt;
&lt;li&gt;Target the browser. That&#x27;s where the value of WebAssembly is. (Node supports
it as well. BUT, WHY THO?)&lt;/li&gt;
&lt;li&gt;Build from scratch. In the video I started from &lt;code&gt;mkdir&lt;/code&gt; a folder. We should
strive to understand details on every level whenever possible. Boilerplates
and dependencies should come later.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Things you&#x27;ll need:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Safari 11+&lt;/li&gt;
&lt;li&gt;Xcode. More specifically, you should be able to run &lt;code&gt;clang&lt;/code&gt; in a shell.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;The Workflow&lt;/h2&gt;
&lt;p&gt;Having these things installed, get a copy of &lt;a href=&quot;https://github.com/WebAssembly/wabt&quot;&gt;The WebAssembly Binary
Toolkit&lt;/a&gt; (wabt). Build it. The README has detailed instructions. I just went
into the folder and ran&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;make clang-release
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will generate a bunch of binary files in &lt;code&gt;out/clang/Release&lt;/code&gt; and you need
to make sure you can run them from wherever you want to work on WebAssembly
project (so either copy them into a folder included in your &lt;code&gt;PATH&lt;/code&gt; environment
variable or add the absolute path to &lt;code&gt;out/clang/Release&lt;/code&gt; to &lt;code&gt;PATH&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Among the binaries &amp;quot;wabt&amp;quot; builds, &lt;code&gt;wat2wasm&lt;/code&gt; takes a &lt;code&gt;.wat&lt;/code&gt; file and compiles it
to a WebAssembly binary. A &lt;code&gt;.wat&lt;/code&gt; is a source file in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Understanding_the_text_format&quot;&gt;text format&lt;/a&gt; for
WebAssembly, which is in the form of S-expressions. So&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wat2wasm main.wat -o main.wasm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…will compile your WebAssembly module in &lt;code&gt;main.wat&lt;/code&gt; to generate &lt;code&gt;main.wasm&lt;/code&gt;, the
binary file. For now, &lt;code&gt;main.wat&lt;/code&gt; can be the simplest WebAssembly program:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;(module)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running the binary in a browser demands the bulk of the work. First, we&#x27;ll need
a web page. It doesn&#x27;t need any content other than invoking some JavaScript
code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;!-- The only thing that matters is the following line,
    although having a valid HTML5 page is nice. --&amp;gt;
    &amp;lt;script src=&amp;quot;play.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, the Javascript logic needs to &lt;em&gt;fetch and instantiate the compiled
WebAssembly module&lt;/em&gt;. Since this is not a JS or WebAssembly tutorial, I&#x27;ll point
you to the docmuntation for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot;&gt;Fetch API&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promises&lt;/a&gt;, and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly&quot;&gt;the WebAssembly
object&lt;/a&gt; for details:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;fetch(&amp;quot;main.wasm&amp;quot;).then(reponse =&amp;gt;
    reponse.arrayBuffer()
).then(bytes =&amp;gt;
    WebAssembly.instantiate(bytes, {})
).then(result =&amp;gt;
    result.instance
).then(main);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This snippet fetches &lt;code&gt;main.wasm&lt;/code&gt; (adjust this URL according to your choosing),
instantiate it, then pass it into a function named &lt;code&gt;main&lt;/code&gt;, we can put
a placeholder logic for it for now:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function main(wasm) {
    console.log(wasm);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Before we move on, you&#x27;ll find that simply opending your HTML file in browser
and looking at developer console won&#x27;t work. Safari would complain about
cross-domain request error for &lt;code&gt;fetch&lt;/code&gt;. So we need to serve these resources
locally. I usually use the built in server module from Python standard library
for this kind of things:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# In your source folder, run
python -m SimpleHTTPServer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now go to &lt;a href=&quot;http://localhost:8000&quot;&gt;http://localhost:8000&lt;/a&gt; and click on your HTML file. If everything
went well, you should see a WebAssembly instance logged in the developer
console.&lt;/p&gt;
&lt;p&gt;Congratulations! You can start writing WebAssembly locally. Just remember to
re-compile &lt;code&gt;main.wat&lt;/code&gt; with &lt;code&gt;wat2wasm&lt;/code&gt; whenever you want to test things out in
browser.&lt;/p&gt;
&lt;h2&gt;An Actual &amp;quot;Hello, World!&amp;quot; Implementation&lt;/h2&gt;
&lt;p&gt;This is my implementation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;(module
  ;; Allocate a page of linear memory (64kb). Export it as &amp;quot;memory&amp;quot;
  (memory (export &amp;quot;memory&amp;quot;) 1)

  ;; Write the string at the start of the linear memory.
  (data (i32.const 0) &amp;quot;Hello, world!&amp;quot;) ;; write string at location 0

  ;; Export the position and length of the string.
  (global (export &amp;quot;length&amp;quot;) i32 (i32.const 12))
  (global (export &amp;quot;position&amp;quot;) i32 (i32.const 0)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In other words, we expose information of the linear memory we manipulated to the
JavaScript environment. Things that has been &lt;code&gt;export&lt;/code&gt;ed will show up as
properties of &lt;code&gt;exports&lt;/code&gt; of the &lt;code&gt;WebAssembly&lt;/code&gt; instance. We can access them in the
&lt;code&gt;main&lt;/code&gt; JavaScript functions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function main(wasm) {
    const memory   = wasm.exports.memory;
    const length   = wasm.exports.length;
    const position = wasm.exports.position;
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then it&#x27;s just plain-old Javascript (tho I had to steal it from tutorials).
&lt;code&gt;memory.buffer&lt;/code&gt; is of type &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;ArrayBuffer&lt;/a&gt;. We need to convert it into a string
and log it to the console:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function main(wasm) {
    const memory   = wasm.exports.memory;
    const length   = wasm.exports.length;
    const position = wasm.exports.position;

    const bytes = new Uint8Array(memory.buffer, position, length);
    const s = new TextDecoder(&#x27;utf8&#x27;).decode(bytes);

    console.log(s);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et, voilà! &lt;code&gt;Hello, World!&lt;/code&gt; hot off a Web Assembly module in your developer
console. To conclude, I personally like to use a &lt;code&gt;Makefile&lt;/code&gt; to streamline some
of the typing. Here&#x27;s what I used for this demo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-makefile&quot;&gt;compile:
	wat2wasm main.wat -o main.wasm

serve:
	python -m SimpleHTTPServer
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;No fancy schmancy Javascript build stack, no 3rd-party code dependency. Write
code, compile, run on your (virtual, in browser) machine, repeat. That sounds like
&amp;quot;assembly&amp;quot; to me!&lt;/p&gt;
</description>
                <pubDate>Sat, 30 Dec 2017 18:43:49 -0800</pubDate>
                <link>https://duan.ca/2017/12/30/hello-world-in-webassembly/</link>
                <guid isPermaLink="true">https://duan.ca/2017/12/30/hello-world-in-webassembly/</guid>
            </item>
            <item>
                <title>Building &#x27;pwd&#x27; Under 1 Minute In Swift</title>
                <description>&lt;p&gt;I guess I&#x27;m starting a series of minute-long videos. In this first video, I built &lt;code&gt;pwd&lt;/code&gt; out of &lt;code&gt;getcwd&lt;/code&gt;. The
code turned out shorter than I imagined (1 line). Which is a good demonstration of Swift&#x27;s great C-interop
capability.&lt;/p&gt;
&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/YR4MCcMnHrI&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Some details are lost in this video, however. For example, the POSIX standard actually says &lt;code&gt;getcwd&lt;/code&gt;&#x27;s 2nd
argument being &lt;code&gt;0&lt;/code&gt; is undefined. Luckily, both macOS and Linux define it the way we want (allocate as much
memory as needed). Swift&#x27;s handling of &lt;code&gt;char *&lt;/code&gt; aka &lt;code&gt;UnsafeMutablePointer&amp;lt;CChar&amp;gt;&lt;/code&gt; in context of a &lt;code&gt;var&lt;/code&gt; array
is also very cool.&lt;/p&gt;
</description>
                <pubDate>Wed, 27 Dec 2017 01:13:07 -0800</pubDate>
                <link>https://duan.ca/2017/12/27/building-pwd-under-1-minute-in-swift/</link>
                <guid isPermaLink="true">https://duan.ca/2017/12/27/building-pwd-under-1-minute-in-swift/</guid>
            </item>
            <item>
                <title>Contributing To Open-Source Swift</title>
                <description>&lt;p&gt;I discover, report, fix and merge a bug in the open-source Foundation project. And why, yes, on YouTube.&lt;/p&gt;
&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/rwuj80W8TtI&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Pull request: &lt;a href=&quot;https://github.com/apple/swift-corelibs-foundation/pull/1376&quot;&gt;https://github.com/apple/swift-corelibs-foundation/pull/1376&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SR-6647: &lt;a href=&quot;https://bugs.swift.org/browse/SR-6647&quot;&gt;https://bugs.swift.org/browse/SR-6647&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Sat, 23 Dec 2017 13:21:10 -0800</pubDate>
                <link>https://duan.ca/2017/12/23/contributing-to-open-source-foundation/</link>
                <guid isPermaLink="true">https://duan.ca/2017/12/23/contributing-to-open-source-foundation/</guid>
            </item>
            <item>
                <title>Smart Color Invert And Your iOS Apps</title>
                <description>&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-basics&quot;&gt;The Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#compatibility-with-older-ios-versions&quot;&gt;Compatibility with older iOS versions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#how-to-screenshot-with-inverted-color-settings&quot;&gt;How to screenshot with inverted color settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Apple sneakily shipped a &amp;quot;dark mode&amp;quot; in iOS 11, native apps looks &lt;em&gt;gorgeous&lt;/em&gt; in this mode (especially on
iPhone X with it&#x27;s OLED display):&lt;/p&gt;
&lt;img src=&quot;/assets/2017/12/native-ios-apps-with-smart-invert.png&quot; srcset=&quot;/assets/2017/12/native-ios-apps-with-smart-invert.png 2x&quot; alt=&quot;iOS 11 apps in smart invert mode&quot;/&gt;
&lt;p&gt;To see it for yourself, go to &lt;em&gt;Settings -&amp;gt; General -&amp;gt; Accessibility Display Accommodations -&amp;gt; Invert Colors&lt;/em&gt;
and toggle the switch to on (I personally set triple tap of the power buttton to toggle this on/off):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2017/12/invert-color-settings.png&quot; alt=&quot;turn on smart invert mode in Settings&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Note that in Apple&#x27;s first-party apps, not every view&#x27;s color is inverted (hence, &amp;quot;smart&amp;quot;). For apps that we
built, that would not be the case automatically. Instead, we get the full color inversion under this setting:&lt;/p&gt;
&lt;img src=&quot;/assets/2017/12/third-party-app-no-change.png&quot; srcset=&quot;/assets/2017/12/third-party-app-no-change.png 2x&quot; alt=&quot;default third party app before and after smart color&quot;/&gt;
&lt;p&gt;In this article, we&#x27;ll see how to best adapt our apps so they look just as good as first-party iOS apps under
the smart invert setting.&lt;/p&gt;
&lt;h2&gt;The Basics&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;TL;DR: use &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiview/2865843-accessibilityignoresinvertcolors&quot;&gt;accessibilityIgnoresInvertColors&lt;/a&gt; on your &lt;code&gt;UIView&lt;/code&gt;s to prevent their color to be
inverted.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;iOS 11 introduced &lt;code&gt;accessibilityIgnoresInvertColors&lt;/code&gt;, a property on &lt;code&gt;UIView&lt;/code&gt;. From the &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiview/2865843-accessibilityignoresinvertcolors&quot;&gt;offical
documentation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If inverting the colors would have a negative impact on your view&#x27;s content, set this property to true to
prevent it from inverting its colors. Setting the property to true prevents the system from inverting the
colors of the view and all of its subviews.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, for views containing photos or videos with real-world content, we probably want to set it to &lt;code&gt;true&lt;/code&gt;. In
our sample app&#x27;s source code:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2017/12/setting-accessibilityIgnoresInvertColors-to-true-in-code.png&quot; alt=&quot;setting accessibilityIgnoresInvertColors to true in code&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This gives us the desired effect for that view 🎉:&lt;/p&gt;
&lt;img src=&quot;/assets/2017/12/smart-invert-in-code-result.png&quot; srcset=&quot;/assets/2017/12/smart-invert-in-code-result.png 2x&quot; alt=&quot;result of supporting invert color in code&quot;/&gt;
&lt;p&gt;The same can be done in Interface Builder. Let&#x27;s fix the other view by setting a runtime attribute:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2017/12/setting-accessibilityIgnoresInvertColors-to-true-in-interface-builder.png&quot; alt=&quot;setting accessibilityIgnoresInvertColors to true in Interface Builder&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Result:&lt;/p&gt;
&lt;img src=&quot;/assets/2017/12/smart-invert-in-interface-builder-result.png&quot; srcset=&quot;/assets/2017/12/smart-invert-in-interface-builder-result.png 2x&quot; alt=&quot;result of supporting invert color in interface builder&quot;/&gt;
&lt;p&gt;Tada!&lt;/p&gt;
&lt;h2&gt;Compatibility with older iOS versions&lt;/h2&gt;
&lt;p&gt;The story gets slightly complicated when your app need to run on older iOS versions. For one, our code won&#x27;t
compile:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2017/12/compile-error-on-older-oses.png&quot; alt=&quot;compile error on older iOS versions&quot; /&gt;&lt;/p&gt;
&lt;p&gt;But that&#x27;s nothing new to iOS developers, really. We can fix that with a &lt;code&gt;#available&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2017/12/fix-compile-error.png&quot; alt=&quot;fix compile error on older iOS versions&quot; /&gt;&lt;/p&gt;
&lt;p&gt;When you run the app in older iOS devices or simulators, Xcode will complain about our runtime attribute as
well:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2017/12/xcode-complain-about-runtime-attirbute.png&quot; alt=&quot;Xcode complains about runtime attribute on older iOS&quot; /&gt;&lt;/p&gt;
&lt;p&gt;If that bothers you, I recommend writing your own wrapper for this property as an extension to &lt;code&gt;UIView&lt;/code&gt;. To
put a cherry on top, make it &lt;code&gt;@IBInspectable&lt;/code&gt;!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;extension UIView {
    /// Whether or not to set accessibilityIgnoresInvertColors to true for iOS 11.
    /// For older OS, this value is false and setting it has no effect.
    @IBInspectable
    public var ignoreColorInversion: Bool {
        get {
            if #available(iOS 11, *) {
                return self.accessibilityIgnoresInvertColors
            }

            return false
        }

        set {
            if #available(iOS 11, *) {
                self.accessibilityIgnoresInvertColors = newValue
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Having this snippet in the project, we set it in interface builder to any view with a couple of clicks:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2017/12/set-custom-invert-property-in-interface-builder.png&quot; alt=&quot;set custom invert color properties in Interface Builder&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;How to screenshot with inverted color settings&lt;/h2&gt;
&lt;p&gt;Here&#x27;s a bonus hint: screenshots taken on device won&#x27;t have their color inverted even if you have the setting
set to &amp;quot;on&amp;quot;! Go ahead, try it :).&lt;/p&gt;
&lt;p&gt;To show off our handy work for supporting smart invert color, we&#x27;ll need
some other means to take screenshots. All screenshots in this article is taken using QuickTime on a Mac. So
plug in your iOS device, open QuickTime Player, in menu select &lt;em&gt;File -&amp;gt; New Movie Recording&lt;/em&gt; and select your
device from the drop-down menu by clicking the arrow next to the record button:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2017/12/select-ios-device-in-quicktime-player.png&quot; alt=&quot;Select iOS device for screenshots in QuickTime Player&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Now you can screen shot the QuickTime Player window the normal way.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;You can &lt;a href=&quot;/assets/2017/12/SmartInvert.zip&quot;&gt;download the sample project&lt;/a&gt; and play with it.&lt;/p&gt;
&lt;p&gt;Smart invert is awesome and I personally wish all 3rd-party apps will update their apps for it as time goes
on. If your favorite app (including your own!) doesn&#x27;t support it properly, please consider informing the
developer about &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiview/2865843-accessibilityignoresinvertcolors&quot;&gt;accessibilityIgnoresInvertColors&lt;/a&gt;, or just send this article their way!&lt;/p&gt;
</description>
                <pubDate>Wed, 20 Dec 2017 13:17:44 -0800</pubDate>
                <link>https://duan.ca/2017/12/20/smart-invert-support-for-you-app/</link>
                <guid isPermaLink="true">https://duan.ca/2017/12/20/smart-invert-support-for-you-app/</guid>
            </item>
            <item>
                <title>BitArray The Final Act</title>
                <description>&lt;p&gt;Alas, there&#x27;s the 3rd and last video about &lt;code&gt;BitArray&lt;/code&gt;, originated on my spark of inspiration on a Caltrain
ride home. This makes my first YouTube playlist as well, even tho the first 2 videos were planned to be
completely separate.&lt;/p&gt;
&lt;p&gt;We added more standard library functionalities to BitArray (ExpressibleByArrayLiteral,
CustomStringConvertible, Equatable, etc). Then, we added documentation and other open-source things left
undone from &amp;quot;episode 2&amp;quot;.&lt;/p&gt;
&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/ckrd_FoFMl0&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
                <pubDate>Tue, 19 Dec 2017 12:17:49 -0800</pubDate>
                <link>https://duan.ca/2017/12/19/bitarray-final-act/</link>
                <guid isPermaLink="true">https://duan.ca/2017/12/19/bitarray-final-act/</guid>
            </item>
            <item>
                <title>Making An Open-Source Swift Project</title>
                <description>&lt;p&gt;This video shows what it takes to open source a Swift project. Starting from some code in a playground,
I created a framework that supports distribution via Swift Package Manager, CocoaPods, Xcode project and
Carthage. The framework can be used across iOS, macOS, watchOS, tvOS and Linux. In addition, we also added
SwiftLint to the project, added a Makefile, put everything on GitHub and set up continuous integration via
Travis. README, COC, LICENSE and CHANGELOG are stubbed in as well.&lt;/p&gt;
&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/pA0T1CdqMt8&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;This is not at all a comprehensive list of things a good Open Source project should have. We are still missing
the version tag, documentation generation, automatic Carthage binary generation, test coverage...&lt;/p&gt;
&lt;p&gt;Anyways, here&#x27;s some stuff mentioned in the video:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sample project from the video: &lt;a href=&quot;https://github.com/dduan/BitArray&quot;&gt;https://github.com/dduan/BitArray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Video of me writing the code in this project: &lt;a href=&quot;https://www.youtube.com/watch?v=-k_jrIoD56k&quot;&gt;https://www.youtube.com/watch?v=-k_jrIoD56k&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Swift Package Manager: &lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;https://swift.org/package-manager/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CocoaPods: &lt;a href=&quot;https://cocoapods.org&quot;&gt;https://cocoapods.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Carthage: &lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;https://github.com/Carthage/Carthage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Xcconfigs for universal framework: &lt;a href=&quot;https://github.com/mrackwitz/xcconfigs&quot;&gt;https://github.com/mrackwitz/xcconfigs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SwiftLint: &lt;a href=&quot;https://github.com/realm/SwiftLint&quot;&gt;https://github.com/realm/SwiftLint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Travis CI: &lt;a href=&quot;https://travis-ci.org&quot;&gt;https://travis-ci.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Sun, 17 Dec 2017 21:24:43 -0800</pubDate>
                <link>https://duan.ca/2017/12/17/making-an-open-source-swift-project/</link>
                <guid isPermaLink="true">https://duan.ca/2017/12/17/making-an-open-source-swift-project/</guid>
            </item>
            <item>
                <title>Let&#x27;s Build A BitArray In Swift</title>
                <description>&lt;p&gt;In this video, I build a space-efficient BitArray that confirms to &lt;code&gt;RandomAccessCollection&lt;/code&gt; in Swift in
a playground. It involves some basic (but neat!) bitwise manipulation tricks.&lt;/p&gt;
&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/-k_jrIoD56k&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;I guess I&#x27;m a YouTuber now. You can subscribe to my &lt;a href=&quot;https://www.youtube.com/channel/UCkBVC0dMgyUnxzettP7qE-A&quot;&gt;channel&lt;/a&gt; 😛.&lt;/p&gt;
</description>
                <pubDate>Tue, 12 Dec 2017 22:51:04 -0800</pubDate>
                <link>https://duan.ca/2017/12/12/lets-build-a-bitarray-in-swift/</link>
                <guid isPermaLink="true">https://duan.ca/2017/12/12/lets-build-a-bitarray-in-swift/</guid>
            </item>
            <item>
                <title>List Comprehension In Swift</title>
                <description>&lt;p&gt;Let&#x27;s explore ways to add list comprehension to Swift.&lt;/p&gt;
&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/List_comprehension&quot;&gt;List comprehension&lt;/a&gt; should be no stranger to a Python or (and?) Haskell user. It&#x27;s a really compact syntax
that deals with &lt;a href=&quot;https://en.wikipedia.org/wiki/Cartesian_product&quot;&gt;Cartesian product&lt;/a&gt; of lists. In the case of Python, it&#x27;s probably responsible for the lack
of evolution of lambda expressions, since it&#x27;s much nicer to write one-liners with it in place of &lt;code&gt;map&lt;/code&gt;s and
&lt;code&gt;filter&lt;/code&gt;s.&lt;/p&gt;
&lt;p&gt;Here&#x27;s an example of an list comprehension in Haskell from Wikipedia:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;a = [(x,y) | x &amp;lt;- [1..5], y &amp;lt;- [3..5]]
-- [(1,3),(1,4),(1,5),(2,3),(2,4) ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, a list of pair of integers is constructed from 2 lists of integers.&lt;/p&gt;
&lt;p&gt;Here is what that example would be in Python:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = [(x, y) for x in range(1,6) for y in range(3, 6)]
# [(1, 3), (1, 4), (1, 5), (2, 3), (2, 4) ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&#x27;s what it would be in mathematics (except we are dealing with sets, not lists, but I&#x27;ll only refer to
lists from here on.):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Let (a, b) be an ordered list of elements

{(x, y)|x ∈ {1,2,3,4,5}, y ∈ {3,4,5}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One can filter out unwanted elements with predicates, and apply arbitrary functions to elements of the
result. Let&#x27;s say we only want even numbers from the first list, and we want the sum of x and y, continuing on
our examples:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;a = [x+y | x &amp;lt;- [1..5], y &amp;lt;- [3..5], x `mod` 2 == 0]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = [x + y for x in range(1,6) for y in range(3, 6) if x % 2 == 0]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{x+y|x ∈ {1,2,3,4,5}, y ∈ {3,4,5}, x is even}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In theory, this syntax can be applied to an arbitrary number of lists. Putting aside how often this need comes
up in day-to-day programming in your domain, it should be obvious that it&#x27;s alternative, be it nested loops or
&lt;code&gt;map&lt;/code&gt;s and &lt;code&gt;filter&lt;/code&gt;s, is pretty clumsy in comparison.&lt;/p&gt;
&lt;h2&gt;Adding List Comprehension in Swift&lt;/h2&gt;
&lt;p&gt;A comprehension can be considered in 3 parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;some lists, each may contain a different type of elements.&lt;/li&gt;
&lt;li&gt;a predicate (or a series of them joined logically) to filter out elements.&lt;/li&gt;
&lt;li&gt;a function to process the combination of elements into results.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In Swift, if our input is only one list, there&#x27;s a pretty sweet way to achieve that:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;list.filter(predicate).map(processor)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make comprehension work with more lists, we have some syntax options.&lt;/p&gt;
&lt;h3&gt;Option One&lt;/h3&gt;
&lt;p&gt;The &amp;quot;brute force&amp;quot; option would be a function that parameterize all 3 parts of the comprehension. Such as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// going with order of appearance in Python/Haskell syntax
func comprehension&amp;lt;Element, List, Result&amp;gt;(
    predicate: (Element) -&amp;gt; Bool,
    list: List,
    processor: (Element) -&amp;gt; Result
) where
    List: Sequence, List.Element == Element

{
    // implementation
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To supporting more than one list, just add more parameters to both types and the function itself.&lt;/p&gt;
&lt;p&gt;(Can&#x27;t wait until we can have &lt;a href=&quot;https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md#variadic-generics&quot;&gt;variadic generic parameters&lt;/a&gt;!)&lt;/p&gt;
&lt;h3&gt;Option Two&lt;/h3&gt;
&lt;p&gt;Deploy more syntax tricks. Somehow make it visually similar to the math/Haskell/Python notation. If we can
accept some temporary data structure and introduce/implement some operators, there&#x27;d be many possibilities.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;/// Just an example of the infinite possibilities.
processor | list0 &amp;amp;&amp;amp;&amp;amp; list1 | predicate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&#x27;ll leave the implementation of this example as an exercise to the reader.&lt;/p&gt;
&lt;h3&gt;Option That I Like&lt;/h3&gt;
&lt;p&gt;I spent quite some time exploring the realm of possibilities in &amp;quot;option two&amp;quot;. However, introducing data
structures and custom operators just to do what &amp;quot;option one&amp;quot; offers seems really unappealing. It&#x27;s not
entirely clear that doing so would be &amp;quot;Swift-y&amp;quot; anyways! Eventually, I did find an arrangement that fits in
Swift, and requires no fancy syntax trickery.&lt;/p&gt;
&lt;p&gt;The result of list comprehension is a list. The goal of this operation is to &lt;em&gt;construct&lt;/em&gt; a list. Yep, thinking
along this line, it became obvious that using a &amp;quot;list&amp;quot;&#x27;s initializer is just natural:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let a = Array(1..&amp;lt;5, 3..&amp;lt;5, where: { n, _ in n % 2 == 0 }) { ($0, $1) }
// [(2,3),(2,4),(2,5) ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The processing function is at the end to take advantage of the trailing closure syntax. It&#x27;s nicer when
there&#x27;s not predicate:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let a = Array(1..&amp;lt;5, 3..&amp;lt;5) { ($0, $1) }
// [(1,3),(1,4),(1,5),(2,3),(2,4) ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This syntax seems both succinct and Swift-y.&lt;/p&gt;
&lt;p&gt;I put an implementation on &lt;a href=&quot;https://github.com/dduan/Comprehension&quot;&gt;github&lt;/a&gt;, in case you find it useful.&lt;/p&gt;
&lt;h2&gt;Parting Thoughts&lt;/h2&gt;
&lt;p&gt;There&#x27;s no doubt that the conclusion in this post is imperfect. Though it feels more Swift-y, it deviates from
the mathematical syntax by a lot. We can only implement it for finite number of lists. When many lists are
involved, using a embedded closure as the predicate would make the compiler complain that the expression is
too complex. We suffer from the normal woes with Swift closures where anonymous arguments (&lt;code&gt;$0&lt;/code&gt;, &lt;code&gt;$1&lt;/code&gt;, etc)
won&#x27;t work unless the last one is mentioned in the closure&#x27;s body. Overloading &lt;code&gt;Array&lt;/code&gt; initializer may
negatively affect compilation speed in large projects.&lt;/p&gt;
&lt;p&gt;Not all of these issues are temporary.&lt;/p&gt;
&lt;p&gt;Does list comprehension warrant a language change in Swift? Can you think of better ways to implement it
with the current compiler?&lt;/p&gt;
</description>
                <pubDate>Sat, 09 Dec 2017 12:26:30 -0800</pubDate>
                <link>https://duan.ca/2017/12/09/list-comprehension-in-swift/</link>
                <guid isPermaLink="true">https://duan.ca/2017/12/09/list-comprehension-in-swift/</guid>
            </item>
            <item>
                <title>Building Swift Projects In Source Compatibility Mode</title>
                <description>&lt;p&gt;It&#x27;s a few weeks before WWDC, so naturally¹ it&#x27;s time to try build your Swift
projects in the compiler&#x27;s compatibility mode!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Download and install a snapshot for the next major version &lt;a href=&quot;https://swift.org/download/&quot;&gt;on
Swift.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2017/05/download-swift-snapshot.png&quot; alt=&quot;download swift toolchain&quot; /&gt;
&lt;img src=&quot;/assets/2017/05/install-swift-snapshot.png&quot; alt=&quot;install swift toolchain&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Choose the newly installed toolchain in Xcode.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2017/05/choose-toolchain.png&quot; alt=&quot;choose swift toolchain in Xcode&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ask the compiler to use compatibility mode. This means using the complier
flag &lt;code&gt;-swift-version X&lt;/code&gt;, where &amp;quot;X&amp;quot; is the &lt;em&gt;current&lt;/em&gt; major Swift version.&lt;/p&gt;
&lt;p&gt;In project&#x27;s &amp;quot;Build Settings&amp;quot;, value for &amp;quot;Other Swift Flags&amp;quot; should
contain &lt;code&gt;-swift-version X&lt;/code&gt;. This could mean setting it in Xcode, in
&lt;code&gt;.xcconfig&lt;/code&gt; files you are using and/or in your dependency managers such
as Cocoapods.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2017/05/compat-mode-flag.png&quot; alt=&quot;compatibility flag in xcode&quot; /&gt;&lt;/p&gt;
&lt;p&gt;For example, with Cocoapods, you&#x27;ll need to add the following in your
&lt;code&gt;Podfile&lt;/code&gt; to compile 3rd party libraries in compatibility mode:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; post_install do |installer|
     installer.pods_projects.targets.each do |target|
         target.build_configurations.each do |config|
             config.build_settings[&amp;quot;OTHER_SWIFT_FLAGS&amp;quot;] = &amp;quot;$(inherited) -swift-version 3&amp;quot;
         end
     end
 end
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build your project! This is where things start to get exciting.&lt;/p&gt;
&lt;p&gt;You should expect some warnings. Hopefully they are self-explanatory
enough. Most of them should correspond to &lt;a href=&quot;https://apple.github.io/swift-evolution/&quot;&gt;a swift-evolution
proposal&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Improvement to the language or compiler usually means some of these
warnings tell you problems in your code that has been ignored by the
compiler previously. Fix them today!&lt;/p&gt;
&lt;p&gt;The project should compile successfully in compatibility mode (despite
warnings). This where you can stop reading. Go celebrate with your
coworkers, friends, and family!&lt;/p&gt;
&lt;p&gt;Things could go wrong for compiler snapshots, of course. Read on if see
errors or crashes (whaaaaat 😸).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&#x27;s time to tell the compiler team about the error or crash you encountered.&lt;/p&gt;
&lt;p&gt;Reduce the error or crash to a state that your are comfortable reporting in
public. Then go to &lt;a href=&quot;https://bugs.swift.org&quot;&gt;bugs.swift.org&lt;/a&gt; and file a JIRA
ticket describing the error or compiler crash.&lt;/p&gt;
&lt;p&gt;During the process of code reduction you may find ways to work around the
compile error or crash. Make the changes for the workaround and repeat
steps 4-5. Maybe your project will compile this time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The issue you discovered will be fixed in the official Swift release come
fall. You&#x27;ve ensured a smooth Swift upgrade for your project and contributed
to the Swift community 🎉!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;¹ source compatibility mode is a thing starting with Swift 4. As new
major version of Swift is released, code written in the previous version should
compile without change in compatibility mode.&lt;/p&gt;
</description>
                <pubDate>Mon, 22 May 2017 09:04:01 -0700</pubDate>
                <link>https://duan.ca/2017/05/22/build-in-swift-compatibility-mode/</link>
                <guid isPermaLink="true">https://duan.ca/2017/05/22/build-in-swift-compatibility-mode/</guid>
            </item>
            <item>
                <title>Replying To Old Mailing List Threads</title>
                <description>&lt;p&gt;&lt;em&gt;One common complains on the Swift Evolution mailing list is about its
inscrutable interface. If you see an inactive thread on the web archive but
haven&#x27;t subscribed, there seems to be no way to participate or &amp;quot;revive&amp;quot; it
since you never received any of its emails.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;With a &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20170206/031537.html&quot;&gt;hint&lt;/a&gt; and some experiments, I&#x27;ve discovered that there is
a way. This post reveals the magic step by step (without commenting on the
merits of email or this solution).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Like HTTP, Email is a text-based &lt;a href=&quot;https://tools.ietf.org/html/rfc2822&quot;&gt;protocol&lt;/a&gt;. Unlike HTTP, we directly
consume payloads of this protocol and, as a consequence, don&#x27;t think much about
that very fact.&lt;/p&gt;
&lt;p&gt;Like HTTP, each email includes headers hidden by normal email clients. Each
header is essentially two strings, a key and a value, separated by a colon.
Among these headers are &lt;code&gt;Message-Id&lt;/code&gt; and &lt;code&gt;In-Reply-To&lt;/code&gt;. When we tell our email
client applications to start a reply, they take the value from &lt;code&gt;Message-Id&lt;/code&gt;
and use it as value for &lt;code&gt;In-Reply-To&lt;/code&gt; automatically.&lt;/p&gt;
&lt;p&gt;To observe all this in action, we can open some emails with our favorite text
editors and look for these headers. Of course, this require us to know where the
emails exist as files. On macOS, an easy thing to do is to drag from Mail.app to
Finder/Desktop and open the resulting .eml file:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2017/02/open-email.gif&quot; alt=&quot;Open an email in text editors&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Among the (perhaps overwhelming amount of) headers, we&#x27;ll find the two fields we
are looking for:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2017/02/email-headers.png&quot; alt=&quot;Email Headers Message-Id and In-Reply-To&quot; /&gt;&lt;/p&gt;
&lt;p&gt;… I&#x27;ll leave the clients&#x27; reply behavior regarding these fields for the reader
to verify.&lt;/p&gt;
&lt;p&gt;Mailing list software such as GNU Mailman, which &lt;a href=&quot;https://swift.org&quot;&gt;swift.org&lt;/a&gt; and &lt;a href=&quot;http://llvm.org&quot;&gt;llvm.org&lt;/a&gt;
use to host various mailing lists, associate emails in threads by chaining them
with the headers explained above, among other things. As long as we have
a message&#x27;s &lt;code&gt;Message-Id&lt;/code&gt;, we can reply to it &amp;quot;officially&amp;quot; by adding its value to
the &lt;code&gt;In-Reply-To&lt;/code&gt; header in our email, regardless of whether we have received
that email ourselves previously.&lt;/p&gt;
&lt;p&gt;So here are the steps to reply retroactively to a mailing list thread.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;find &lt;code&gt;Message-Id&lt;/code&gt; of the mailing list message we want to reply to.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This value is contained in the mailing list web archive&#x27;s &lt;code&gt;mailto&lt;/code&gt; link.
Unfortunately Mail.app doesn&#x27;t recognize it. It&#x27;s easy enough to find it
ourselves though:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2017/02/find-message-id.gif&quot; alt=&quot;Finding Message-Id on mailman archive&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Note the &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;@&lt;/code&gt; characters are percent-quoted. We have to recover the
id values to the format
&lt;code&gt;&amp;lt;alphanumerics-potentially-separated-by-dash@address.com&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Another way to acquire this value is from the gzip&#x27;d archive. There they
just exist as plain text. The downside is you have to dig out the message
itself first.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Add &lt;code&gt;In-Reply-To&lt;/code&gt; header to our email.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Draft a new email, make its title the same as our email chain&#x27;s title (this
is a good idea because lots of email &lt;em&gt;clients&lt;/em&gt; do use the title to thread
messages). Set the appropriate recipients, and CCs, including the mailing
list&#x27;s address. Now save this email as draft and open it in a text editor as
we did in our investigations.  Add in the line
&lt;code&gt;In-Reply-To: &amp;lt;id-we-found-in-step-one.address.com&amp;gt;&lt;/code&gt;, save it. Then send this
email (for example, open it with Mail.app and use Message-&amp;gt;Send Again in the
menu).&lt;/p&gt;
&lt;p&gt;Of course, some email client &lt;a href=&quot;http://www.pixelbeat.org/docs/thunderbird-threading.html&quot;&gt;supports&lt;/a&gt; adding it
from their GUI.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You&#x27;ll find the in addition to functioning as an normal message to the
recipients, the mailing list will properly put your message to the original
thread (in the case of swift-evolution, only if your reply is within the same
week).&lt;/p&gt;
</description>
                <pubDate>Tue, 07 Feb 2017 10:21:19 -0800</pubDate>
                <link>https://duan.ca/2017/02/07/replying-to-old-mailing-list-threads/</link>
                <guid isPermaLink="true">https://duan.ca/2017/02/07/replying-to-old-mailing-list-threads/</guid>
            </item>
            <item>
                <title>Site Improvements</title>
                <description>&lt;p&gt;I spent a whole day making changes to this site.&lt;/p&gt;
&lt;p&gt;You may notice a new section is now added: &lt;a href=&quot;/links&quot;&gt;links&lt;/a&gt;. Yes,
I want a link list format for this site. Often I find stuff that&#x27;s insightful
and not always visible. I want to collect those and bookmark them here.
Modelling after &lt;a href=&quot;http://daringfireball.net&quot;&gt;Daring Fireball&lt;/a&gt;, I&#x27;ve added a new
&lt;a href=&quot;http://duan.ca/articles/feed.xml&quot;&gt;feed&lt;/a&gt; which only contains long-form,
original articles. I&#x27;ll be tagging the links so that they show up along side my
normal posts in tag pages. Each tag page now gets its own feed! You can read
about it in the &lt;a href=&quot;/&quot;&gt;about page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A few small issues has been fixed.&lt;/p&gt;
&lt;p&gt;I wrote the most Ruby in my life today. Yay?&lt;/p&gt;
</description>
                <pubDate>Mon, 16 Jan 2017 23:24:13 -0800</pubDate>
                <link>https://duan.ca/2017/01/16/site-changes/</link>
                <guid isPermaLink="true">https://duan.ca/2017/01/16/site-changes/</guid>
            </item>
            <item>
                <title>Making TUI Applications In Swift</title>
                <description>&lt;p&gt;One of my fondest memory in programming is writing the game Snake on one of
these:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2016/12/e-dictionary.jpg&quot; alt=&quot;An Electronic/Digital Dictionary&quot; /&gt;&lt;/p&gt;
&lt;p&gt;At the time, I was in a very restrictive school where a real computer wasn&#x27;t
permited in class. The actual thing (that&#x27;s an &amp;quot;electronic dictionary&amp;quot; by the
way) was probably older, slower and of a different brand than the one in the
photo. In fact, I didn&#x27;t know how to make a copy of the code, and the device
wasn&#x27;t even mine. So the game just stayed there when the device was returned to
the owener and its fate unknown.&lt;/p&gt;
&lt;p&gt;But I love it nontheless. Design the game, write it, playing it, showing it off&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;everything.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;p&gt;Fastforward to today. I use and write software applications for a living.
Programs I use directly range from terminal commands to GUI apps and web apps in
a browser.&lt;/p&gt;
&lt;p&gt;Some programs, however, don&#x27;t belong to those categories: vim, tig, irssi, etc.
They run in a terminal like CLI commands. But unlike commands like &lt;code&gt;ls&lt;/code&gt;, they
take over the entire buffer to offer different modes of interaction. You can
use hotkeys to navigate menus, trigger functions and so on.  Sometimes you can
use mouse, too. Their layout often resemble that of a GUI application running in
it&#x27;s own &amp;quot;window&amp;quot;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2016/12/tig.png&quot; alt=&quot;tig&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Just to make things painfully clear, these apps&#x27;s interface is composed
exclusively of text. We can vaguely categorize them as &amp;quot;Text-based User
Interface(TUI)&amp;quot; application.&lt;/p&gt;
&lt;p&gt;There are many reasons to like TUI applications. Compared to a CLI program,
they can display information in 2-dimentional, more organized layout (aka more
like a GUI app). Unlike a GUI application, they almost only require a terminal
to run. If you ssh onto a Linux server on your iPad, they&#x27;d work the same as
running locally on a Mac. For people who live in terminal simulators, it&#x27;s nice
to run apps that don&#x27;t open a new Window. Oh, they often tend to look the same
no matter how your OS changes.&lt;/p&gt;
&lt;p&gt;Most importantly, they remind me of the programs I built on that electronic
dictionary. I want to make them today, with my favorite programming language
Swift!&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;The go-to library for writing TUI apps is &lt;a href=&quot;https://www.gnu.org/software/ncurses/&quot;&gt;ncurses&lt;/a&gt;. Classics such as vim,
emacs and mutt were written with it to some degree. But I find it hard to dive
into: it has a large number of strange legacy function names and offers
pre-built UI elements like panels, menus, forms etc. The terminal in my mind is
a spread of characters that can be updated by me. That sounds fun. Ncurses seems
more like UIKit :P.&lt;/p&gt;
&lt;p&gt;Luckily, I found the fun library: &lt;a href=&quot;https://github.com/nsf/termbox&quot;&gt;termbox&lt;/a&gt; by &lt;a href=&quot;https://github.com/nsf&quot;&gt;nsf&lt;/a&gt;. Termbox offers around
a dozen functions that gives us size of the terminal, a way to update text at
a row/column coordinates, and user inputs in forms of key-presses and
mouse-clicks. And that&#x27;s it!&lt;/p&gt;
&lt;p&gt;After making &lt;a href=&quot;https://github.com/dduan/Termbox&quot;&gt;a Swift wrapper&lt;/a&gt;, I was able to build a painter app in
&lt;a href=&quot;https://github.com/dduan/TerminalPaint&quot;&gt;a handleful of lines&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2016/12/terminal-paint.png&quot; alt=&quot;terminal paint&quot; /&gt;&lt;/p&gt;
&lt;p&gt;So that&#x27;s an TUI app drawing according to mouse clicks built with only a few
primitives from termbox. Awww yeah! Here&#x27;s the code with the comment stripped,
to give you a taste:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import Termbox
func printAt(x: Int32, y: Int32, text: String,
    foreground: Attributes = .default,
    background: Attributes = .default)
{
    let border = Termbox.width

    for (c, xi) in zip(text.unicodeScalars, x ..&amp;lt; border) {
        Termbox.put(x: xi, y: y, character: c,
            foreground: foreground, background: background)
    }
}

func updateHelp(drawing: UnicodeScalar) {
    let lastY = Termbox.height - 1
    let content = [
        &amp;quot;Drawing [\(drawing)]&amp;quot;,
        &amp;quot;Press other character to change&amp;quot;,
        &amp;quot;Use mouse to draw&amp;quot;,
        &amp;quot;Press &#x27;q&#x27; to quit&amp;quot;
    ].joined(separator: &amp;quot; | &amp;quot;)

    let filler = String(repeating: &amp;quot; &amp;quot;,
        count: Int(Termbox.width) - content.unicodeScalars.count)

    printAt(x: 0, y: lastY, text: content + filler,
        foreground: .white, background: .blue)
}

func paint() {
    do {
        try Termbox.initialize()
    } catch let error {
        print(error)
        return
    }
    Termbox.inputModes = [.esc, .mouse]

    var drawingCharacter: UnicodeScalar = &amp;quot;.&amp;quot; {
        didSet {
            updateHelp(drawing: drawingCharacter)
        }
    }

    updateHelp(drawing: drawingCharacter)

    Termbox.present()

    outer: while true {
        guard let event = Termbox.pollEvent() else {
            continue
        }

        switch event {
        case let .character(_, value):
            if value == &amp;quot;q&amp;quot; {
                break outer
            }

            drawingCharacter = value

        case let .key(_, value):
            if value == .space {
                drawingCharacter = &amp;quot; &amp;quot;
            }

        case let .mouse(x, y):
            Termbox.put(x: x, y: y,
                character: drawingCharacter,
                foreground: .red)
        default:
            continue
        }

        Termbox.present()
    }

    Termbox.shutdown()
}

paint()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/dduan/Termbox&quot;&gt;Library&lt;/a&gt; and this &lt;a href=&quot;https://github.com/dduan/TerminalPaint&quot;&gt;app&lt;/a&gt; are both on Github. Go and
have fun :)&lt;/p&gt;
</description>
                <pubDate>Mon, 26 Dec 2016 21:39:05 -0800</pubDate>
                <link>https://duan.ca/2016/12/26/making-tui-programs-in-swift/</link>
                <guid isPermaLink="true">https://duan.ca/2016/12/26/making-tui-programs-in-swift/</guid>
            </item>
            <item>
                <title>Rebase And Sign Multiple Git Commits</title>
                <description>&lt;p&gt;I never bothered &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work&quot;&gt;signing&lt;/a&gt; my git commits until Github started putting
those shiny badges on them. Since then I&#x27;ve encountered a problem: rebased
commits lose their hash and their signed-ness.&lt;/p&gt;
&lt;p&gt;That&#x27;s not a big deal for a single commit. Just run &lt;code&gt;git commit -S --amend --no-edit&lt;/code&gt; after rebase. And that commit, which is at &lt;code&gt;HEAD&lt;/code&gt; will have a new
hash and be signed.&lt;/p&gt;
&lt;p&gt;What if we have more than one commit to rebase? My instinctive answer was sign
the one on &lt;code&gt;HEAD&lt;/code&gt;, then use interactive rebase to rotate the next one on top and
sign it, repeat until each one is signed and reorder them. But that doesn&#x27;t work
at all because a commit&#x27;s position in history is part of its content. That means
after a commit is rebased, it and every commits following it will have a new
hash and git doesn&#x27;t give us an oppurtunity to say &amp;quot;include my signature,
please&amp;quot;. You cannot rebase and keep the commits signed!&lt;/p&gt;
&lt;p&gt;Well, that kind of sucks. But you are reading about it here, so I&#x27;d better give
you something to help, right?&lt;/p&gt;
&lt;p&gt;There is, at least, one way to achieve &lt;em&gt;rebase and sign multiple commits&lt;/em&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run interactive rebase: &lt;code&gt;git rebase -i branch&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Mark all commits and &amp;quot;edit&amp;quot; or &amp;quot;e&amp;quot;.&lt;/li&gt;
&lt;li&gt;Git now stops at every commit for you to make changes. This is an oppurtunity
to sign it! &lt;code&gt;git commit -S --amend --no-edit&lt;/code&gt;, just like how you would sign
&lt;code&gt;HEAD&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git rebase --continue&lt;/code&gt;, move on the next commit until all every one is
edited.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There&#x27;s virtually nothing you cannot do with git. Hence the reputation for it&#x27;s
glorious UI, ya know?&lt;/p&gt;
</description>
                <pubDate>Sat, 24 Dec 2016 01:31:14 -0800</pubDate>
                <link>https://duan.ca/2016/12/24/rebase-multiple-git-commits-with-signing/</link>
                <guid isPermaLink="true">https://duan.ca/2016/12/24/rebase-multiple-git-commits-with-signing/</guid>
            </item>
            <item>
                <title>How To Omit Needless Words</title>
                <description>&lt;p&gt;A typical experience in adopting Swift 3 may look like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run the migrator.&lt;/li&gt;
&lt;li&gt;Fix up what the migrator left undone so your project complies.&lt;/li&gt;
&lt;li&gt;Remove artifacts that migrator added to ensure successful compilation (you
know what this means if you finished previous step in a mildly sized code
base).&lt;/li&gt;
&lt;li&gt;Fix bugs caused by mechanical changes.&lt;/li&gt;
&lt;li&gt;Try to adapt your code base to the new style: lowercased static members, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last step is particularly challenging in a team environment because it
involves naming things. Luckily we have (IMHO) the best &amp;quot;features&amp;quot; in Swift
3 for help: the &lt;a href=&quot;https://swift.org/documentation/api-design-guidelines/&quot;&gt;API Design Guidelines&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://swift.org/documentation/api-design-guidelines/#omit-needless-words&quot;&gt;Omit needless words&lt;/a&gt; is one of the most differentiating
guideline for function names between Swift 2 and 3. In Swift 2 we used to name
things like so…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func doStuffWithThing(thing: Thing) { … }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… and use it like …&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;doStuffWithThing(someThing)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&#x27;s a lot of &amp;quot;thing&amp;quot;s, have you noticed?&lt;/p&gt;
&lt;p&gt;Since the word &amp;quot;Thing&amp;quot; is &lt;em&gt;merely repeating&lt;/em&gt; the type information, we can omit
it in Swift 3:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// declare
func doStuff(with thing: Thing) { … }

// use
doStuff(with: someThing)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&#x27;s clear at both declaration and use site what we are doing stuff to.&lt;/p&gt;
&lt;p&gt;So … you should go through you code base and make this change! In the next
section, we&#x27;ll discuss one way to make it happen.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Step 1: Automate&lt;/h2&gt;
&lt;p&gt;A good indicator of &amp;quot;merely repeating type information&amp;quot; is repetition of words.
If you have been disciplined about naming your functions in Swift 2, finding
such repetition should take no more than one or two good regular expressions.
After the migrator, your code may contain a mixture of these:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;func doStuffWithX(_: X) { … }
func doStuff(forY y: Y) { … }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In other words, the repeating word (&lt;code&gt;X&lt;/code&gt; or &lt;code&gt;Y&lt;/code&gt;) is preceded by a
&lt;a href=&quot;https://www.englishclub.com/grammar/prepositions-list.htm&quot;&gt;preposition&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finding these in a large code base is quite fun. If you don&#x27;t feel like writing
the scripts yourself, I&#x27;ve made a little tool for it &lt;a href=&quot;https://github.com/dduan/needless&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(Sometimes the repeating words aren&#x27;t a exact match because of prefixes such as
&amp;quot;CG&amp;quot; in &lt;code&gt;CGSize&lt;/code&gt;. That&#x27;s covered by the tool as well.)&lt;/p&gt;
&lt;h2&gt;Step 2: Update&lt;/h2&gt;
&lt;p&gt;You can further rearrange the pieces in function name mechanically to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;func doStuff(preposition originalArgName: Type) { … }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/dduan/needless&quot;&gt;tool&lt;/a&gt; I wrote can suggest alternatives like this. Applying them
is technically automatable. But I find manually doing tasks such as fixing up
indentation for multi-line functions or updating their use site to be easier.
Your conclusion may depend the size of your code base and your patience.&lt;/p&gt;
&lt;h2&gt;Step 3: Audit&lt;/h2&gt;
&lt;p&gt;The main goal for the API Design Guidelines is &amp;quot;clarity at the point of use&amp;quot;.
Our automated process will yield some undesirable results. I&#x27;ll list a few
scenarios here.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Poorly named function name becomes poorer&lt;/strong&gt;. Example:
&lt;code&gt;alertForScreenSize(_ size CGRize)&lt;/code&gt; becomes &lt;code&gt;alert(forScreen size: CGSize)&lt;/code&gt;.
Obviously, &amp;quot;for screen&amp;quot; is misleading since a &lt;code&gt;CGSize&lt;/code&gt; is not a screen. The
problem here is the &amp;quot;alert&amp;quot; is not for a &amp;quot;size&amp;quot; to begin with. We as human
intuitively pick up that it&#x27;s for a &amp;quot;screen with a certain size&amp;quot;. So the correct
renaming here should be &lt;code&gt;alertForScreen(with size: CGSize)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Awkward literal values results in ungrammatical phrases&lt;/strong&gt;. Imagine our
argument is a enum:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;enum Mode {
  case add
  case edit
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… and we renamed a function &lt;code&gt;updateUIForMode(mode: Mode)&lt;/code&gt; to
&lt;code&gt;update(for mode: Mode)&lt;/code&gt;. The call site, therefore, becomes
&lt;code&gt;update(for: .add)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What makes it feels wrong? Well, a preposition followed by a verb (&amp;quot;for add&amp;quot;)
is not very grammatical. Normally we would say &amp;quot;update UI for &lt;em&gt;adding&lt;/em&gt;&amp;quot;. So here
we need to update the literals in that enum to &amp;quot;adding&amp;quot; and &amp;quot;editing&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Type information becomes too weak&lt;/strong&gt;. This can happen very often with enum
literals. We often name enum values with an adjective to qualify its name:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;enum UIControlState {
    case automatic // which state? the *automatic* state!
    …
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After renaming, we&#x27;ll have functions that simply becomes too generic and
mysterious at call site:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;update(for: .automatic) // automatic what? 😂
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is where we need to be flexible and use our own good judgement. Perhaps
it&#x27;s simply better to keep the qualifying postfix:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;update(forControlState: .automatic) // better
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the guideline&#x27;s parlance, this is &lt;a href=&quot;https://swift.org/documentation/api-design-guidelines/#weak-type-information&quot;&gt;compensate for weak type
information&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Other argument labels needs updates too&lt;/strong&gt;. A function at call site should read
like a sentence as much as possible. We removed words at beginning of the
&amp;quot;sentence&amp;quot;, it&#x27;s important to take a look at labels for the rest of the sentence
and ensure the whole thing fits together.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;There are &lt;em&gt;many&lt;/em&gt;, &lt;em&gt;many&lt;/em&gt; other fallouts from mechanically omitting needless
words that I didn&#x27;t cover in this post. There are many many other things in the
API Design Guidelines that are worth conforming to. There will be much much bike
shedding among your team members.&lt;/p&gt;
&lt;p&gt;Just remember, the API guidelines don&#x27;t provide an answer to every naming
decision. Following it means your code base will fit in with the rest of the
community and APIs from Foundation/Swift standard library. But find what feels
right for your team is the most important thing. In the end, you should be glad
that everyone cares so much about your code base&#x27;s &amp;quot;Swiftness&amp;quot; and it&#x27;ll be all
worth it!&lt;/p&gt;
</description>
                <pubDate>Sat, 22 Oct 2016 17:08:41 -0700</pubDate>
                <link>https://duan.ca/2016/10/22/how-to-omit-needless-words/</link>
                <guid isPermaLink="true">https://duan.ca/2016/10/22/how-to-omit-needless-words/</guid>
            </item>
            <item>
                <title>Distribution Tests</title>
                <description>&lt;p&gt;There are several ways to build dependencies for a Swift 3 project:
Swift Package Manager, Cocoapods, Carthage, etc. Many have an opinion on which
is the best choice for their projects. As a library author who want to help as
many people as possible, however, they can&#x27;t ignore any of them.&lt;/p&gt;
&lt;p&gt;I sometimes question the sanity of that conclusion: instead of becoming an
export in each package manager, I find myself a novice of all. Did I break
support for any of them with this project change? Is it still working on
a particular platform, say, tvOS? Can I &lt;em&gt;really&lt;/em&gt; know?&lt;/p&gt;
&lt;p&gt;The only way to &lt;em&gt;really&lt;/em&gt; know is to verify yourself: both Cocoapods and
Carthage support four platforms -- iOS, macOS, watchOS, tvOS; Swift Package
Manager only works on Mac or Linux. So that&#x27;s 2*4+1=9 targets. All these
targets need is have the library in question fetched and imported. Every Swift
library author should have such verification before publishing updates of
their project.&lt;/p&gt;
&lt;p&gt;The steps to verify can be triggered with commands: fetch and build
dependencies, build Xcode/Swift project. To automate the process, put these
commands in a script or a Makefile. But wait, there&#x27;s more! One shouldn&#x27;t have
to create these dummy projects every time they create a new library. If all
these projects do is importing a library and attempt to build, they should
work for &lt;em&gt;any&lt;/em&gt; library. The config in &lt;code&gt;Package.swift&lt;/code&gt;/&lt;code&gt;Cocoapods&lt;/code&gt;/&lt;code&gt;Cartfile&lt;/code&gt;
and the &lt;code&gt;import&lt;/code&gt; statements just needs some strings replaced: name of the next
library, URL for its git repository, etc. And that&#x27;s a scriptable process as
well!&lt;/p&gt;
&lt;p&gt;To recap, one could, in theory, copy in some dummy projects, run a command to
inject information about a new library, run another command to build all these
project, verifying that support for those package managers remain functional.&lt;/p&gt;
&lt;p&gt;In reality, I have created &lt;a href=&quot;https://github.com/dduan/DistributionTests&quot;&gt;DistributionTests&lt;/a&gt; and put it
on &lt;a href=&quot;https://github.com/dduan/DistributionTests&quot;&gt;Github&lt;/a&gt; 😉.&lt;/p&gt;
&lt;p&gt;The script &lt;code&gt;customize&lt;/code&gt; requires 3 pieces of information of the library: its
import name, its git repository URL and a major version number. The assumption
here is the library generates uniformly named artifacts: the file name for
&lt;code&gt;.framework&lt;/code&gt; and the name users use to import it are the same. Testing
distribution of a library is as simple as:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;clone the project.&lt;/li&gt;
&lt;li&gt;customize the project with &lt;code&gt;customize&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;make&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you do step 1 and 2, include the projects in library&#x27;s repository, then
only step 3 is necessary! This makes testing distribution methods trivial on
a continuous integration server.&lt;/p&gt;
&lt;p&gt;Go forth and create fearlessly!&lt;/p&gt;
</description>
                <pubDate>Mon, 10 Oct 2016 10:34:49 -0700</pubDate>
                <link>https://duan.ca/2016/10/10/distribution-tests/</link>
                <guid isPermaLink="true">https://duan.ca/2016/10/10/distribution-tests/</guid>
            </item>
            <item>
                <title>A Case For OOP?</title>
                <description>&lt;p&gt;Python&#x27;s standard library includes a very handy &lt;code&gt;defaultdict&lt;/code&gt;. It behaves
almost exactly like the standard dictionary except it&#x27;ll supply a pre-defined
value for any non-existence keys. It is, unsurpringly, a subclass of &lt;code&gt;dict&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I find my self missing this handy container in Swift. Especially when I use
a normal &lt;code&gt;Dictionary&lt;/code&gt; to accumulate/coalesce values under distinct keys. So I
wrote my own:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/dduan/31ed39c4c98ecb88290f0743cb394c20.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;There are a few noticable things about this implementation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It does not conform to the &lt;code&gt;DictionaryLiteralConvertible&lt;/code&gt; protocol, for no
good reasons, really. The initializer in this protocol takes a varadic
argument. There&#x27;s no conevient way to forward this array to a normal
dictionary&#x27;s initializer (incidentally, this is a Swift feature I really
want). Plus, I don&#x27;t need &lt;code&gt;DefaultDictionary&lt;/code&gt; to be a literal convertible.&lt;/li&gt;
&lt;li&gt;Most of the code, including the imaginary &lt;code&gt;init&lt;/code&gt; mentioned in previous
point, simply reuses stuff from &lt;code&gt;Dictionary&lt;/code&gt;: asscociated type, indexes,
generator, subscript, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In comparison, Python implements &lt;code&gt;defaultdict&lt;/code&gt; in a more intuitive way -- via
inheritance.&lt;/p&gt;
&lt;p&gt;But do we want inheritance for &lt;code&gt;struct&lt;/code&gt;s and &lt;code&gt;enum&lt;/code&gt;s in Swift? What does that
even mean? Is it simply a case that will go away when protocols become more
powerful?&lt;/p&gt;
</description>
                <pubDate>Thu, 19 May 2016 12:03:02 -0700</pubDate>
                <link>https://duan.ca/2016/05/19/a-case-for-oop/</link>
                <guid isPermaLink="true">https://duan.ca/2016/05/19/a-case-for-oop/</guid>
            </item>
            <item>
                <title>Cheap Orders</title>
                <description>&lt;p&gt;How to create order? If the second law of thermal dynamics tells us anything,
we&#x27;d better get to work, right?
{: .lead}&lt;/p&gt;
&lt;p&gt;Before going full existential, let&#x27;s limit &amp;quot;order&amp;quot; to Swift&#x27;s set and
dictionaries -- there is none. Of course, you can take values/keys out and
sort them. But what if all you care about is &lt;em&gt;some&lt;/em&gt; order?&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Recently, I wrote&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;enum Token {
  static let all = [
    &amp;quot;=&amp;quot;: .Equal,
    &amp;quot;-&amp;quot;: .Minus,
    // more token mappings …
  ]
  case Equal
  case Minus
  // more tokens …
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… in the hope that I can take each value from &lt;code&gt;Token.all.keys&lt;/code&gt; and see if
a prefix of a string is a matching token. It started to fail as the tokens
expands to multiple characters:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;enum Token {
  static let all = [
    &amp;quot;=&amp;quot;: .Equal,
    &amp;quot;-&amp;quot;: .Minus,
    // more token mappings …
    &amp;quot;==&amp;quot;: .Equality,
    &amp;quot;-&amp;gt;&amp;quot;: .Arrow,
    // more token mappings …
    &amp;quot;===&amp;quot;: .Identity,
    // more token mappings …
  ]
  case Equal
  case Minus
  case Equality
  case Arrow
  case Identity
  // … more tokens …
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt; could get a match with &lt;code&gt;-&lt;/code&gt; and &lt;code&gt;===&lt;/code&gt; would match to either &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;=&lt;/code&gt;,
etc.&lt;/p&gt;
&lt;p&gt;Since the tokens in this exercise have at most 3 characters, I decided to
group them by length and match from the longer group first. The groups became:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;enum Token {
  static private let group1 = [
    &amp;quot;=&amp;quot;: .Equal,
    &amp;quot;-&amp;quot;: .Minus,
    // more token mappings …
  ]

  static private let group2 = [
    &amp;quot;==&amp;quot;: .Equality,
    &amp;quot;-&amp;gt;&amp;quot;: .Arrow,
    // more token mappings …
  ]

  static private let group3 = [
    &amp;quot;===&amp;quot;: .Identity,
    // more token mappings …
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I can choose which group to take values first. There&#x27;s a way to do it
without adding some control flow logic:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;[group3.keys, group2.keys, group3.keys].flatten()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Even better, I&#x27;ll make it a lazy property…&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;enum Token {
  static var all = {
    [group3.keys, group2.keys, group3.keys].flatten()
  }()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…except an important piece of information is missing from the property: what&#x27;s
&lt;code&gt;all&lt;/code&gt;&#x27;s type? Turns out, it&#x27;s become&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;FlattenCollection&amp;lt;Array&amp;lt;LazyMapCollection&amp;lt;Dictionary&amp;lt;String, Token&amp;gt;, String&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahh, it seems that in the pursue of cheap, lazy creation of these structures,
we are forced to deal with a bunch of type wrappers, each having a good reason
to be here!&lt;/p&gt;
&lt;p&gt;But I really just need something like &lt;code&gt;Array&amp;lt;String&amp;gt;&lt;/code&gt; for the consumer. If
only there&#x27;s a way to make all this stuff go away from my type signature, as
if they are &lt;a href=&quot;http://robnapier.net/erasure&quot;&gt;erased&lt;/a&gt; :).&lt;/p&gt;
&lt;p&gt;Okay, I&#x27;m talking about &lt;code&gt;AnySequence&lt;/code&gt; now. Rob Napier has an excellent post on
this topic &lt;a href=&quot;http://robnapier.net/erasure&quot;&gt;here&lt;/a&gt; if you need to catch up. Our
code eventually end up like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;enum Token {
  static var all: AnySequence&amp;lt;String&amp;gt; = {
    AnySequence(
      [group3.keys, group2.keys, group3.keys]
        .flatten())
  }()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of &lt;code&gt;Array&amp;lt;String&amp;gt;&lt;/code&gt;, we have an &lt;code&gt;AnySequence&amp;lt;String&amp;gt;&lt;/code&gt;. Our tokens now
gets checked with the correct order. We didn&#x27;t need to sort the entire set of
tokens, nor did we do any heavy data massage upfront, making a bunch of copies
along the way.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Looking back, this post really failed to capture the eureka moment as I came
up with the erasure method. I discovered a series of small challenges and got
help from Swift&#x27;s designers in each step. Everything fell together in the end.&lt;/p&gt;
</description>
                <pubDate>Sun, 15 May 2016 17:42:27 -0700</pubDate>
                <link>https://duan.ca/2016/05/15/cheap-orders/</link>
                <guid isPermaLink="true">https://duan.ca/2016/05/15/cheap-orders/</guid>
            </item>
            <item>
                <title>Deploy Jekyll Site To Github With Make</title>
                <description>&lt;p&gt;At risks of being too meta, I want to talk about how this post is going to go
from my computer to a repository on Github on both the &lt;code&gt;master&lt;/code&gt; and &lt;code&gt;gh-pages&lt;/code&gt;
branch. The former contains the file I&#x27;m typing, and the latter an updated
HTML site generated by Jekyll.&lt;/p&gt;
&lt;p&gt;Here&#x27;s how: I type &lt;code&gt;make deploy&lt;/code&gt; once I commit this file in my local
repository.&lt;/p&gt;
&lt;p&gt;I spent a day to set up a Jekyll site. The last part involves deploying it to
Github, my preferred way to host a static site. There are a lot of posts and
scripts on how to achieve it. And Github seems to have an &amp;quot;afficial&amp;quot; support
for Jekyll site that disables plugin scripts (understandably so).&lt;/p&gt;
&lt;p&gt;But having worked with git and make for all these years made me immune to all
the fanciness the Internet tries to sell.&lt;/p&gt;
&lt;p&gt;Here&#x27;s my script for deploying a Jekyll project to Github pages:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DEPLOY_PATH=/tmp/jekyll_deploy
build:
	jekyll build

deploy:
	git checkout -f gh-pages
	git clean -d -x -f
	git pull
	git checkout master
	jekyll build
	rm -rf ${DEPLOY_PATH}
	mkdir ${DEPLOY_PATH}
	cp -R .git ${DEPLOY_PATH}
	cd ${DEPLOY_PATH}; git checkout gh-pages; git clean -d -x -f
	cp -R _site/* ${DEPLOY_PATH}
	cd ${DEPLOY_PATH}; git add .; git commit -m &amp;quot;`curl whatthecommit.com/index.txt`&amp;quot;
	cd ${DEPLOY_PATH}; git push -f origin gh-pages
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Drop it into root of your Jekyll project, commit all changes (including the
&lt;code&gt;Makefile&lt;/code&gt;). And type &lt;code&gt;make deploy&lt;/code&gt;. BOOM, done.&lt;/p&gt;
&lt;p&gt;There are a couple of assumptions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You build the site in the &lt;code&gt;_site&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;You store Jekyll source on &lt;code&gt;master&lt;/code&gt; and have the &lt;code&gt;gh-pages&lt;/code&gt; branch up.&lt;/li&gt;
&lt;li&gt;You can build the site by running &lt;code&gt;jekyll build&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You don&#x27;t care about commit message on the deploy branch.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I like it better than other methods because it does not require installing
additional software/scripts and there&#x27;s no restriction on plugins.&lt;/p&gt;
</description>
                <pubDate>Sun, 15 May 2016 01:00:00 -0700</pubDate>
                <link>https://duan.ca/2016/05/15/deploy-jekyll-to-github/</link>
                <guid isPermaLink="true">https://duan.ca/2016/05/15/deploy-jekyll-to-github/</guid>
            </item>
            <item>
                <title>char ** in Swift</title>
                <description>&lt;p&gt;A &amp;quot;string&amp;quot; in C is just a continuous chunk of &lt;code&gt;char&lt;/code&gt; values in memory with
&lt;code&gt;\0&lt;/code&gt; at the end. To reference it, a variable of type &lt;code&gt;char *&lt;/code&gt; is used to store
the address of the first &lt;code&gt;char&lt;/code&gt; (commonly known as a pointer 😉).  It&#x27;s common
to have string manipulating functions take this form:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;void foo(char **errorMessage) {
    // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To mutate the arugment &lt;code&gt;errorMessage&lt;/code&gt; of type &lt;code&gt;char *&lt;/code&gt;, &lt;code&gt;foo&lt;/code&gt; takes a pointer
to it, &lt;code&gt;(char *)*&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;How do we call &lt;code&gt;foo&lt;/code&gt; in Swift?&lt;/p&gt;
&lt;p&gt;Here&#x27;s the tl;dr. We can wrap it in a Swift function that have the same
interface:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;func fooSwift(inout errorMessage: String?) {
    var message: UnsafeMutablePointer&amp;lt;CChar&amp;gt; = nil

    foo(&amp;amp;message)
    errorMessage = String.fromCString(message)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;errorMessage&lt;/code&gt; will contain whatever our C function &lt;code&gt;foo&lt;/code&gt; assigns to it.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;So, what&#x27;s really going on here?&lt;/p&gt;
&lt;p&gt;Inspecting &lt;code&gt;foo&lt;/code&gt;&#x27;s signature in Swift, we see&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;func foo(errorMessage: UnsafeMutablePointer&amp;lt;UnsafeMutablePointer&amp;lt;CChar&amp;gt;&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… okey, &lt;code&gt;errorMessage&lt;/code&gt;&#x27;s type is little intimidating to someone who doesn&#x27;t
use C functions in Swift everyday (like me)!&lt;/p&gt;
&lt;p&gt;Let&#x27;s break it down. Swift does a ton of work for us to interoperate with C:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CChar&lt;/code&gt; is Swift&#x27;s name for &lt;em&gt;&lt;code&gt;char&lt;/code&gt; in C&lt;/em&gt; (shocking, amiright?)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UnsafeMutablePointer&amp;lt;Type&amp;gt;&lt;/code&gt; roughly translates to &lt;code&gt;Type *&lt;/code&gt;, so
syntactically, we can see why
&lt;code&gt;UnsafeMutablePointer&amp;lt;UnsafeMutablePointer&amp;lt;CChar&amp;gt;&amp;gt;&lt;/code&gt; is used to bridge the
C type &lt;code&gt;(char *)*&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A function that takes &lt;code&gt;UnsafeMutablePointer&amp;lt;Type&amp;gt;&lt;/code&gt; argument accepts
&lt;code&gt;inout Type&lt;/code&gt; values. Therefore, we can look at &lt;code&gt;foo&lt;/code&gt; as&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;foo(inout errorMessage: UnsafeMutablePointer&amp;lt;CChar&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Swift acknowledge C&#x27;s string representation and provides convenient
methods for converting &lt;code&gt;char *&lt;/code&gt; / &lt;code&gt;UnsafeMutablePointer&amp;lt;CChar&amp;gt;&lt;/code&gt; to its own
&lt;code&gt;String&lt;/code&gt; type (&lt;code&gt;String.fromCString()&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hopefully you can see how &lt;code&gt;fooSwift&lt;/code&gt; works now.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Taking a step back, to deal with &lt;code&gt;char **&lt;/code&gt; in Swift, we overcame 2 obstacles:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The difference in string representation between C and Swift.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compared to C pointers, Swift&#x27;s &lt;code&gt;inout&lt;/code&gt; expresses mutability of function
arguments in a more restricted way. We can&#x27;t nest &lt;code&gt;inout&lt;/code&gt;s to represent
the infinite layers of indirections that pointers achieve.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
                <pubDate>Sun, 01 Nov 2015 11:18:40 -0800</pubDate>
                <link>https://duan.ca/2015/11/01/char-star-star-in-swift/</link>
                <guid isPermaLink="true">https://duan.ca/2015/11/01/char-star-star-in-swift/</guid>
            </item>
            <item>
                <title>Swift Algebraic Data Types</title>
                <description>&lt;h2&gt;The Basics&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Algebraic_data_type&quot;&gt;Algebraic Data Type&lt;/a&gt; is a fancy name for &amp;quot;a type creaded by combining other
types&amp;quot; in programming languages. One aspect of the &amp;quot;algebraic-ness&amp;quot; is how
many potential new values there are for the new type, given a set of type as
its building block.&lt;/p&gt;
&lt;p&gt;To better illustrate this, consider the following example in Swift.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;enum StarkChild { case Rickon, Bran, Arya, Sansa, Robb, Jon }

enum Direwolf { case Shaggydog, Summer, Nymeria, Lady, Greywind, Ghost }

enum Actor {
    case Wolf(Direwolf)
    case Person(StarkChild)
}

struct Parters {
    var wolf: Direwolf
    var person: StarkChild
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;StarkChild&lt;/code&gt; and &lt;code&gt;Direwolf&lt;/code&gt; each has 6 potential values. Combining them, we
get two new types.&lt;/p&gt;
&lt;p&gt;Question: how many potentiol values are there for &lt;code&gt;Actor&lt;/code&gt;? How many for
&lt;code&gt;Parters&lt;/code&gt;?&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;An &lt;code&gt;Actor&lt;/code&gt; can be either a &lt;code&gt;StarkChild&lt;/code&gt; or a &lt;code&gt;DireWolf&lt;/code&gt;, therefore it has `6&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;6 = 12&lt;code&gt;potential values – the *sum* of&lt;/code&gt;Child&lt;code&gt;&#x27;s and &lt;/code&gt;DireWolf`&#x27;s values.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A &lt;code&gt;Partners&lt;/code&gt; requires us to select one value from &lt;code&gt;Child&lt;/code&gt; and one from
&lt;code&gt;DireWolf&lt;/code&gt;, resulting in &lt;code&gt;6 * 6 = 36&lt;/code&gt; potential values – the &lt;em&gt;product&lt;/em&gt; of
&lt;code&gt;Child&lt;/code&gt;&#x27;s and &lt;code&gt;DireWolf&lt;/code&gt;&#x27;s values.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Actor&lt;/code&gt;, an &lt;code&gt;enum&lt;/code&gt;, is a &lt;em&gt;sum&lt;/em&gt; type. &lt;code&gt;Parters&lt;/code&gt;, a &lt;code&gt;struct&lt;/code&gt;, is a &lt;em&gt;product&lt;/em&gt;
type. Here, &lt;code&gt;Parters&lt;/code&gt; could easily be defined as a &lt;code&gt;class&lt;/code&gt; or a &lt;code&gt;tuple&lt;/code&gt; and
remain a &lt;em&gt;product&lt;/em&gt; type. Because we can create product or sum types in these
direct ways, we can say Swift has first class support for Algebraic Data
Types.&lt;/p&gt;
&lt;h2&gt;The Crossovers&lt;/h2&gt;
&lt;p&gt;However, the story doesn&#x27;t stop here. In Swift, an &lt;code&gt;enum&lt;/code&gt;&#x27;s option can have
multiple values. If it happens to be the only option, then this
&lt;code&gt;enum&lt;/code&gt;effectively becomes a &lt;em&gt;product&lt;/em&gt; type:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// there are 6 * 6 = 36 potential values for Parters
enum Parters {
    case Value(wolf: DireWolf, person: StarkChild)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Incidentally, this makes &lt;code&gt;enum&lt;/code&gt; similar to &lt;code&gt;data&lt;/code&gt; in Haskell, where &lt;em&gt;product&lt;/em&gt;
and &lt;em&gt;sum&lt;/em&gt; types can be created with a unified construct – &lt;code&gt;data&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In C and C++, &lt;code&gt;union&lt;/code&gt;s are the closest thing to &lt;em&gt;sum&lt;/em&gt; types. However, &lt;code&gt;union&lt;/code&gt;
is hardly used to combine arbitrary types due to its lack of associated
values. What do people do in need of &lt;em&gt;sum&lt;/em&gt; types? They make do with product
types. Here&#x27;s one way to achive that in Swift:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;// Actor.value can have only 6 + 6 = 12 potential values thanks to
// manual enforcement
class Actor {
    var child: StarkChild?
    var wolf: Direwolf?

    var value: Any {
        get {
            return child == nil ? wolf! : child!
        }
        set(newValue) {
            if newValue is StarkChild {
                child = (newValue as! StarkChild)
                wolf = nil
            }
            if newValue is Direwolf {
                wolf = (newValue as! Direwolf)
                child = nil
            }
        }
    }

    init(wolf: Direwolf) {
        self.wolf = wolf
    }
    init(child: StarkChild) {
        self.child = child
    }
    init() {
        fatalError(&amp;quot;must initialize with a child or a wolf&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&#x27;s… ugly.&lt;/p&gt;
&lt;h2&gt;Recursion Types&lt;/h2&gt;
&lt;p&gt;Besides &lt;em&gt;sum&lt;/em&gt; and &lt;em&gt;product&lt;/em&gt;, another common class of algebraic type is
recursion types. The interesting bit here is that Swift struggles to support
it. In WWDC 2015, it was announced that &lt;code&gt;enum&lt;/code&gt;s can be defined recursively in
Swift 2:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;enum Tree {
    case Empty
    indirect case Node(Tree, Tree)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As of this writing, Xcode 7 beta 3 has not delivered this feature yet.
Also, it&#x27;s a good bet that &lt;code&gt;indirect&lt;/code&gt; is not going to be available in tuple
aliases, such as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;typealias Node = (indirect Node, indirect Node)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I hope this is on the Swift team&#x27;s (understandably) gigantic todo list 😉.&lt;/p&gt;
</description>
                <pubDate>Sun, 12 Jul 2015 15:51:27 -0700</pubDate>
                <link>https://duan.ca/2015/07/12/swift-algebraic-data-types/</link>
                <guid isPermaLink="true">https://duan.ca/2015/07/12/swift-algebraic-data-types/</guid>
            </item>
            <item>
                <title>Let&#x27;s Build A &#x27;cat&#x27; In Swift 2</title>
                <description>&lt;p&gt;As a homework in one of the early college classes, I was asked to write unix
commands such as &lt;code&gt;cat&lt;/code&gt; in C. Let&#x27;s do that in Swift today! To make things
interesting, let&#x27;s pretend we are on Linux. That means no Xcode nor Foundation
can be used.&lt;/p&gt;
&lt;p&gt;It&#x27;s hard to find a simpler unix program than &lt;code&gt;cat&lt;/code&gt;: It takes a list of file
names from the shell and write the content of each file to &lt;code&gt;stdout&lt;/code&gt;. When no
argument is given, it uses &lt;code&gt;stdin&lt;/code&gt; as the source of its output.&lt;/p&gt;
&lt;p&gt;Writing it in C is trivial. Swift has exellent support for leveraging C. But
to call even the standard C functions, we need to import them first.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;swiftc&lt;/code&gt; command can compile a pure Swift source file like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;swiftc cat.swift -o cat
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can add Objective-C bridging headers with the argument
&lt;code&gt;-import-objc-header&lt;/code&gt;.  But to import the standard C functions, we also need
to specify path to an SDK:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;swiftc -sdk $(xcrun --show-sdk-path --sdk macosx)\
       -import-objc-header bridge.h\
       cat.swift\
       -o cat
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of typing/copying that command, save this &lt;code&gt;Makefile&lt;/code&gt; to the same
directory as &lt;code&gt;cat.swift&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SDKPATH = $(shell xcrun --show-sdk-path --sdk macosx)
CBRIDGEHEADER = bridge.h
TARGETS := cat

.PHONY : all $(TARGETS)

all: $(TARGETS)

$(TARGETS):
    swiftc -sdk $(SDKPATH) $@.swift -import-objc-header $(CBRIDGEHEADER) -o $@
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now &lt;code&gt;make cat&lt;/code&gt; should take care of the compilation.&lt;/p&gt;
&lt;p&gt;Since file I/O is the only concern, we&#x27;ll need C APIs from &lt;code&gt;stdio.h&lt;/code&gt;, so
&lt;code&gt;bridge.h&lt;/code&gt; is a one liner:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;#import &amp;lt;stdio.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The standard C function for opening a file is &lt;code&gt;fopen&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;FILE * fopen ( const char *filename, const char *mode );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hmmmm, how do we deal with all those pesky &#x27;*&#x27;s?&lt;/p&gt;
&lt;p&gt;To reference a certain C &lt;code&gt;Type&lt;/code&gt; in Swift, we can use &lt;code&gt;UnsafePointer&amp;lt;Type&amp;gt;&lt;/code&gt; or
&lt;code&gt;UnsafeMutablePointer&amp;lt;Type&amp;gt;&lt;/code&gt;. To make our lives easier, Swift &lt;code&gt;String&lt;/code&gt;s
automatically bridge to &lt;code&gt;const char *&lt;/code&gt;. In other words, we can treat the
signature of &lt;code&gt;fopen&lt;/code&gt; as if it&#x27;s the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func fopen( filename: String, mode: String ) -&amp;gt; UnsafeMutablePointer&amp;lt;FILE&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A character in C is represented by a byte in memory. Therefore Swift sees
a &lt;code&gt;char&lt;/code&gt; as of type &lt;code&gt;Int8&lt;/code&gt; (8-bit integer).  So a &lt;code&gt;char *&lt;/code&gt; would be referenced
as &lt;code&gt;UnsafeMutablePointer&amp;lt;Int8&amp;gt;&lt;/code&gt; in Swift. So &lt;code&gt;getline&lt;/code&gt;, a function from POSIX&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;ssize_t getline( char **lineptr, size_t *n, FILE *stream );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;would look like this in Swift:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;func getline(
    inout lineptr: UnsafeMutablePointer&amp;lt;Int8&amp;gt;,
    inout n: UInt,
    stream: UnsafeMutablePointer&amp;lt;FILE&amp;gt;
) -&amp;gt; Int
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It returns the number if characters it finds.&lt;/p&gt;
&lt;p&gt;We now can open a file, read and print its content line by line, and close it
with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;func fclose(stream: UnsafeMutablePointer&amp;lt;FILE&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Repeat this on each file specified in &lt;code&gt;Process.arguments&lt;/code&gt;, or simply read from
&lt;code&gt;stdin&lt;/code&gt;, and we have a &lt;code&gt;cat&lt;/code&gt;! Here&#x27;s a screenshot of it displaying its own
code:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2015/07/swift-cat.png&quot; alt=&quot;Swift cat&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The code is also available in this &lt;a href=&quot;https://gist.github.com/dduan/f6d359019db8b0b55962&quot;&gt;gist&lt;/a&gt;.&lt;/p&gt;
</description>
                <pubDate>Sat, 04 Jul 2015 20:56:19 -0700</pubDate>
                <link>https://duan.ca/2015/07/04/lets-build-a-cat-in-swift-2/</link>
                <guid isPermaLink="true">https://duan.ca/2015/07/04/lets-build-a-cat-in-swift-2/</guid>
            </item>
            <item>
                <title>Swift Function Fun Facts</title>
                <description>&lt;p&gt;You love Swift. You want to write a class that does HTTP, it might have
methods like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;func get(URLString:String, params:[String:AnyObject],
    headers:[String:String])
func post(URLString:String, params:[String:AnyObject],
    headers:[String:String])
func put(URLString:String, params:[String:AnyObject],
    headers:[String:String])
// and more for HEAD, OPTIONS …

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But you don&#x27;t want to force your user to supply all arguments each time. You
know that Swift supports default arguments, so you added some. Take GET as an
example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;func get(URLString:String, params:[String:AnyObject]=[:],
    headers:[String:String]=[:])

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now users can do things like&lt;/p&gt;
&lt;p&gt;{% highlight swift %}
get(&amp;quot;http://github.com&amp;quot;)
get(&amp;quot;http://httpbin.org/get&amp;quot;, headers:[&amp;quot;Answer&amp;quot;:42])
{% endhighlight %}&lt;/p&gt;
&lt;p&gt;That&#x27;s flexible! Woohoo!&lt;/p&gt;
&lt;p&gt;After you thought about implementing these, though, you realize that
&lt;code&gt;HTTPMethod&lt;/code&gt; is merely a property on &lt;code&gt;NSURLRequest&lt;/code&gt;. In other words, all of
the previous methods can share the same implementation. In honor of the DRY
principle, you write a function that accepts the method as an arguments and
the previous functions each forwards the arguments to this function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;func impl(method:String, URLString:String,
    params:[String:AnyObject],
    headers:[String:String])
{
    // …
}

func get(URLString:String, params:[String:AnyObject]=[:],
    headers:[String:String]=[:])
{
    impl(&amp;quot;GET&amp;quot;, URLString:URLString, params:params,
        headers:headers)
}

func post(URLString:String, params:[String:AnyObject]=[:],
    headers:[String:String]=[:])
{
    impl(&amp;quot;POST&amp;quot;, URLString:URLString, params:params,
        headers:headers)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This seems like a sensible solution. Except that later you realize that there
needs to be more parameters for each function, so in the end, each function
looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;func post(
    URLString             : String,
    params                : [String:AnyObject]       = [:],
    json                  : [String:AnyObject]?      = nil,
    headers               : [String:AnyObject]       = [:],
    auth                  : (String,String)?         = nil,
    allowRedirects        : Bool                     = true,
    requestBody           : NSData?                  = nil,
    URLQuery              : String?                  = nil,
    asyncCompletionHandler: ((HTTPResult!) -&amp;gt; Void)? = nil
    ) -&amp;gt; HTTPResult {
    return impl(
        &amp;quot;POST&amp;quot;,
        URLString             : URLString,
        params                : params,
        json                  : json,
        headers               : headers,
        auth                  : auth,
        data                  : requestBody,
        URLQuery              : URLQuery,
        redirects             : allowRedirects,
        asyncCompletionHandler: asyncCompletionHandler
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remembering that your goal is to respect DRY, and there are now giant blocks
of code that all look the same except that first argument to &lt;code&gt;impl()&lt;/code&gt;, you
became determined to find a better alternative.&lt;/p&gt;
&lt;p&gt;Well, why not give currying a try? This example of currying with Swift comes
to your mind:&lt;/p&gt;
&lt;p&gt;{% highlight swift %}
func add(a:Int)(b:Int) -&amp;gt; Int { return a + b }
let add3 = add(3)
add3(b:2) // 5
{% endhighlight %}&lt;/p&gt;
&lt;p&gt;If we apply this technique and treat &lt;code&gt;method&lt;/code&gt; in &lt;code&gt;impl()&lt;/code&gt; as &lt;code&gt;a&lt;/code&gt; in the
example, we would get:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;func impl(method:String)(
    URLString:String,
    params:[String:AnyObject],
    headers:[String:String],
    …)
{
    // …
}
let get = impl(&amp;quot;GET&amp;quot;)
let post = impl(&amp;quot;POST&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;right?  However, you are forcing users to supply each argument again. To make
things worse, the number of arguments is a lot larger.&lt;/p&gt;
&lt;p&gt;Hmm, but that&#x27;s a solved problem, just add default values to &lt;code&gt;impl()&lt;/code&gt;&#x27;s
parameters:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;func impl(method:String)(
    URLString:String,
    params:[String:AnyObject] = [:],
    headers:[String:String] = [:],
    …)
{
    // …
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ta-da! Wait a minute, Xcode now refuse to compile you code! &lt;code&gt;Default argument is only permitted for a non-curried function parameter&lt;/code&gt;, it saids.&lt;/p&gt;
&lt;p&gt;Stubborn as you are, you decide that perhaps the Swift team hasn&#x27;t got around
to implementing this feature for curry syntax yet. Functions are first-class
citizens! Surely if you return a function with default arguments…?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;func methodFactory(method:String)
    -&amp;gt; (params:[String:AnyObject] = [:],
        headers:[String:String] = [:], …)
    -&amp;gt; Void
{
    return {(params, headers, …) in
        impl(method, params:params, headers:headers, …)
    }
}

let get = methodFactory(&amp;quot;GET&amp;quot;)
let post = methodFactory(&amp;quot;POST&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Turns out, this manual form of currying only works when default arguments
aren&#x27;t involved!&lt;/p&gt;
&lt;p&gt;Now, you hate Swift.&lt;/p&gt;
&lt;p&gt;(Just to be clear, I don&#x27;t really hate Swift as in, uh, &lt;em&gt;hate&lt;/em&gt; Swift. Judgning
from some comments, I might have failed to convey the lightheartedness that
I felt writing this up. It&#x27;s really like saying to a friend &amp;quot;I hate you&amp;quot; after
he/she pulls a prank on you.)&lt;/p&gt;
</description>
                <pubDate>Sat, 18 Apr 2015 16:20:16 -0700</pubDate>
                <link>https://duan.ca/2015/04/18/swift-function-fun-facts/</link>
                <guid isPermaLink="true">https://duan.ca/2015/04/18/swift-function-fun-facts/</guid>
            </item>
            <item>
                <title>Keep Git Social</title>
                <description>&lt;p&gt;&lt;em&gt;A project I&#x27;m working on uses &lt;a href=&quot;http://gitlabhq.com&quot;&gt;GitlabHQ&lt;/a&gt;, I think it is a cool open source
project and the developers are doing an excellent job of making a sweet web
interface for Git projects. However, as I found out today, &lt;a href=&quot;https://github.com/gitlabhq/gitlabhq/issues/1298&quot; title=&quot;Gitlab Issue: Closed&quot;&gt;my one issue&lt;/a&gt;
with it was closed without fixing. And that&#x27;s what finally propelled me to
writing this airticle.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Do you know, the Linux kernel is broken by hundreds of commited patches
everyday?&lt;/p&gt;
&lt;p&gt;That, of course, is a trick question. Yes, &lt;em&gt;technically&lt;/em&gt;, hundreds (if not
thousands) of patches were commited to &lt;em&gt;a&lt;/em&gt; git repository of the Linux kernel
that isn&#x27;t different in anyway from &lt;em&gt;the&lt;/em&gt; repository. What makes the
repository &amp;quot;conanical&amp;quot; is the fact that Linus Torvalds owns it. If the world
lost access to his hard drive because Linus was hit by a bus (I would never
wish this to happen) today, all the Linux community need to do is figure out
who is next BDFL. Then his/hers would become &lt;em&gt;the&lt;/em&gt; Linux repository.&lt;/p&gt;
&lt;p&gt;In other words, what makes the difference is purely social.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Not trying to fit the social structure of a software project into a
repository is the biggest strength of git.&lt;/strong&gt; This is why I frown everytime
I see a discussion about locking down branches of a Git repository.&lt;/p&gt;
&lt;p&gt;Making developers &amp;quot;own&amp;quot; branches on a shared repository is a pratice
inheritated from the days of centralized version control. Git doesn&#x27;t provide
built-in support for this, for good reasons.&lt;/p&gt;
&lt;p&gt;With Subversion, the ultimate goal of branch-wise access control is to keep
out
bad changes made by developers while give them the benefits of version
control, namely:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;provide a backup of the change history&lt;/li&gt;
&lt;li&gt;let others to follow his/her progress so that they can contribute via
patches or collaborate if they have write access.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With Git, these are easily achieved by a personal repository read-accessible
for the team.&lt;/p&gt;
&lt;p&gt;Meanwhile, write access is granted at the repository level, but only to very
few or, more preferably, one person. This is possible because each team member
can have and only push to his/her own repositories. No change made by others
will make their way to the &amp;quot;conanical&amp;quot; repository unless its owner(s) activaly
pulls them in. Bad changes therefore is kept out.&lt;/p&gt;
&lt;p&gt;Additionally, Git has &lt;a href=&quot;http://git-scm.com/book/en/Git-Branching&quot;&gt;features&lt;/a&gt; flexible enough to support all kinds of
&lt;a href=&quot;http://nvie.com/posts/a-successful-git-branching-model&quot;&gt;development process&lt;/a&gt;es, partially because its branches, by design, are not
responsible for enforcing access permissions.&lt;/p&gt;
&lt;p&gt;Consider developer John working on a shared git repository with locked
branches: where would he push his temporary branch to for backup, if he can
only write to &lt;code&gt;feature42&lt;/code&gt; and &lt;code&gt;johns_branch&lt;/code&gt;? How does he get
&lt;code&gt;emergency_bugfix_14159&lt;/code&gt; pair reviewed at 4am? If he uses his own repo for
those, does it mean he has to force the whole team to know about it?  How does
it affect work when a &lt;code&gt;git branch --all&lt;/code&gt; produces a phone book?&lt;/p&gt;
&lt;p&gt;Break Git&#x27;s design gets you no where nice.&lt;/p&gt;
&lt;p&gt;And no, Git&#x27;s social model doesn&#x27;t add work to the owner of the &amp;quot;official&amp;quot;
repository. Afterall, Git was designed with he linux kernel in mind!  Linus
himself explains it the best (summary provided below):&lt;/p&gt;
&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe src=&quot;http://www.youtube.com/embed/4XpnKHJAok8&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;In short, Linus only review pull requests from a few &amp;quot;lieutenants&amp;quot; he trusts,
and they each follow the same process with their trusted few.  And the pyramid
trickles all the way down. Here agian, Git solves a problem by getting out of
the way of the project&#x27;s social stucture, instead of trying to encapsulate it.&lt;/p&gt;
&lt;p&gt;Git was the first version control system I&#x27;ve ever used starting in 2008.
I&#x27;ve since gradually realized that not everyone is lucky like me, in the sense
that svn has been working just fine for a lot of people. When their project
switches to Git, emulating the svn/old workflow with functionality provided by
projects like &lt;code&gt;gitolite&lt;/code&gt; is only natural. But if you are one of them, and want
more creativity from your team, perhaps embracing the social aspect of Git by
breaking the shackles on their hand is a good thing to try.&lt;/p&gt;
</description>
                <pubDate>Wed, 31 Oct 2012 10:02:30 -0600</pubDate>
                <link>https://duan.ca/2012/10/31/keep-git-social/</link>
                <guid isPermaLink="true">https://duan.ca/2012/10/31/keep-git-social/</guid>
            </item>
    </channel>
</rss>