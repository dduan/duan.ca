<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Daniel Duan's Articles About CLI</title>
        <link>https://duan.ca/tag/cli/</link>
        <atom:link href="https://duan.ca/tag/cli/feed.xml" rel="self" type="application/rss+xml" />
            <item>
                <title>Introducing Dye</title>
                <description>&lt;p&gt;&lt;em&gt;Recently, I got a PC. And I started writing some code on Windows for the
giggles. Naturally, I gravitate towards stuff I use on macOS and Linux when it
comes to tooling. To my delight, NeoVim, ripgrep and fzf all work out of the box
in terminal simulators, which brings us to todays main topic...&lt;&#x2f;em&gt;&lt;&#x2f;p&gt;
&lt;p&gt;I made a terminal coloring library for Swift that works on Windows,
&lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;Dye&#x2f;releases&#x2f;tag&#x2f;0.0.1&quot;&gt;Dye 0.0.1 is available now&lt;&#x2f;a&gt;!&lt;&#x2f;p&gt;
&lt;h2&gt;So, why?&lt;&#x2f;h2&gt;
&lt;p&gt;When I started working on &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;tre&quot;&gt;tre&lt;&#x2f;a&gt;, I search in the
Rust ecosystem for a CLI interface library that supports as many platforms as
possible. Eventually I found &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;BurntSushi&#x2f;termcolor&quot;&gt;termcolor&lt;&#x2f;a&gt; among an ocean of options. As
a result, tre, like a lot of other CLI tools (like rg) written in Rust, has
a consistent UI on Windows and Unix. This experience has brought lots of joy, as
a user of both the library, and the app. I want to pay it forward to my fellow
Swift CLI makers, and their users.&lt;&#x2f;p&gt;
&lt;p&gt;Zooming out slightly, success of Swift on Windows makes Swift as a skill more
valuable. And &lt;a href=&quot;https:&#x2f;&#x2f;duan.ca&#x2f;2019&#x2f;01&#x2f;20&#x2f;kick-ass-cli-tools-in-swift&#x2f;&quot;&gt;I want more CLI tools written in Swift&lt;&#x2f;a&gt;. So it&#x27;s
a double-win, really.&lt;&#x2f;p&gt;
&lt;p&gt;Lastly, it&#x27;s a small library, all things considered. Being able to get it to
a shippable state on a weekend is a key reason I decided to work on it.&lt;&#x2f;p&gt;
&lt;h2&gt;Technical tidbits&lt;&#x2f;h2&gt;
&lt;p&gt;I love Max Howell&#x27;s &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;mxcl&#x2f;Chalk&quot;&gt;Chalk&lt;&#x2f;a&gt; library. It&#x27;s a 100-line Swift file that
implements &lt;a href=&quot;https:&#x2f;&#x2f;en.wikipedia.org&#x2f;wiki&#x2f;ANSI_escape_code&quot;&gt;ANSI escape code&lt;&#x2f;a&gt; with Swift&#x27;s custom string interpolation
API. It demonstrates well how simple it is to customize your terminal output.&lt;&#x2f;p&gt;
&lt;p&gt;Enter Windows, where ANSI sequences are ignored by built-in terminal simulators
from the past. The console is customized via a entirely separate, stateful,
imperative APIs (Newer simulators such as the freshly released &lt;a href=&quot;&quot;&gt;Terminal&lt;&#x2f;a&gt;
actually supports ANSI codes pretty well). This is our lowest common API
denominator, which ultimately dictated the design of Dye.&lt;&#x2f;p&gt;
&lt;p&gt;Dye&#x27;s API is centered around Swift&#x27;s built-in protocol &lt;code&gt;TextOutputStream&lt;&#x2f;code&gt;. You
create a stream object and mutate the style need for upcoming output:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let output = OutputStream.standardOutput()
output.color.foreground = .blue
print(&amp;quot;blue text&amp;quot;, to &amp;amp;stream) &#x2f;&#x2f; blue text is blue
&lt;&#x2f;code&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;If the stream is redirected to something other than the terminal, styling gets
automatically disabled. There are various options to customize this behavior.&lt;&#x2f;p&gt;
&lt;p&gt;Take a look at this &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;Dye&#x2f;blob&#x2f;master&#x2f;Examples&#x2f;main.swift&quot;&gt;sample app&lt;&#x2f;a&gt; to get a more concrete picture of
how things work.&lt;&#x2f;p&gt;
&lt;hr &#x2f;&gt;
&lt;p&gt;I&#x27;ll end with a screenshot of the sample app running in Command Prompt:&lt;&#x2f;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2f;assets&#x2f;2020&#x2f;06&#x2f;01&#x2f;windows-example-screenshot.jpg&quot; alt=&quot;Dye sample app running in Windows Command Prompt&quot; &#x2f;&gt;&lt;&#x2f;p&gt;
&lt;p&gt;Let&#x27;s build more.&lt;&#x2f;p&gt;
</description>
                <pubDate>Mon, 01 Jun 2020 15:08:01 -0700</pubDate>
                <link>https://duan.ca/2020/06/01/dye/</link>
                <guid isPermaLink="true">https://duan.ca/2020/06/01/dye/</guid>
            </item>
            <item>
                <title>Kick-ass CLI Tools In Swift</title>
                <description>&lt;p&gt;As someone who lives in a terminal simulator, I&#x27;m pleasantly surprised by the
new toys we get in recent years such as &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;junegunn&#x2f;fzf&quot;&gt;fzf&lt;&#x2f;a&gt;, &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;BurntSushi&#x2f;ripgrep&quot;&gt;ripgrep&lt;&#x2f;a&gt;, &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;sharkdp&#x2f;fd&quot;&gt;fd&lt;&#x2f;a&gt;, etc.
A great number of these are written in relatively young programming languages
such as Go and Rust. But, noticibly, none of them are written in Swift.&lt;&#x2f;p&gt;
&lt;p&gt;In this post, I&#x27;ll try to explain why that is.&lt;&#x2f;p&gt;
&lt;h2&gt;POSIX Ergonomics&lt;&#x2f;h2&gt;
&lt;p&gt;Unix-like virtual file systems has been around for decades. API that manupulates
such systems has standardized a long time ago and exists in most computers
running Linux&#x2f;BSD&#x2f;macOS today (and, to a large extend, smart phones). To Swift
users, Using these APIs is straight-forward (&lt;code&gt;rmdir(&amp;quot;path&#x2f;to&#x2f;dir&amp;quot;)&lt;&#x2f;code&gt;).&lt;&#x2f;p&gt;
&lt;p&gt;So Swift programmers are all happy campers (re-)inventeing all sorts of file
system utilities, right?&lt;&#x2f;p&gt;
&lt;p&gt;Well, not quite.&lt;&#x2f;p&gt;
&lt;p&gt;Okay, I lied about POSIX APIs being &amp;quot;straight-forward&amp;quot; in Swift. Or rather, this
is very subjective.&lt;&#x2f;p&gt;
&lt;p&gt;Continuing with the &lt;code&gt;rmdir&lt;&#x2f;code&gt; example, we must first import it from either &lt;code&gt;Glibc&lt;&#x2f;code&gt;
or &lt;code&gt;Darwin&lt;&#x2f;code&gt;, depending on your OS. To know whether the operation is successful,
we need to see whether it returned integer 0. To learn &lt;em&gt;why&lt;&#x2f;em&gt; 0 was not returned,
we need to read the &amp;quot;magical&amp;quot; variable &lt;code&gt;errno&lt;&#x2f;code&gt;. &lt;code&gt;errno&lt;&#x2f;code&gt; could be written to by
other APIs so we&#x27;d better capture it in timeâ€¦&lt;&#x2f;p&gt;
&lt;p&gt;And that&#x27;s one of the simpler APIs in POSIX calls!&lt;&#x2f;p&gt;
&lt;p&gt;Programmers whine about ergonomics partially because we are previlidged and
spoiled. But mostly because our attention is a limited resources. Mixing API
conventions distracts us from solving the problem at hand. Bad ergonomics,
therefore, drives away a good potion of users who cares about quality of their
tools.&lt;&#x2f;p&gt;
&lt;h2&gt;Culture and History&lt;&#x2f;h2&gt;
&lt;p&gt;As of this writing, the release of Swift 5 is imminent. The vast majority of
existing Swift code is written to run on iOS. The concept of a file, or the
traditional virtal file system, is hidden to iOS users, and sandboxed for
developers. I bet most Swift users rarely think about the fact that there&#x27;s
a entire set of POSIX API at their disposal.&lt;&#x2f;p&gt;
&lt;p&gt;&lt;code&gt;Foundation&lt;&#x2f;code&gt; alleviates the need to deal with files and directories: &lt;code&gt;Bundle&lt;&#x2f;code&gt;
locates the files; &lt;code&gt;CoreData&lt;&#x2f;code&gt;, &lt;code&gt;UserDefaults&lt;&#x2f;code&gt; or the keychain is your primary
way to persist data; &lt;code&gt;Data&lt;&#x2f;code&gt;, &lt;code&gt;String&lt;&#x2f;code&gt; or &lt;code&gt;NSCoding&lt;&#x2f;code&gt; has methods to read and
write to files.  And finally, if you really need to deal with files,
&lt;code&gt;NSFileManager&lt;&#x2f;code&gt; has everything you&#x27;ll ever need.&lt;&#x2f;p&gt;
&lt;p&gt;Why would a productive Swift programmer think about POSIX in this environment?
Why would a tutor teach POSIX over the useful&#x2f;practical&#x2f;&amp;quot;native&amp;quot; alternatives?&lt;&#x2f;p&gt;
&lt;p&gt;We can trace &amp;quot;riding on the Apple platform&amp;quot; mentality back to the pre-iPhone
days, where a very small Mac developer community labors on on a niche platform
(compared to iOS today) and they &lt;em&gt;loved&lt;&#x2f;em&gt; it. However, I&#x27;m sure they used more
POSIX stuff back then than the average iOS developers today.&lt;&#x2f;p&gt;
&lt;p&gt;Having a great library such as Foundation on the most popular developer
platform where the language thrives means it&#x27;ll take longer for &amp;quot;subcultures&amp;quot;
to emerge, if they do at all.&lt;&#x2f;p&gt;
&lt;h2&gt;The Standard Library And Its Influence on New Users&lt;&#x2f;h2&gt;
&lt;p&gt;File system APIs being in &lt;code&gt;Foundation&lt;&#x2f;code&gt; as opposed to the standard library is
probably a temporary condition. Nevertheless, it has at least the following
implications:&lt;&#x2f;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Its quality of implementation is not held on the same standard that those
APIs in the standard library. This is especially true for the separate,
open-source &lt;code&gt;Foundation&lt;&#x2f;code&gt; implementation. Getting consistent and correct
behaviors across macOS and Linux is hard.&lt;&#x2f;p&gt;
&lt;&#x2f;li&gt;
&lt;li&gt;
&lt;p&gt;A person learning Swift won&#x27;t explore the language with a file system API.
This I suspect, is &lt;strong&gt;the most important reason many of these great CLI
utilites are written in other programming languages&lt;&#x2f;strong&gt;. Programmers seek
instant gratification when they learn. And they usually stay in a limited
domain (like iOS) at first. This is where the built-in library is special: no
matter which domain is chosen, it&#x27;s always available. Languages such as Go
and Rust include things like paths and files in their built-in library.
Playing with these APIs while learning the lanugage plants a seed for future,
serious, projects. There are less users of these languages compared to Swift,
but there are more people thinking about projects that involves file systems
in thoes communities. (Note I don&#x27;t have statistics here, just a guess.)&lt;&#x2f;p&gt;
&lt;&#x2f;li&gt;
&lt;&#x2f;ol&gt;
&lt;h2&gt;Conclusion&lt;&#x2f;h2&gt;
&lt;p&gt;The next killer CLI tool is still more likely to be written in Go or Rust,
than in Swift. Hopefully, somewhere in these speculations is a true cause of
this phenomena. Maybe someone reading this will be inspired to accelerate change
that will eventually revert the condition. (I&#x27;m &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;Pathos&quot;&gt;trying&lt;&#x2f;a&gt;).&lt;&#x2f;p&gt;
</description>
                <pubDate>Sun, 20 Jan 2019 16:09:38 -0800</pubDate>
                <link>https://duan.ca/2019/01/20/kick-ass-cli-tools-in-swift/</link>
                <guid isPermaLink="true">https://duan.ca/2019/01/20/kick-ass-cli-tools-in-swift/</guid>
            </item>
    </channel>
</rss>