<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Daniel Duan's Articles About Foundation</title>
        <link>https://duan.ca/tag/foundation/</link>
        <atom:link href="https://duan.ca/tag/foundation/feed.xml" rel="self" type="application/rss+xml" />
            <item>
                <title>A Tale of Two Dates</title>
                <description>&lt;p&gt;Recently, I discovered a curious thing about &lt;code&gt;Date&lt;/code&gt;s in two large projects
I work on. Simply put, both projects receives, from various HTTP endpoints, the
same object component: a timestamp, and a duration. Combining these two pieces,
both projects derives two &lt;code&gt;Foundation.Date&lt;/code&gt;s to represent a time range. So far,
so good.&lt;/p&gt;
&lt;p&gt;However, project &lt;code&gt;A&lt;/code&gt; uses &lt;code&gt;Fonudation.DateInterval&lt;/code&gt; to represent this concept,
while project &lt;code&gt;B&lt;/code&gt; uses &lt;code&gt;Range&amp;lt;Date&amp;gt;&lt;/code&gt;. But why? Why represent the same component
differently? What a gigantic waste of brain power for everyone on both projects!&lt;/p&gt;
&lt;p&gt;So I set out to unify this thing. Wherever a &lt;code&gt;Range&lt;/code&gt; literal is used, I swap in
&lt;code&gt;DateInterval.init(start:end:)&lt;/code&gt;; &lt;code&gt;Range.lowerBound&lt;/code&gt; becomes
&lt;code&gt;DateInterval.start&lt;/code&gt;; &lt;code&gt;Range.upperBound&lt;/code&gt; becomes &lt;code&gt;DateInterval.end&lt;/code&gt;, etc. It
didn&#x27;t take long to complete the conversion to &lt;code&gt;DateInterval&lt;/code&gt; in project &lt;code&gt;B&lt;/code&gt;,
now it builds and runs!&lt;/p&gt;
&lt;p&gt;Oh, wait, why are some tests failing in project &lt;code&gt;B&lt;/code&gt;? Shouldn&#x27;t this just be an
mechanical change?&lt;/p&gt;
&lt;p&gt;I spent time investigating. The failing tests are for some very specific
business logic that I&#x27;m not familiar with. So things took a while to become
clear. What felt like a long time later, I realized my mistake.&lt;/p&gt;
&lt;p&gt;(I&#x27;m sorry if this has been obvious to you. You are a better Swift programmer!)&lt;/p&gt;
&lt;p&gt;Somewhere in project &lt;code&gt;B&lt;/code&gt; is the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Item {
    let range: Range&amp;lt;Date&amp;gt;
}

struct Container {
    let items: [Item]
}

func containerFactory(range: Range&amp;lt;Date&amp;gt;, items: [Item]) -&amp;gt; Container {
    /// pretend there&#x27;s more code here

    return Conatiner(items: items.filter { $0.range.contains(range.lowerBound) })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And of course, after my &amp;quot;refactor&amp;quot;, it became&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct Item {
    let range: DateInterval
}

struct Container {
    let items: [Item]
}

func containerFactory(range: DateInterval, items: [Item]) -&amp;gt; Container {
    /// pretend there&#x27;s more code here

    return Conatiner(items: items.filter { $0.range.contains(range.start) })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tests for &lt;code&gt;containerFactory&lt;/code&gt; failed. And here&#x27;s why: &lt;strong&gt;&lt;code&gt;DateInterval.contains&lt;/code&gt;
is inclusive for its upper bound (&lt;code&gt;.end&lt;/code&gt;), whereas &lt;code&gt;Range.contains&lt;/code&gt; isn&#x27;t!&lt;/strong&gt; You
can see it plainly by running the following&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;import Foundation

let sooner = Date(timeIntervalSince1970: 0)
let later = sooner.addingTimeInterval(1000)

DateInterval(start: sooner, end: later).contains(later) // true
(sooner..&amp;lt;later).contains(later)                        // false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So here&#x27;s what stumped me:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The 2 projects chose to interpret the same component differently, which
I didn&#x27;t not expect.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I didn&#x27;t know how &lt;code&gt;Foundation.DateInterval&lt;/code&gt; works.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Well, today I learned.&lt;/p&gt;
</description>
                <pubDate>Sat, 25 Aug 2018 17:11:43 -0700</pubDate>
                <link>https://duan.ca/2018/08/25/a-tale-of-two-dates/</link>
                <guid isPermaLink="true">https://duan.ca/2018/08/25/a-tale-of-two-dates/</guid>
            </item>
            <item>
                <title>Supporting Foundation.Data Without Depending On It</title>
                <description>&lt;p&gt;While implementing some file I/O APIs in &lt;a href=&quot;https://github.com/dduan/Pathos&quot;&gt;Pathos&lt;/a&gt;, I decided reading/writing
file content as &lt;code&gt;Foundation.Data&lt;/code&gt; is kind of important (can you blame me?). But
Pathos, by accident, does not depend on Swift &lt;code&gt;Foundation&lt;/code&gt;. Now what?&lt;/p&gt;
&lt;p&gt;After browsing the &lt;a href=&quot;https://developer.apple.com/documentation/foundation/data&quot;&gt;documentation&lt;/a&gt;, a pretty good solution emerged: &lt;code&gt;Data&lt;/code&gt; is
a sequence of bytes! Lets say we hand our users some bytes, they can easily
construct a &lt;code&gt;Data&lt;/code&gt; from it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;let content: [UInt8] = try readBytes(fromPath &amp;quot;/tmp/test&amp;quot;)
Data(bytes: content)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Okay, so this built-in initializer makes &lt;code&gt;[UInt8]&lt;/code&gt; an acceptable substitute for
returning &lt;code&gt;Data&lt;/code&gt;. What can we do about about &lt;code&gt;Data&lt;/code&gt; as input? Well, turns out,
&lt;code&gt;Data&lt;/code&gt; is a &lt;code&gt;Collection&lt;/code&gt; of &lt;code&gt;UInt8&lt;/code&gt;s! So we can accept &lt;code&gt;Data&lt;/code&gt; indirectly like
so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;func write&amp;lt;Bytes&amp;gt;(_ bytes: Bytes)
    where Bytes: Collection, Bytes.Element == UInt8
{
    // blah
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;User can pass in a &lt;code&gt;Data&lt;/code&gt; as argument and it just worksâ„¢.&lt;/p&gt;
&lt;p&gt;The only disadvantage of supporting &lt;code&gt;Data&lt;/code&gt; in these ways is that it requires
your user to discover it either via your excellent documentation, or through
their super good knowledge of &lt;code&gt;Foundation&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update: this could also &lt;a href=&quot;https://mastodon.social/@helge/100573358160444340&quot;&gt;be&lt;/a&gt; &lt;a href=&quot;https://twitter.com/daniel_dunbar/status/1030938273047179264&quot;&gt;slower&lt;/a&gt; than using Data directly. Luckily
I&#x27;m only doing file I/O here.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But this is pretty nice, regardless.&lt;/p&gt;
</description>
                <pubDate>Sat, 18 Aug 2018 11:00:41 -0700</pubDate>
                <link>https://duan.ca/2018/08/18/supporting-data-without-depending-on-it/</link>
                <guid isPermaLink="true">https://duan.ca/2018/08/18/supporting-data-without-depending-on-it/</guid>
            </item>
            <item>
                <title>Contributing To Open-Source Swift</title>
                <description>&lt;p&gt;I discover, report, fix and merge a bug in the open-source Foundation project. And why, yes, on YouTube.&lt;/p&gt;
&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/rwuj80W8TtI&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Pull request: &lt;a href=&quot;https://github.com/apple/swift-corelibs-foundation/pull/1376&quot;&gt;https://github.com/apple/swift-corelibs-foundation/pull/1376&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SR-6647: &lt;a href=&quot;https://bugs.swift.org/browse/SR-6647&quot;&gt;https://bugs.swift.org/browse/SR-6647&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Sat, 23 Dec 2017 13:21:10 -0800</pubDate>
                <link>https://duan.ca/2017/12/23/contributing-to-open-source-foundation/</link>
                <guid isPermaLink="true">https://duan.ca/2017/12/23/contributing-to-open-source-foundation/</guid>
            </item>
    </channel>
</rss>