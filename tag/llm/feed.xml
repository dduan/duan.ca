<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Daniel Duan's Articles About LLM</title>
        <link>https://duan.ca/tag/llm/</link>
        <atom:link href="https://duan.ca/tag/llm/feed.xml" rel="self" type="application/rss+xml" />
            <item>
                <title>AI Coding</title>
                <description>&lt;p&gt;I tried out GitHub Copilot this weekend. I&#x27;ve &lt;a href=&quot;/2023/03/03/qualia-that-was-coding/&quot;&gt;been thinking&lt;/a&gt;, and talking, about AI like your average technology person. So here we are: what&#x27;s my reaction to LLMs getting better and better at coding?&lt;/p&gt;
&lt;p&gt;LLMs are great at information retrieval. Copilot or GPT read a lot of code from GitHub, StackOverflow, Reddit, etc. And now, given some context (code in the file I&#x27;m editing, its surrounding project info, etc), it can &lt;em&gt;retrieve&lt;/em&gt;, by probability, the best snippet of code that could come next. I posted this example on social media recently:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Me: imports my own file system library Pathos (first time in this code base). Types name of computed property using it.&lt;/p&gt;
&lt;p&gt;Copilot: suggests an implementation that uses the library, slightly incorrectly.&lt;/p&gt;
&lt;p&gt;Me: Accepts suggestion, fixes error.&lt;/p&gt;
&lt;p&gt;Me: Types in name of second computed property.&lt;/p&gt;
&lt;p&gt;Copilot: suggests correct implementation using different parts of my library.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fantastic! I&#x27;d like to think that the open-source code I put on GitHub made some small contribution to this specfic interarction of programming in Swift. If this is true, then I&#x27;ve contributed to everyone who is going to use Copilot to write Swift. So did everyone who posted their questions, answers, examples, musings, tests, libraries, apps ... about Swift on the internet. Copilot is the child of our collective labor. Before these LLM programming tools, we didn&#x27;t interact. Now, we have a hive mind.&lt;/p&gt;
&lt;p&gt;Will LLMs take our jobs?&lt;/p&gt;
&lt;p&gt;I can&#x27;t wait for that to happen. But, so far, I just don&#x27;t see it. Programming is, barely, superfacially, about information retrieval. When it is, it&#x27;s usually in the context of studying, training, interviewing, or some type of product grind. Sure, that covers a lot of of reason for writing code. BUT, here&#x27;s the thing: I hate writing code for all of those reasons. If you had some time working in tech, you&#x27;d have heard the saying along the lines of &amp;quot;programmer should try their best to replace themselves&amp;quot;. This is partially about working with people around you, but it also serves as a lens to evaluate programming tasks: if you are doing simple things over and over again, it means you are stuck at a place of stagnation. You are not growing, and probably not creating as much values as you &lt;em&gt;deserve&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;LLMs are going to replace some of the things we do as programmers. The parts that are boring, repetitive, stagnating. Will some people lose their jobs because of it? Maybe. At first, these will be, for the sake of simplicity, &amp;quot;low-level&amp;quot; jobs (I&#x27;m going to deliberatly leave &amp;quot;low-level&amp;quot; undefined here). For those who get to stay, however, our lives are going to become more fun and creative. Why yes, I included myself in this group because I&#x27;m &lt;a href=&quot;https://en.wikipedia.org/wiki/Egocentric_bias&quot;&gt;egocentrically biased&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let&#x27;s say I&#x27;m wrong, these AI models, very quickly, grew super capable, to such degree that it&#x27;s no longer commercially viable to hire humans for programming tasks. Well, it would be a kick in the butt for me to have to find a new career. But a kick in the butt is often the right thing to move us along in life, yes? When your comfort zone comes with a biweekly paycheck, it&#x27;s extra hard to grow outside of it. But I should love to live in the post-progammer world as a software &lt;em&gt;user&lt;/em&gt;. Chances are, there&#x27;d be less bugs?&lt;/p&gt;
&lt;p&gt;Anyways, this has been my super unscientific, totally biased, very personal musings about AI this week.&lt;/p&gt;
</description>
                <pubDate>Mon, 27 Mar 2023 20:10:14 -0700</pubDate>
                <link>https://duan.ca/2023/03/27/ai-coding/</link>
                <guid isPermaLink="true">https://duan.ca/2023/03/27/ai-coding/</guid>
            </item>
            <item>
                <title>The Qualia that was Coding</title>
                <description>&lt;p&gt;As of this writing, I&#x27;m deeply skeptical of LLM replacing our needs for skilled programmers. Problem solving is a creative process. When a new tool takes away the repetitive part of a job, the worker can focus more on being creative.&lt;/p&gt;
&lt;p&gt;However, if one believes that LLM, or some alternative models, will bring about the end of programming as a wide-spread human activity, then we&#x27;ll have a problem (well, probably a few problems) at hand.&lt;/p&gt;
&lt;p&gt;Programming is a lonely activity. Yes, let&#x27;s acknowledge the existence of peer programming, code reviews, design meetings, etc. But the deep work -- exploring the problem space, grappling with known/unknown constraints, iterating on the designâ€¦ these things happen in the programmer&#x27;s own head. When the satisfying answer emerges in the end, so many paths has been traveled that the traveler can&#x27;t even retread them in themselves, let alone sharing it with others. This is blatantly obvious to anyone who&#x27;s accomplished non-trivial programming tasks.&lt;/p&gt;
&lt;p&gt;The end of programming means the end of such experience.&lt;/p&gt;
&lt;p&gt;I have no doubt that people will keep writing code even if machines are more capable of doing it wholesale. To what degree would those people share the level of challenges, passion, skill, or, let&#x27;s face it, pain in writing code, I cannot predict. But it seems abundantly clear that, those people would amass to a small fraction of the total number of programmers today.&lt;/p&gt;
&lt;p&gt;If you believe you are the last generation of human programmers, the human experience, the &lt;em&gt;qualia&lt;/em&gt; of programming is yours to lose.&lt;/p&gt;
&lt;p&gt;Does that make sense? When AI models can replace us, we will forget what&#x27;s like to write code without them &lt;em&gt;really&lt;/em&gt; soon. Maybe the literal we, who lived through it won&#x27;t, but future generations may never truly know it. Difficult as it is, it might be worth your time to leave records of what it&#x27;s like to be in the flow state, what it&#x27;s like to feel stuck, what it&#x27;s like to steadily traverse and eliminate alternative theories for a bug, what it&#x27;s like to perform mastery with primitive tools to generate clues, what it&#x27;s like to critic a working prototype, what it&#x27;s like to lay out a suite of tests, what it&#x27;s like to replace a huge amount of code with better, shorter code...&lt;/p&gt;
&lt;p&gt;If God is coming, the least we can do is to give future anthropologist a helping hand, and document what it was like to be a human.&lt;/p&gt;
</description>
                <pubDate>Fri, 03 Mar 2023 23:42:34 -0800</pubDate>
                <link>https://duan.ca/2023/03/03/qualia-that-was-coding/</link>
                <guid isPermaLink="true">https://duan.ca/2023/03/03/qualia-that-was-coding/</guid>
            </item>
    </channel>
</rss>