<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Daniel Duan's Articles About Swift</title>
        <link>https://duan.ca/tag/swift/</link>
        <atom:link href="https://duan.ca/tag/swift/feed.xml" rel="self" type="application/rss+xml" />
            <item>
                <title>Making of a TOML parser</title>
                <description>&lt;p&gt;During the holidays, I spent some time on the parser that underlies &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;TOMDecoder&quot;&gt;TOMLDecoder&lt;&#x2f;a&gt;. The original
implementation targeted TOML&#x27;s spec version 0.5. A few release-candidates for version 1.0 has come
out since then. So it&#x27;s a good time to give this project attention.&lt;&#x2f;p&gt;
&lt;p&gt;Back in the 0.5 days, the TOML spec was (well) written in English with a few examples for each
element in the language. The spec document both:&lt;&#x2f;p&gt;
&lt;ol&gt;
&lt;li&gt;how a TOML document should be spelled out (table header should have a &lt;code&gt;[&lt;&#x2f;code&gt;, followed by 0 or more
whitespace, then, a key, 0 or more whitespace, then &lt;code&gt;]&lt;&#x2f;code&gt;).&lt;&#x2f;li&gt;
&lt;li&gt;rules for detecting conflicts in a syntactically correct document (if &lt;code&gt;a.b&lt;&#x2f;code&gt; is a table, then it&#x27;s
invalid to set its value to be a date in the same document).&lt;&#x2f;li&gt;
&lt;&#x2f;ol&gt;
&lt;p&gt;My memory of hand-rolling a recursive-descent scanner that conforms to both of the above
requirements was unpleasant. My lesser understanding of the markup language, the vagueness for the
validation rules in the spec, as well as (I think?) poorer skill for writing parsers all contributed
to the unpleasantness. TOML has gained an ABNF for its syntax since then, making it less necessary
to reply on the English descriptions. It&#x27;s the holidays, maintaining existing code is hard.&lt;&#x2f;p&gt;
&lt;p&gt;So, I decided to have some fun, and re-write the parser from scratch. The rest of this post contains
notable things from the rewrite.&lt;&#x2f;p&gt;
&lt;p&gt;I translated the ABNF with parser combinators. The recent &lt;a href=&quot;https:&#x2f;&#x2f;pointfree.co&quot;&gt;Pointfree&lt;&#x2f;a&gt; video series made me curious
about the performance of this parsing style in Swift. At the end of the rewrite, I added benchmarks
to find out. Here&#x27;s benchmark for parsing an example TOML document&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;code&gt;name                    time          std        iterations
-----------------------------------------------------------
example-toml.decoder    454840.000 ns ±   3.63 %       3045
example-toml.combinator 422721.500 ns ±   4.28 %       3266
example-toml.scanner     82232.000 ns ±   9.39 %      16793
example-toml.c            5901.000 ns ±  24.72 %     216140
&lt;&#x2f;code&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;&lt;code&gt;example-toml.decoder&lt;&#x2f;code&gt; is time spent on parsing + decoding. &lt;code&gt;example-toml.scanner&lt;&#x2f;code&gt; is the time spent
by the old parser. &lt;code&gt;example-toml.c&lt;&#x2f;code&gt; is the performance of a C library.&lt;&#x2f;p&gt;
&lt;p&gt;So, the new parser is much much slower! However, I know from debugging through 200+ unit tests that,
the new parser fixed a few serious bugs compared to the old. It also conforms to diffs between
version 0.5 and 1.0 of the TOML spec. Speed alone is not good enough of a reason to throw this work
away! There&#x27;s another reason the new parser is superior, but I&#x27;ll talk about it later.&lt;&#x2f;p&gt;
&lt;p&gt;To be fair to parser combinators, I made several decisions that preferred development speed over
runtime speed during development. These were conscious decisions. There were no benchmarks at
time so I didn&#x27;t want to worry about it pre-maturely. Point is, there are rooms for significant
runtime speed improvements. Perhaps I&#x27;ll write a follow-up post detailing my journey to make the
parser go fast later; the C library is part of the benchmark for a reason!&lt;&#x2f;p&gt;
&lt;p&gt;I was also inspired by Joe Groff&#x27;s blog post &lt;a href=&quot;http:&#x2f;&#x2f;duriansoftware.com&#x2f;joe&#x2f;Constructing-human-grade-parsers.html&quot;&gt;Constructing human-grade parsers&lt;&#x2f;a&gt;. Instead of
stopping at the first syntax error, a parser (any parser!) should treat the error as part of its
successful output, deal with the erroneous part of the input, and recover from it. This approach
means the portion of the input after the first error gets parsed, and any error it may contain can
be found and reported, too! Joe&#x27;s post explains this well.&lt;&#x2f;p&gt;
&lt;p&gt;To talk about this further, let&#x27;s dive into some details.&lt;&#x2f;p&gt;
&lt;p&gt;As mentioned earlier, to validate a TOML document, there are rules for both syntax and semantics to
consider. TOML has a few top-level constructs: table header, array-table header, and key-value
pairs. Each of these alone can be validated purely based on syntax. On a high level, a TOML parser
can do the following:&lt;&#x2f;p&gt;
&lt;ol&gt;
&lt;li&gt;parse a list of top-level constructs&lt;&#x2f;li&gt;
&lt;li&gt;iterate over this list, gradually assembly the complete TOML object&lt;&#x2f;li&gt;
&lt;&#x2f;ol&gt;
&lt;p&gt;Errors could exist from each of these two steps To make the parser &lt;em&gt;human-grade&lt;&#x2f;em&gt;, the errors must
not propagate by disrupting the parsing logic. In Swift, this means the code don&#x27;t throw the
(conceptual) errors, instead, the top-level constructs include error as a possible value:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;keyword entity&quot;&gt;enum&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;support class&quot;&gt;TopLevel&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;:&lt;&#x2f;span&gt; &lt;span class=&quot;support class&quot;&gt;Equatable&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
    &lt;span class=&quot;keyword control&quot;&gt;case&lt;&#x2f;span&gt; table(&lt;span class=&quot;support class&quot;&gt;Key&lt;&#x2f;span&gt;)
    &lt;span class=&quot;keyword control&quot;&gt;case&lt;&#x2f;span&gt; arrayTable(&lt;span class=&quot;support class&quot;&gt;Key&lt;&#x2f;span&gt;)
    &lt;span class=&quot;keyword control&quot;&gt;case&lt;&#x2f;span&gt; keyValue(&lt;span class=&quot;support class&quot;&gt;KeyValuePair&lt;&#x2f;span&gt;)
    &lt;span class=&quot;keyword control&quot;&gt;case&lt;&#x2f;span&gt; error(&lt;span class=&quot;support class&quot;&gt;Reason&lt;&#x2f;span&gt;)
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Upon evaluating a &lt;code&gt;TopLevel&lt;&#x2f;code&gt; value, the parser must not stop if it generates a conflict according to
TOML&#x27;s requirement. We take note of this error, and move on to consume the next &lt;code&gt;TopLevel&lt;&#x2f;code&gt;. Errors
from this step will join the error from &lt;code&gt;TopLevel.error&lt;&#x2f;code&gt; at the end for users to see. Therefore, the
second step&#x27;s code roughly does this:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; errors = [&lt;span class=&quot;support class&quot;&gt;Error&lt;&#x2f;span&gt;]()

&lt;span class=&quot;keyword control&quot;&gt;for&lt;&#x2f;span&gt; value &lt;span class=&quot;keyword control&quot;&gt;in&lt;&#x2f;span&gt; topLevelValues {
    &lt;span class=&quot;keyword control&quot;&gt;switch&lt;&#x2f;span&gt; value {
    &lt;span class=&quot;keyword control&quot;&gt;case&lt;&#x2f;span&gt; .&lt;span class=&quot;constant language enum&quot;&gt;error&lt;&#x2f;span&gt;(&lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; reason):
        errors&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;append(reason)
    &lt;span class=&quot;keyword control&quot;&gt;default&lt;&#x2f;span&gt;:
        &lt;span class=&quot;keyword control&quot;&gt;do&lt;&#x2f;span&gt; {
            evaluate(value)
        } &lt;span class=&quot;keyword control&quot;&gt;catch&lt;&#x2f;span&gt; {
            errors&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;append(error)
        }
    }
}

&lt;span class=&quot;keyword control&quot;&gt;if&lt;&#x2f;span&gt; !errors&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;isEmpty {
    &lt;span class=&quot;keyword control&quot;&gt;throw&lt;&#x2f;span&gt; &lt;span class=&quot;support class&quot;&gt;UserFacingError&lt;&#x2f;span&gt;(&lt;span class=&quot;variable parameter&quot;&gt;details&lt;&#x2f;span&gt;: errors)
}

&lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; no error! parsing succeeded&lt;&#x2f;span&gt;
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;This code &amp;quot;synchronizes&amp;quot; the errors from both the syntactical, and semantical level. With some
additional effort to make the errors &lt;code&gt;CustomStringConvertible&lt;&#x2f;code&gt;, a erroneous TOML document such as&lt;&#x2f;p&gt;
&lt;pre&gt;a = &quot;Hello
b = 43
[b]
&lt;&#x2f;pre&gt;
&lt;p&gt;makes the parser generate the following error message:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;code&gt;Deserialization failure:
    * Value |1, 5| Missing closing character `&amp;quot;` in string
    * Conflict |3, 2| Conflicting value at [b] Existing value is 43
&lt;&#x2f;code&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;The explanation I presented above is simplified by a lot. In reality, the &amp;quot;human-grade&amp;quot; upgrade can
go a lot further. For example, if the definition of &lt;code&gt;a&lt;&#x2f;code&gt; has a syntax error, instead of rejecting it,
as long as we can figure out what the intent is, we can pretend it&#x27;s a good value. That way, any
semantic issues related to &lt;code&gt;a&lt;&#x2f;code&gt; can be discovered. Improvements like this can be added to the parser
in many places still.&lt;&#x2f;p&gt;
&lt;p&gt;Anyways, here&#x27;s where I abruptly stop the story of my new TOML parser. There are a lot of exciting
space for improvment. So this article might be a &amp;quot;part 1&amp;quot;. No promises, though.&lt;&#x2f;p&gt;
</description>
                <pubDate>Sun, 03 Jan 2021 14:56:10 -0800</pubDate>
                <link>https://duan.ca/2021/01/03/human-grade-toml-parser-in-swift/</link>
                <guid isPermaLink="true">https://duan.ca/2021/01/03/human-grade-toml-parser-in-swift/</guid>
            </item>
            <item>
                <title>Markra 1.0</title>
                <description>&lt;p&gt;I&#x27;ve never been patient enough to learn the JIRA plain-text syntax, depite being
a frequent user throughout the years. So a while ago I wrote this little utility
that lets me compose JIRA ticket in Markdown. Some thoughts were put into
whether this should be an OSS and free (as in beer) app, or something
I distribute via the Mac App Store. Ultimately, the first option prevailed. So,
without further adiue, here&#x27;s the repo for &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;Markra&quot;&gt;Markra&lt;&#x2f;a&gt; with &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;Markra&#x2f;releases&#x2f;tag&#x2f;1.0&quot;&gt;version 1.0 macOS
app download in the release page&lt;&#x2f;a&gt;.&lt;&#x2f;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2f;assets&#x2f;2020&#x2f;11&#x2f;markra-screenshot.png&quot; alt=&quot;A Marka macOS app screenshot&quot; &#x2f;&gt;&lt;&#x2f;p&gt;
&lt;p&gt;As far as I&#x27;m concerned, the app is pretty much done. And its feature set is
small and self-explanatory. So I don&#x27;t expect more releases other than minor
bug fix in the future.&lt;&#x2f;p&gt;
&lt;p&gt;I hope some find it as useful as I do.&lt;&#x2f;p&gt;
</description>
                <pubDate>Sun, 22 Nov 2020 12:53:52 -0800</pubDate>
                <link>https://duan.ca/2020/11/22/marka/</link>
                <guid isPermaLink="true">https://duan.ca/2020/11/22/marka/</guid>
            </item>
            <item>
                <title>Fantastic Beasts in C and Where To Find Them in Swift</title>
                <description>&lt;p&gt;Swift has a pretty decent C-interoperability story. But C has many features! Today, I&#x27;ll tell you
a story involving a few not-so-well supported C features and Swift.&lt;&#x2f;p&gt;
&lt;p&gt;It all started when I decided to re-write &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;Pathos&quot;&gt;Pathos&lt;&#x2f;a&gt; with Windows support. One of the library&#x27;s
offering is reading the literal target of a symbolic link: if &lt;code&gt;b&lt;&#x2f;code&gt; is a link to &lt;code&gt;a&lt;&#x2f;code&gt;, then
&lt;code&gt;Path(&amp;quot;b&amp;quot;).readSymlink()&lt;&#x2f;code&gt; should return a another path that&#x27;s equivalent to &lt;code&gt;Path(&amp;quot;a&amp;quot;)&lt;&#x2f;code&gt;.&lt;&#x2f;p&gt;
&lt;p&gt;The Windows API that returns this information is &lt;a href=&quot;https:&#x2f;&#x2f;docs.microsoft.com&#x2f;en-us&#x2f;windows&#x2f;win32&#x2f;api&#x2f;ioapiset&#x2f;nf-ioapiset-deviceiocontrol&quot;&gt;DeviceIoControl&lt;&#x2f;a&gt;:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source c&quot;&gt;&lt;span class=&quot;support type windows c&quot;&gt;BOOL&lt;&#x2f;span&gt; &lt;span class=&quot;meta function c&quot;&gt;&lt;span class=&quot;entity name function c&quot;&gt;DeviceIoControl&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;span class=&quot;meta function parameters c&quot;&gt;&lt;span class=&quot;meta group c&quot;&gt;&lt;span class=&quot;punctuation section group begin c&quot;&gt;(&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;span class=&quot;meta function parameters c&quot;&gt;&lt;span class=&quot;meta group c&quot;&gt;
  &lt;span class=&quot;support type windows c&quot;&gt;HANDLE&lt;&#x2f;span&gt;       &lt;span class=&quot;variable parameter c&quot;&gt;hDevice&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation separator c&quot;&gt;,&lt;&#x2f;span&gt;
  &lt;span class=&quot;support type windows c&quot;&gt;DWORD&lt;&#x2f;span&gt;        &lt;span class=&quot;variable parameter c&quot;&gt;dwIoControlCode&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation separator c&quot;&gt;,&lt;&#x2f;span&gt;
  &lt;span class=&quot;support type windows c&quot;&gt;LPVOID&lt;&#x2f;span&gt;       &lt;span class=&quot;variable parameter c&quot;&gt;lpInBuffer&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation separator c&quot;&gt;,&lt;&#x2f;span&gt;
  &lt;span class=&quot;support type windows c&quot;&gt;DWORD&lt;&#x2f;span&gt;        &lt;span class=&quot;variable parameter c&quot;&gt;nInBufferSize&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation separator c&quot;&gt;,&lt;&#x2f;span&gt;
  &lt;span class=&quot;support type windows c&quot;&gt;LPVOID&lt;&#x2f;span&gt;       &lt;span class=&quot;variable parameter c&quot;&gt;lpOutBuffer&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation separator c&quot;&gt;,&lt;&#x2f;span&gt;
  &lt;span class=&quot;support type windows c&quot;&gt;DWORD&lt;&#x2f;span&gt;        &lt;span class=&quot;variable parameter c&quot;&gt;nOutBufferSize&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation separator c&quot;&gt;,&lt;&#x2f;span&gt;
  &lt;span class=&quot;support type windows c&quot;&gt;LPDWORD&lt;&#x2f;span&gt;      &lt;span class=&quot;variable parameter c&quot;&gt;lpBytesReturned&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation separator c&quot;&gt;,&lt;&#x2f;span&gt;
  LPOVERLAPPED lpOverlapped
&lt;span class=&quot;punctuation section group end c&quot;&gt;)&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Notice anything weird? Hint: &lt;code&gt;LPVOID&lt;&#x2f;code&gt; is &lt;code&gt;void *&lt;&#x2f;code&gt; in standard C.&lt;&#x2f;p&gt;
&lt;p&gt;This function is, for the lack of better words, polymorphic: depending on your input, it can intake
and output different types. As a caller, it is your responsibility to look up what type is needed
and cast them to and from those &lt;code&gt;void *&lt;&#x2f;code&gt;s. The size of the data structure is returned as well. We&#x27;ll
have a lot to talk about that later.&lt;&#x2f;p&gt;
&lt;p&gt;Perhaps, surprisingly, this is not too hard to deal with in Swift. In my &lt;a href=&quot;&#x2f;2020&#x2f;09&#x2f;09&#x2f;free-c-strings&quot;&gt;last article&lt;&#x2f;a&gt;,
I detailed how we can use an Swift API to work with C buffers:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&#x2f;&lt;&#x2f;span&gt; get the file `handle`...&lt;&#x2f;span&gt;
&lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&#x2f;&lt;&#x2f;span&gt; now call `DeviceIoControl`&lt;&#x2f;span&gt;
&lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; data = &lt;span class=&quot;support class&quot;&gt;ContiguousArray&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;CChar&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;(
    &lt;span class=&quot;variable parameter&quot;&gt;unsafeUninitializedCapacity&lt;&#x2f;span&gt;: kMax
) { buffer, count &lt;span class=&quot;keyword control&quot;&gt;in&lt;&#x2f;span&gt;
    &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;size&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;DWORD&lt;&#x2f;span&gt; = &lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;
    &lt;span class=&quot;support class&quot;&gt;DeviceIoControl&lt;&#x2f;span&gt;(
        handle,
        &lt;span class=&quot;support class&quot;&gt;FSCTL_GET_REPARSE_POINT&lt;&#x2f;span&gt;,
        &lt;span class=&quot;constant language nil&quot;&gt;nil&lt;&#x2f;span&gt;,
        &lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;,
        buffer&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;baseAddress,
        &lt;span class=&quot;support class&quot;&gt;DWORD&lt;&#x2f;span&gt;(buffer&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;count),
        &amp;amp;size,
        &lt;span class=&quot;constant language nil&quot;&gt;nil&lt;&#x2f;span&gt;
    )
    count = &lt;span class=&quot;support class&quot;&gt;Int&lt;&#x2f;span&gt;(size)
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;So this fills the array of &lt;code&gt;CChar&lt;&#x2f;code&gt;s with the necessary bytes for out result. I named the variable
&lt;code&gt;data&lt;&#x2f;code&gt; because it is exactly the same concept as &lt;code&gt;Foundation&lt;&#x2f;code&gt;&#x27;s Data, as most Swift programmers
know.&lt;&#x2f;p&gt;
&lt;p&gt;As promised, we&#x27;ll cast this data to the actual type so that we can retrieve information from its
bytes. Side note: casting in this context is a documented usage, So it really is more awkward rather
than bad. And there&#x27;s a safe way to do it:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;withUnsafePointer(&lt;span class=&quot;variable parameter&quot;&gt;to&lt;&#x2f;span&gt;: data) {
    $&lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;withMemoryRebound(
        &lt;span class=&quot;variable parameter&quot;&gt;to&lt;&#x2f;span&gt;: [&lt;span class=&quot;support class&quot;&gt;ReparseDataBuffer&lt;&#x2f;span&gt;].&lt;span class=&quot;constant language enum&quot;&gt;self&lt;&#x2f;span&gt;,
        &lt;span class=&quot;variable parameter&quot;&gt;capacity&lt;&#x2f;span&gt;: &lt;span class=&quot;constant numeric decimal&quot;&gt;1&lt;&#x2f;span&gt;
    ) { buffer &lt;span class=&quot;keyword control&quot;&gt;in&lt;&#x2f;span&gt;
        &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; first element in `buffer` is &lt;&#x2f;span&gt;
        &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&#x2f;&lt;&#x2f;span&gt; a `ReparseDataBuffer`! Yay&lt;&#x2f;span&gt;
    }
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;&lt;em&gt;It&#x27;s very important to note that &lt;code&gt;ReparseDataBuffer&lt;&#x2f;code&gt; is a struct with fixed, predictable layout,
that the API &lt;code&gt;DeviceIoControl&lt;&#x2f;code&gt; promises to return. In practice, this means it is defined in C. Swift
does not currently guarantee struct layout. So unless you really know what you are doing and don&#x27;t
care about forward compatibility, you should not do this with Swift structs.&lt;&#x2f;em&gt;&lt;&#x2f;p&gt;
&lt;p&gt;So far this story has been boring for avid Swift programmers. Fear not, things will get spicy now.&lt;&#x2f;p&gt;
&lt;p&gt;Let&#x27;s talk about this &lt;code&gt;ReparseDataBuffer&lt;&#x2f;code&gt;. It&#x27;s an imported C type with a few notable features.&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source c&quot;&gt;&lt;span class=&quot;storage type c&quot;&gt;typedef&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;struct&lt;&#x2f;span&gt; &lt;span class=&quot;meta block c&quot;&gt;&lt;span class=&quot;punctuation section block begin c&quot;&gt;{&lt;&#x2f;span&gt;
  &lt;span class=&quot;storage type c&quot;&gt;unsigned&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;long&lt;&#x2f;span&gt;  ReparseTag&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
  &lt;span class=&quot;storage type c&quot;&gt;unsigned&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;short&lt;&#x2f;span&gt; ReparseDataLength&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
  &lt;span class=&quot;storage type c&quot;&gt;unsigned&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;short&lt;&#x2f;span&gt; Reserved&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
  &lt;span class=&quot;storage type c&quot;&gt;union&lt;&#x2f;span&gt; &lt;span class=&quot;meta block c&quot;&gt;&lt;span class=&quot;punctuation section block begin c&quot;&gt;{&lt;&#x2f;span&gt;
    &lt;span class=&quot;storage type c&quot;&gt;struct&lt;&#x2f;span&gt; &lt;span class=&quot;meta block c&quot;&gt;&lt;span class=&quot;punctuation section block begin c&quot;&gt;{&lt;&#x2f;span&gt;
      &lt;span class=&quot;storage type c&quot;&gt;unsigned&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;short&lt;&#x2f;span&gt; SubstituteNameOffset&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
      &lt;span class=&quot;storage type c&quot;&gt;unsigned&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;short&lt;&#x2f;span&gt; SubstituteNameLength&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
      &lt;span class=&quot;storage type c&quot;&gt;unsigned&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;short&lt;&#x2f;span&gt; PrintNameOffset&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
      &lt;span class=&quot;storage type c&quot;&gt;unsigned&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;short&lt;&#x2f;span&gt; PrintNameLength&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
      &lt;span class=&quot;storage type c&quot;&gt;unsigned&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;long&lt;&#x2f;span&gt;  Flags&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
      wchar_t  PathBuffer&lt;span class=&quot;meta brackets c&quot;&gt;&lt;span class=&quot;punctuation section brackets begin c&quot;&gt;[&lt;&#x2f;span&gt;&lt;span class=&quot;constant numeric c&quot;&gt;1&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation section brackets end c&quot;&gt;]&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
    &lt;span class=&quot;punctuation section block end c&quot;&gt;}&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; SymbolicLinkReparseBuffer&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
    &lt;span class=&quot;storage type c&quot;&gt;struct&lt;&#x2f;span&gt; &lt;span class=&quot;meta block c&quot;&gt;&lt;span class=&quot;punctuation section block begin c&quot;&gt;{&lt;&#x2f;span&gt;
      &lt;span class=&quot;storage type c&quot;&gt;unsigned&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;short&lt;&#x2f;span&gt; SubstituteNameOffset&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
      &lt;span class=&quot;storage type c&quot;&gt;unsigned&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;short&lt;&#x2f;span&gt; SubstituteNameLength&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
      &lt;span class=&quot;storage type c&quot;&gt;unsigned&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;short&lt;&#x2f;span&gt; PrintNameOffset&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
      &lt;span class=&quot;storage type c&quot;&gt;unsigned&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;short&lt;&#x2f;span&gt; PrintNameLength&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
      wchar_t  PathBuffer&lt;span class=&quot;meta brackets c&quot;&gt;&lt;span class=&quot;punctuation section brackets begin c&quot;&gt;[&lt;&#x2f;span&gt;&lt;span class=&quot;constant numeric c&quot;&gt;1&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation section brackets end c&quot;&gt;]&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
    &lt;span class=&quot;punctuation section block end c&quot;&gt;}&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; MountPointReparseBuffer&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
    &lt;span class=&quot;storage type c&quot;&gt;struct&lt;&#x2f;span&gt; &lt;span class=&quot;meta block c&quot;&gt;&lt;span class=&quot;punctuation section block begin c&quot;&gt;{&lt;&#x2f;span&gt;
      &lt;span class=&quot;storage type c&quot;&gt;unsigned&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;char&lt;&#x2f;span&gt; DataBuffer&lt;span class=&quot;meta brackets c&quot;&gt;&lt;span class=&quot;punctuation section brackets begin c&quot;&gt;[&lt;&#x2f;span&gt;&lt;span class=&quot;constant numeric c&quot;&gt;1&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation section brackets end c&quot;&gt;]&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
    &lt;span class=&quot;punctuation section block end c&quot;&gt;}&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; GenericReparseBuffer&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
  &lt;span class=&quot;punctuation section block end c&quot;&gt;}&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
&lt;span class=&quot;punctuation section block end c&quot;&gt;}&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type typedef c&quot;&gt;ReparseDataBuffer&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Feature #1: it has a &lt;em&gt;union member&lt;&#x2f;em&gt;.&lt;&#x2f;p&gt;
&lt;p&gt;A &lt;code&gt;union&lt;&#x2f;code&gt; in C is an area in memory that could be any of the types specified in the union:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source c&quot;&gt;&lt;span class=&quot;comment line double-slash c&quot;&gt;&lt;span class=&quot;punctuation definition comment c&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; X.a is a `char` and X.b is a `uint64_t`. 
&#x2f;&#x2f; And they occupy the same memory because
&#x2f;&#x2f; only 1 of them exists at a time.
typedef union {
    char a;
    uint64_t b;
} X;
&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Swift does not own a direct analog for this. So if we import this &lt;code&gt;ReparseDataBuffer&lt;&#x2f;code&gt; definition,
there wouldn&#x27;t be a good way to access the data inside the union.&lt;&#x2f;p&gt;
&lt;p&gt;As I pointed out in the comment, members of a union occupy the same space in memory. The largest
member defines the size of that space, so everyone can fit inside of it. Each union member
interprets the same bytes according to their own definition. Given this knowledge, we can derive
a solution that works around Swift&#x27;s limitations: break up the union (sorry, this whole paragraph
reads super suggestive of the real world union. It&#x27;s probably why this word is picked for this data
structure in the first place. But I do not intend to say anything about the real world here)!&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source c&quot;&gt;&lt;span class=&quot;storage type c&quot;&gt;typedef&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;struct&lt;&#x2f;span&gt; &lt;span class=&quot;meta block c&quot;&gt;&lt;span class=&quot;punctuation section block begin c&quot;&gt;{&lt;&#x2f;span&gt;
  &lt;span class=&quot;storage type c&quot;&gt;unsigned&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;long&lt;&#x2f;span&gt; reparseTag&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
  &lt;span class=&quot;storage type c&quot;&gt;unsigned&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;short&lt;&#x2f;span&gt; reparseDataLength&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
  &lt;span class=&quot;storage type c&quot;&gt;unsigned&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;short&lt;&#x2f;span&gt; reserved&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
  &lt;span class=&quot;storage type c&quot;&gt;unsigned&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;short&lt;&#x2f;span&gt; substituteNameOffset&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
  &lt;span class=&quot;storage type c&quot;&gt;unsigned&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;short&lt;&#x2f;span&gt; substituteNameLength&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
  &lt;span class=&quot;storage type c&quot;&gt;unsigned&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;short&lt;&#x2f;span&gt; printNameOffset&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
  &lt;span class=&quot;storage type c&quot;&gt;unsigned&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;short&lt;&#x2f;span&gt; printNameLength&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
  &lt;span class=&quot;storage type c&quot;&gt;unsigned&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;long&lt;&#x2f;span&gt; flags&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
  wchar_t pathBuffer&lt;span class=&quot;meta brackets c&quot;&gt;&lt;span class=&quot;punctuation section brackets begin c&quot;&gt;[&lt;&#x2f;span&gt;&lt;span class=&quot;constant numeric c&quot;&gt;1&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation section brackets end c&quot;&gt;]&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
&lt;span class=&quot;punctuation section block end c&quot;&gt;}&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type typedef c&quot;&gt;SymbolicLinkReparseBuffer&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;

&lt;span class=&quot;storage type c&quot;&gt;typedef&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;struct&lt;&#x2f;span&gt; &lt;span class=&quot;meta block c&quot;&gt;&lt;span class=&quot;punctuation section block begin c&quot;&gt;{&lt;&#x2f;span&gt;
  &lt;span class=&quot;storage type c&quot;&gt;unsigned&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;long&lt;&#x2f;span&gt; reparseTag&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
  &lt;span class=&quot;storage type c&quot;&gt;unsigned&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;short&lt;&#x2f;span&gt; reparseDataLength&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
  &lt;span class=&quot;storage type c&quot;&gt;unsigned&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;short&lt;&#x2f;span&gt; reserved&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
  &lt;span class=&quot;storage type c&quot;&gt;unsigned&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;short&lt;&#x2f;span&gt; substituteNameOffset&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
  &lt;span class=&quot;storage type c&quot;&gt;unsigned&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;short&lt;&#x2f;span&gt; substituteNameLength&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
  &lt;span class=&quot;storage type c&quot;&gt;unsigned&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;short&lt;&#x2f;span&gt; printNameOffset&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
  &lt;span class=&quot;storage type c&quot;&gt;unsigned&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;short&lt;&#x2f;span&gt; printNameLength&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
  wchar_t pathBuffer&lt;span class=&quot;meta brackets c&quot;&gt;&lt;span class=&quot;punctuation section brackets begin c&quot;&gt;[&lt;&#x2f;span&gt;&lt;span class=&quot;constant numeric c&quot;&gt;1&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation section brackets end c&quot;&gt;]&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
&lt;span class=&quot;punctuation section block end c&quot;&gt;}&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type typedef c&quot;&gt;MountPointReparseBuffer&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;

&lt;span class=&quot;comment line double-slash c&quot;&gt;&lt;span class=&quot;punctuation definition comment c&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; we don&amp;#39;t care about the 3rd union
&#x2f;&#x2f; member in this use case
&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Conveniently for us, the union member in &lt;code&gt;ReparseDataBuffer&lt;&#x2f;code&gt; is at the end. So we don&#x27;t need to
worry about padding the unused space for smaller alternatives. Back in Swift, instead of dealing
with &lt;code&gt;ReparseDataBuffer&lt;&#x2f;code&gt; directly, we can work with &lt;code&gt;SymbolicLinkReparseBuffer&lt;&#x2f;code&gt; or
&lt;code&gt;MountPointReparseBuffer&lt;&#x2f;code&gt;, depending on our expectation of which union member to read.&lt;&#x2f;p&gt;
&lt;p&gt;Yeah, this is a good time to mention that, &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;Pathos&quot;&gt;Pathos&lt;&#x2f;a&gt; has to include copies of these definition in a
separate C module. Not only because we need to &amp;quot;break up the union&amp;quot;, the original definition is also
only accessible after importing some headers in the NT kernel. So the standard &lt;code&gt;import WinSDK&lt;&#x2f;code&gt; won&#x27;t
suffice.&lt;&#x2f;p&gt;
&lt;p&gt;Moving on to notable feature #2. The last member of both &lt;code&gt;SymbolicLinkReparseBuffer&lt;&#x2f;code&gt; and
&lt;code&gt;MountPointReparseBuffer&lt;&#x2f;code&gt; &lt;code&gt;pathBuffer&lt;&#x2f;code&gt; is a 1-character long array...why?&lt;&#x2f;p&gt;
&lt;p&gt;In C, this is a &lt;em&gt;flexible array member&lt;&#x2f;em&gt;. Such member must always appear at the end of a struct.
The word &amp;quot;flexible&amp;quot; in this context refers to the amount of memory allocated for this type of
structs : it can vary according to the length of the array as needed. The member such as
&lt;code&gt;pathBuffer&lt;&#x2f;code&gt; is here to provide access to the beginning of the buffer.&lt;&#x2f;p&gt;
&lt;p&gt;To Swift, &lt;code&gt;pathBuffer&lt;&#x2f;code&gt; looks like a single &lt;code&gt;UInt16&lt;&#x2f;code&gt;. The language obviously don&#x27;t have a good idea
of this C feature. So how to we get the rest of the data from this array?&lt;&#x2f;p&gt;
&lt;p&gt;Once again, we have to lean on our understanding of memory layout in C structs.&lt;&#x2f;p&gt;
&lt;p&gt;As is common in APIs for flexible array members, the length of the array trailing the struct is
provide to us. Let&#x27;s call it &lt;code&gt;flexibleLength&lt;&#x2f;code&gt;.&lt;&#x2f;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2f;assets&#x2f;2020&#x2f;09&#x2f;flexible_array_member.png&quot; alt=&quot;Illustration of memory layout for a C struct with flexible array member&quot; &#x2f;&gt;&lt;&#x2f;p&gt;
&lt;p&gt;We already have the memory for these structs in bytes (remember &lt;code&gt;data&lt;&#x2f;code&gt;?). And we can get the size
for the fixed potion of the structs with&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; fixedStructSize = &lt;span class=&quot;support class&quot;&gt;MemoryLayout&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;
    &lt;span class=&quot;support class&quot;&gt;SymbolicLinkReparseBuffer&lt;&#x2f;span&gt;
&amp;gt;.&lt;span class=&quot;constant language enum&quot;&gt;stride&lt;&#x2f;span&gt;
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Putting it all together, we can get the full content of the array by&lt;&#x2f;p&gt;
&lt;ol&gt;
&lt;li&gt;chopping off the content for struct itself,&lt;&#x2f;li&gt;
&lt;li&gt;casting the rest of the raw buffer to the expected element type, and&lt;&#x2f;li&gt;
&lt;li&gt;include the last member in this struct as the first element in the array&lt;&#x2f;li&gt;
&lt;&#x2f;ol&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; Include the first element, which is at&lt;&#x2f;span&gt;
&lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; the end of the fixed struct potion.&lt;&#x2f;span&gt;
&lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; arrayStart = fixedStructSize - &lt;span class=&quot;constant numeric decimal&quot;&gt;1&lt;&#x2f;span&gt;
&lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; Cast the data buffer so it&amp;#39;s composed &lt;&#x2f;span&gt;
&lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; of `wchar_t` aka `UInt16`s.&lt;&#x2f;span&gt;
&lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; array = withUnsafePointer(&lt;span class=&quot;variable parameter&quot;&gt;to&lt;&#x2f;span&gt;: data) {
    $&lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;withMemoryRebound(
        &lt;span class=&quot;variable parameter&quot;&gt;to&lt;&#x2f;span&gt;: [&lt;span class=&quot;support class&quot;&gt;UInt16&lt;&#x2f;span&gt;].&lt;span class=&quot;constant language enum&quot;&gt;self&lt;&#x2f;span&gt;,
        &lt;span class=&quot;variable parameter&quot;&gt;capacity&lt;&#x2f;span&gt;: data&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;count &#x2f; &lt;span class=&quot;constant numeric decimal&quot;&gt;2&lt;&#x2f;span&gt;
    ) { sixteenBitData &lt;span class=&quot;keyword control&quot;&gt;in&lt;&#x2f;span&gt;
        &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; chop off the non-array potion&lt;&#x2f;span&gt;
        sixteenBitData&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;pointee[
            arrayStart ..&amp;lt; (arrayStart + flexibleLength)
        ]
    }
}

&lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; now, go nuts on the array! You earned it!&lt;&#x2f;span&gt;
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Considerations such as error handling are intentionally left out in this article. You can checkout
the source code of &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;Pathos&quot;&gt;Pathos&lt;&#x2f;a&gt; (on the &lt;code&gt;next&lt;&#x2f;code&gt; branch) for the full glory.&lt;&#x2f;p&gt;
&lt;p&gt;Anyways, the flexible array member turns out to be the literal target of the symbolic link. So here
is the end of our story. I&#x27;m interested to hear about alternative approaches for dealing with union
members and flexible array members in Swift. Let me know on &lt;a href=&quot;https:&#x2f;&#x2f;twitter.com&#x2f;daniel_duan&quot;&gt;Twitter&lt;&#x2f;a&gt;, or &lt;a href=&quot;&quot;&gt;Twitch&lt;&#x2f;a&gt; when I&#x27;m
streaming!&lt;&#x2f;p&gt;
</description>
                <pubDate>Sat, 12 Sep 2020 23:11:48 -0700</pubDate>
                <link>https://duan.ca/2020/09/12/fantastic-c-beasts-and-where-to-find-them-in-swift/</link>
                <guid isPermaLink="true">https://duan.ca/2020/09/12/fantastic-c-beasts-and-where-to-find-them-in-swift/</guid>
            </item>
            <item>
                <title>Faster C Strings in Swift</title>
                <description>&lt;p&gt;One of the goals in the re-write of my VFS library &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;Pathos&quot;&gt;Pathos&lt;&#x2f;a&gt; is to make it go
fast. What does that mean when most of the time users are hitting the hard
drive when running your code? Well, let&#x27;s not dwell on that for now.&lt;&#x2f;p&gt;
&lt;p&gt;A library like this passes &lt;em&gt;file paths&lt;&#x2f;em&gt; back and forth with C APIs from the OS
a lot. So one way to go fast is to keep the original representation of the paths
as they are provided to us. On macOS and Linux (and other OSes that Swift
doesn&#x27;t officially support yet), paths are bought and sold in the so called
&amp;quot;C strings&amp;quot;: &lt;code&gt;NUL&lt;&#x2f;code&gt;-terminated bytes (8-bit integers) with POSIX APIs and 16-bit
values on Windows with &lt;code&gt;UNICODE&lt;&#x2f;code&gt;.&lt;&#x2f;p&gt;
&lt;p&gt;Let&#x27;s walk over a couple of examples. Here&#x27;s how to get the current working
directory:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source c&quot;&gt;&lt;span class=&quot;comment line double-slash c&quot;&gt;&lt;span class=&quot;punctuation definition comment c&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; POSIX
char *getcwd(char *buf, size_t size);

&#x2f;&#x2f; Windows
&#x2f;&#x2f; LPTSTR (with right environment) is `wchar_t *`
DWORD GetCurrentDirectory(
    DWORD nBufferLength,
    LPTSTR lpBuffer
);
&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;The expected steps for using APIs like this are the following:&lt;&#x2f;p&gt;
&lt;ol&gt;
&lt;li&gt;you allocate a buffer large enough to store any result you expect.&lt;&#x2f;li&gt;
&lt;li&gt;you give the buffer to the C function.&lt;&#x2f;li&gt;
&lt;li&gt;the C function fills the buffer with some characters, and a &lt;code&gt;NUL&lt;&#x2f;code&gt; (or &lt;code&gt;0&lt;&#x2f;code&gt;)
right after the last character in the result.&lt;&#x2f;li&gt;
&lt;li&gt;the function use a separate variable to tell you the size of the actual
result, not counting the &lt;code&gt;NUL&lt;&#x2f;code&gt;.&lt;&#x2f;li&gt;
&lt;&#x2f;ol&gt;
&lt;p&gt;It&#x27;s very generous of these functions to give us the size of the result. Because
the point of using &lt;code&gt;NUL&lt;&#x2f;code&gt; to terminate &amp;quot;strings&amp;quot; is to avoid having to use
a separate size. Let&#x27;s use &lt;em&gt;setting the current working directory&lt;&#x2f;em&gt; as the next
example:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source c&quot;&gt;&lt;span class=&quot;comment line double-slash c&quot;&gt;&lt;span class=&quot;punctuation definition comment c&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; POSIX
int chdir(const char *path);

&#x2f;&#x2f; Windows
BOOL SetCurrentDirectory(LPCTSTR lpPathName);
&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Yup, these APIs don&#x27;t need you to tell them the content size of your buffer. But
if your content doesn&#x27;t end with a &lt;code&gt;NUL&lt;&#x2f;code&gt;, they&#x27;ll happily read beyond your
intended stopping point until it finds a random &lt;code&gt;0&lt;&#x2f;code&gt; in memory.&lt;&#x2f;p&gt;
&lt;p&gt;Anyways, this is pretty classic C stuff. Now let&#x27;s talk about Swift!&lt;&#x2f;p&gt;
&lt;p&gt;The default option to store a file path for most should be a &lt;code&gt;Swift.String&lt;&#x2f;code&gt;,
which is a encoding-agnostic, Unicode glyph based list of characters. But as
I mentioned earlier, I want to avoid the cost of decoding and encoding in the
case where the path is only passing through the Swift code from C to C, without
being analyzed or modified. (If you need a refresher, &lt;a href=&quot;https:&#x2f;&#x2f;youtu.be&#x2f;Vy2r21kli0Q&quot;&gt;I recently made a video
on Unicode and encoding&lt;&#x2f;a&gt;.) So I chose to use an
&lt;a href=&quot;https:&#x2f;&#x2f;developer.apple.com&#x2f;documentation&#x2f;swift&#x2f;contiguousarray&quot;&gt;ContiguousArray&lt;&#x2f;a&gt; to store these C values:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; Simplified for POSIX&lt;&#x2f;span&gt;
&lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;keyword entity&quot;&gt;struct&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;support class&quot;&gt;Path&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
    &lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;storage&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;ContiguousArray&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;CChar&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;
    &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; ...&lt;&#x2f;span&gt;
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;&lt;code&gt;ContiguousArray&lt;&#x2f;code&gt; (and &lt;code&gt;Array&lt;&#x2f;code&gt;) provides an excellent way to interact with C
APIs we encountered earlier:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;init&lt;&#x2f;span&gt;(
    &lt;span class=&quot;variable parameter&quot;&gt;unsafeUninitializedCapacity&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;Int&lt;&#x2f;span&gt;,
    initializingWith &lt;span class=&quot;variable parameter&quot;&gt;initializer&lt;&#x2f;span&gt;: (
        inout &lt;span class=&quot;support class&quot;&gt;UnsafeMutableBufferPointer&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Element&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;,
        inout &lt;span class=&quot;support class&quot;&gt;Int&lt;&#x2f;span&gt;
    ) &lt;span class=&quot;keyword control&quot;&gt;throws&lt;&#x2f;span&gt; -&amp;gt; &lt;span class=&quot;support class&quot;&gt;Void&lt;&#x2f;span&gt;
)&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; &lt;span class=&quot;keyword control&quot;&gt;rethrows&lt;&#x2f;span&gt;
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Don&#x27;t let the complex-looking signature intimidate you. Essentially, it gives
you write access to the array&#x27;s memory right after its allocation, but before
Swift does standard initialization to it. It works really well with the C APIs
we looked at earlier:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; Store the current directory in a ContiguousArray&lt;&#x2f;span&gt;
&lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; Using the Windows API&lt;&#x2f;span&gt;
&lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; storage = &lt;span class=&quot;support class&quot;&gt;ContiguousArray&lt;&#x2f;span&gt;(
    &lt;span class=&quot;variable parameter&quot;&gt;unsafeUninitializedCapacity&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;Int&lt;&#x2f;span&gt;(&lt;span class=&quot;support class&quot;&gt;MAX_PATH&lt;&#x2f;span&gt;)
) { buffer, count
    &lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; length = &lt;span class=&quot;support class&quot;&gt;GetCurrentWorkingDirectoryW&lt;&#x2f;span&gt;(
        &lt;span class=&quot;support class&quot;&gt;DWORD&lt;&#x2f;span&gt;(&lt;span class=&quot;support class&quot;&gt;MAX_PATH&lt;&#x2f;span&gt;),
        buffer&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;baseAddress &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; C API writes in the allocated memory&lt;&#x2f;span&gt;
    )

    count = length &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; you are responsible for setting size of the array&lt;&#x2f;span&gt;
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Read the steps 1-4 again from earlier, it&#x27;s easy to see how this initializer is
designed to fit that pattern. The resulting array will have all the characters
as its content, and carries the correct size.&lt;&#x2f;p&gt;
&lt;p&gt;When it&#x27;s time to pass the array back to C, we can provide a pointer easily:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;storage&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;withUnsafeBufferPointer {
    &lt;span class=&quot;support class&quot;&gt;SetCurrentDirectory&lt;&#x2f;span&gt;(&lt;span class=&quot;keyword operator&quot;&gt;$&lt;&#x2f;span&gt;&lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;baseAddress&lt;span class=&quot;keyword operator&quot;&gt;!&lt;&#x2f;span&gt;)
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;This is not great, because we don&#x27;t have a &lt;code&gt;NUL&lt;&#x2f;code&gt; at the end of our array.  The
C function that read our array will sometimes read over the contents memory
until it finds a 0! Yikes.&lt;&#x2f;p&gt;
&lt;p&gt;So here&#x27;s an easy fix:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;(storage + [&lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;])&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;withUnsafeBufferPointer {
    &lt;span class=&quot;support class&quot;&gt;SetCurrentDirectory&lt;&#x2f;span&gt;(&lt;span class=&quot;keyword operator&quot;&gt;$&lt;&#x2f;span&gt;&lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;baseAddress&lt;span class=&quot;keyword operator&quot;&gt;!&lt;&#x2f;span&gt;)
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Instead of using the memory of &lt;code&gt;storage&lt;&#x2f;code&gt;, we construct a new array with an 0 as
its last value. This lets C APIs pick the right place to stop reading.
(Incidentally, Swift includes a built-in version of this &lt;a href=&quot;https:&#x2f;&#x2f;developer.apple.com&#x2f;documentation&#x2f;swift&#x2f;string&#x2f;2430818-utf8cstring&quot;&gt;for converting String
to UTF-8 (8-bit) C strings&lt;&#x2f;a&gt;,
which includes the &lt;code&gt;NUL&lt;&#x2f;code&gt; and it&#x27;s possible to further encode with different
encodings.)&lt;&#x2f;p&gt;
&lt;p&gt;Although we&#x27;ve fixed the correctness bug, doing this defeats the purpose of
storing the C string directly somewhat: constructing a new array each time we
want to call a C API is kind of expensive. It involves allocating new memories
and copying over the content, etc.&lt;&#x2f;p&gt;
&lt;p&gt;Alright. How about we carry around the &lt;code&gt;NUL&lt;&#x2f;code&gt; in our array? Let&#x27;s update the
construction code:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; storage = &lt;span class=&quot;support class&quot;&gt;ContiguousArray&lt;&#x2f;span&gt;(
    &lt;span class=&quot;variable parameter&quot;&gt;unsafeUninitializedCapacity&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;Int&lt;&#x2f;span&gt;(&lt;span class=&quot;support class&quot;&gt;MAX_PATH&lt;&#x2f;span&gt;) + &lt;span class=&quot;constant numeric decimal&quot;&gt;1&lt;&#x2f;span&gt;
) { buffer, count
    &lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; length = &lt;span class=&quot;support class&quot;&gt;GetCurrentWorkingDirectoryW&lt;&#x2f;span&gt;(
        &lt;span class=&quot;support class&quot;&gt;DWORD&lt;&#x2f;span&gt;(&lt;span class=&quot;support class&quot;&gt;MAX_PATH&lt;&#x2f;span&gt;),
        buffer&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;baseAddress
    )

    buffer[length] = &lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;
    count = length + &lt;span class=&quot;constant numeric decimal&quot;&gt;1&lt;&#x2f;span&gt;
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;We add 1 every time we have a say in size. Then we manually set a 0 at the end
of the stuff from C. Having done this, we&#x27;ve solved both the correctness problem
and performance concern from earlier!&lt;&#x2f;p&gt;
&lt;p&gt;The last bit of of this journey is ergonomics. Carrying an extra &lt;code&gt;NUL&lt;&#x2f;code&gt; is fine
if you never look at the array&#x27;s content. But when you do, it&#x27;s important to
remember that the content we care about is &lt;em&gt;almost&lt;&#x2f;em&gt; all of the array, except for
the &lt;code&gt;NUL&lt;&#x2f;code&gt; at the end. In other words, simply don&#x27;t make off-by-1 mistakes and
everything will be fine.&lt;&#x2f;p&gt;
&lt;p&gt;Alright, that&#x27;s easier said than done. To alleviate this off-by-1 painfulness,
I ended up exposing a &amp;quot;view&amp;quot; into the array storage that excludes the last
element. Here&#x27;s the actual definition in &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;Pathos&quot;&gt;Pathos&lt;&#x2f;a&gt;:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;keyword entity&quot;&gt;struct&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;support class&quot;&gt;CString&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Unit&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;BinaryInteger&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;Equatable&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;Hashable&lt;&#x2f;span&gt; {
    &lt;span class=&quot;storage modifier&quot;&gt;private&lt;&#x2f;span&gt; &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;storage&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;ContiguousArray&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Unit&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;
    &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;content&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;ContiguousArray&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Unit&lt;&#x2f;span&gt;&amp;gt;.&lt;span class=&quot;constant language enum&quot;&gt;SubSequence&lt;&#x2f;span&gt; {
        storage[&lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt; ..&amp;lt; storage&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;count - &lt;span class=&quot;constant numeric decimal&quot;&gt;1&lt;&#x2f;span&gt;]
    }

    &lt;span class=&quot;storage modifier&quot;&gt;public&lt;&#x2f;span&gt; &lt;span class=&quot;storage type function&quot;&gt;func&lt;&#x2f;span&gt; &lt;span class=&quot;entity name function&quot;&gt;&lt;span class=&quot;variable function&quot;&gt;c&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;T&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;(
        &lt;span class=&quot;variable parameter&quot;&gt;action&lt;&#x2f;span&gt;: (&lt;span class=&quot;support class&quot;&gt;UnsafePointer&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Unit&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;) &lt;span class=&quot;keyword control&quot;&gt;throws&lt;&#x2f;span&gt; -&amp;gt; &lt;span class=&quot;support class&quot;&gt;T&lt;&#x2f;span&gt;) &lt;span class=&quot;keyword control&quot;&gt;throws&lt;&#x2f;span&gt; -&amp;gt; &lt;span class=&quot;support class&quot;&gt;T&lt;&#x2f;span&gt;
    {
        &lt;span class=&quot;keyword control&quot;&gt;try&lt;&#x2f;span&gt; content&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;withUnsafeBufferPointer {
            &lt;span class=&quot;keyword control&quot;&gt;try&lt;&#x2f;span&gt; action(&lt;span class=&quot;keyword operator&quot;&gt;$&lt;&#x2f;span&gt;&lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;baseAddress&lt;span class=&quot;keyword operator&quot;&gt;!&lt;&#x2f;span&gt;)
        }
    }

    &lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;init&lt;&#x2f;span&gt;(&lt;span class=&quot;variable parameter&quot;&gt;cString&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;UnsafePointer&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Unit&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;)&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
       &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; length = &lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;
       &lt;span class=&quot;keyword control&quot;&gt;while&lt;&#x2f;span&gt; cString&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;advanced(&lt;span class=&quot;variable parameter&quot;&gt;by&lt;&#x2f;span&gt;: length)&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;pointee != &lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt; {
           length += &lt;span class=&quot;constant numeric decimal&quot;&gt;1&lt;&#x2f;span&gt;
       }

       storage = &lt;span class=&quot;support class&quot;&gt;ContiguousArray&lt;&#x2f;span&gt;(
           &lt;span class=&quot;variable parameter&quot;&gt;unsafeUninitializedCapacity&lt;&#x2f;span&gt;: length + &lt;span class=&quot;constant numeric decimal&quot;&gt;1&lt;&#x2f;span&gt;
       ) { buffer, count &lt;span class=&quot;keyword control&quot;&gt;in&lt;&#x2f;span&gt;
           &lt;span class=&quot;keyword control&quot;&gt;for&lt;&#x2f;span&gt; offset &lt;span class=&quot;keyword control&quot;&gt;in&lt;&#x2f;span&gt; &lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt; ..&amp;lt; length {
               buffer[offset] = cString&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;advanced(&lt;span class=&quot;variable parameter&quot;&gt;by&lt;&#x2f;span&gt;: offset)&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;pointee
           }

           buffer[length] = &lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;
           count = length + &lt;span class=&quot;constant numeric decimal&quot;&gt;1&lt;&#x2f;span&gt;
       }
    }

    &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; ... more stuff&lt;&#x2f;span&gt;
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;&lt;code&gt;storage&lt;&#x2f;code&gt; in this solution is an private implementation detail. &lt;code&gt;content&lt;&#x2f;code&gt; is
the primary access to the content of the string. And finally, this type
interops with C APIs correctly and efficiently because of the extra &lt;code&gt;NUL&lt;&#x2f;code&gt; we put
at the end of &lt;code&gt;storage&lt;&#x2f;code&gt;.&lt;&#x2f;p&gt;
</description>
                <pubDate>Wed, 09 Sep 2020 01:21:26 -0700</pubDate>
                <link>https://duan.ca/2020/09/09/free-c-strings/</link>
                <guid isPermaLink="true">https://duan.ca/2020/09/09/free-c-strings/</guid>
            </item>
            <item>
                <title>Introducing Dye</title>
                <description>&lt;p&gt;&lt;em&gt;Recently, I got a PC. And I started writing some code on Windows for the
giggles. Naturally, I gravitate towards stuff I use on macOS and Linux when it
comes to tooling. To my delight, NeoVim, ripgrep and fzf all work out of the box
in terminal simulators, which brings us to todays main topic...&lt;&#x2f;em&gt;&lt;&#x2f;p&gt;
&lt;p&gt;I made a terminal coloring library for Swift that works on Windows,
&lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;Dye&#x2f;releases&#x2f;tag&#x2f;0.0.1&quot;&gt;Dye 0.0.1 is available now&lt;&#x2f;a&gt;!&lt;&#x2f;p&gt;
&lt;h2&gt;So, why?&lt;&#x2f;h2&gt;
&lt;p&gt;When I started working on &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;tre&quot;&gt;tre&lt;&#x2f;a&gt;, I search in the
Rust ecosystem for a CLI interface library that supports as many platforms as
possible. Eventually I found &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;BurntSushi&#x2f;termcolor&quot;&gt;termcolor&lt;&#x2f;a&gt; among an ocean of options. As
a result, tre, like a lot of other CLI tools (like rg) written in Rust, has
a consistent UI on Windows and Unix. This experience has brought lots of joy, as
a user of both the library, and the app. I want to pay it forward to my fellow
Swift CLI makers, and their users.&lt;&#x2f;p&gt;
&lt;p&gt;Zooming out slightly, success of Swift on Windows makes Swift as a skill more
valuable. And &lt;a href=&quot;https:&#x2f;&#x2f;duan.ca&#x2f;2019&#x2f;01&#x2f;20&#x2f;kick-ass-cli-tools-in-swift&#x2f;&quot;&gt;I want more CLI tools written in Swift&lt;&#x2f;a&gt;. So it&#x27;s
a double-win, really.&lt;&#x2f;p&gt;
&lt;p&gt;Lastly, it&#x27;s a small library, all things considered. Being able to get it to
a shippable state on a weekend is a key reason I decided to work on it.&lt;&#x2f;p&gt;
&lt;h2&gt;Technical tidbits&lt;&#x2f;h2&gt;
&lt;p&gt;I love Max Howell&#x27;s &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;mxcl&#x2f;Chalk&quot;&gt;Chalk&lt;&#x2f;a&gt; library. It&#x27;s a 100-line Swift file that
implements &lt;a href=&quot;https:&#x2f;&#x2f;en.wikipedia.org&#x2f;wiki&#x2f;ANSI_escape_code&quot;&gt;ANSI escape code&lt;&#x2f;a&gt; with Swift&#x27;s custom string interpolation
API. It demonstrates well how simple it is to customize your terminal output.&lt;&#x2f;p&gt;
&lt;p&gt;Enter Windows, where ANSI sequences are ignored by built-in terminal simulators
from the past. The console is customized via a entirely separate, stateful,
imperative APIs (Newer simulators such as the freshly released &lt;a href=&quot;&quot;&gt;Terminal&lt;&#x2f;a&gt;
actually supports ANSI codes pretty well). This is our lowest common API
denominator, which ultimately dictated the design of Dye.&lt;&#x2f;p&gt;
&lt;p&gt;Dye&#x27;s API is centered around Swift&#x27;s built-in protocol &lt;code&gt;TextOutputStream&lt;&#x2f;code&gt;. You
create a stream object and mutate the style need for upcoming output:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; output = &lt;span class=&quot;support class&quot;&gt;OutputStream&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;standardOutput()
output&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;color&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;foreground = .&lt;span class=&quot;constant language enum&quot;&gt;blue&lt;&#x2f;span&gt;
print(&lt;span class=&quot;string quoted double&quot;&gt;&amp;quot;blue text&amp;quot;&lt;&#x2f;span&gt;, to &amp;amp;stream) &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; blue text is blue&lt;&#x2f;span&gt;
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;If the stream is redirected to something other than the terminal, styling gets
automatically disabled. There are various options to customize this behavior.&lt;&#x2f;p&gt;
&lt;p&gt;Take a look at this &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;Dye&#x2f;blob&#x2f;master&#x2f;Examples&#x2f;main.swift&quot;&gt;sample app&lt;&#x2f;a&gt; to get a more concrete picture of
how things work.&lt;&#x2f;p&gt;
&lt;hr &#x2f;&gt;
&lt;p&gt;I&#x27;ll end with a screenshot of the sample app running in Command Prompt:&lt;&#x2f;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2f;assets&#x2f;2020&#x2f;06&#x2f;01&#x2f;windows-example-screenshot.jpg&quot; alt=&quot;Dye sample app running in Windows Command Prompt&quot; &#x2f;&gt;&lt;&#x2f;p&gt;
&lt;p&gt;Let&#x27;s build more.&lt;&#x2f;p&gt;
</description>
                <pubDate>Mon, 01 Jun 2020 15:08:01 -0700</pubDate>
                <link>https://duan.ca/2020/06/01/dye/</link>
                <guid isPermaLink="true">https://duan.ca/2020/06/01/dye/</guid>
            </item>
            <item>
                <title>On the Subject of Interface Hygiene</title>
                <description>&lt;p&gt;In a purly reactive world, your entire program merge into a single stream. Now,
close your eyes, and envision: your project as one, beautiful, stream.&lt;&#x2f;p&gt;
&lt;p&gt;Now open your eyes. Yeah, it&#x27;s not. Your project is a Mac or iOS app. It&#x27;s full
of your memories, sweat, and blood. And you are ready to sweat and bleed some
more by putting some Combine and SwiftUI into it. You watched the WWDC19
sessions and learned that &amp;quot;Subjcets are super powerful&amp;quot;. You looked into your
code and realized you can&#x27;t really do anything with Combine without &lt;code&gt;Subject&lt;&#x2f;code&gt;s
at the current state of the project.&lt;&#x2f;p&gt;
&lt;p&gt;Well…&lt;&#x2f;p&gt;
&lt;p&gt;Here are a few habits that help keeping your project that prevasively uses
&lt;code&gt;Combine.Subject&lt;&#x2f;code&gt; &lt;em&gt;sane&lt;&#x2f;em&gt;. They should seem obvious to anyone who understands
Murphy&#x27;s law and the value of minialism in interfaces. If you already are using
some reactive stream implementation, substitute the types with their
counterparts in your framework and these rules should seem down right &lt;strong&gt;basic&lt;&#x2f;strong&gt;.&lt;&#x2f;p&gt;
&lt;h2&gt;Vend &lt;code&gt;Subject&lt;&#x2f;code&gt;s as &lt;code&gt;Publisher&lt;&#x2f;code&gt;s&lt;&#x2f;h2&gt;
&lt;p&gt;&lt;code&gt;Subject&lt;&#x2f;code&gt;s help bridge from the imperitive to the reactive world. Somewhat
paradoxically, sharing them is not very &amp;quot;RX-y&amp;quot;. This is akin to prefering &lt;code&gt;let&lt;&#x2f;code&gt;s
over &lt;code&gt;var&lt;&#x2f;code&gt;.&lt;&#x2f;p&gt;
&lt;p&gt;Most of the time, what you want to share is the values pumped into the stream,
not the privilage to mutate it. Because Subjects conform to &lt;code&gt;Publisher&lt;&#x2f;code&gt;, it&#x27;s
easy to hide from the users the fact that your stream is backed by them.&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; Bad: now anyone who get a hold of it can mess with your stream!&lt;&#x2f;span&gt;
&lt;span class=&quot;storage modifier&quot;&gt;public&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;keyword entity&quot;&gt;enum&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;support class&quot;&gt;GreatInts&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
    &lt;span class=&quot;storage modifier&quot;&gt;public&lt;&#x2f;span&gt; &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; updates = &lt;span class=&quot;support class&quot;&gt;CurrentValueSubject&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Int&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;Never&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;(&lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;)
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;With Combine this conversion happens via type-erasure:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; Better: all your users care is the stream (publisher), so give them that!&lt;&#x2f;span&gt;
&lt;span class=&quot;storage modifier&quot;&gt;public&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;keyword entity&quot;&gt;enum&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;support class&quot;&gt;GreatInts&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
    &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; Internally, it&amp;#39;s backed by a subject.&lt;&#x2f;span&gt;
    &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; subject = &lt;span class=&quot;support class&quot;&gt;CurrentValueSubject&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Int&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;Never&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;(&lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;)
    &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; Externally, it&amp;#39;s just a Publisher. &lt;&#x2f;span&gt;
    &lt;span class=&quot;storage modifier&quot;&gt;public&lt;&#x2f;span&gt; &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;subject&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;AnyPublisher&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Int&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;Never&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt; {
        subject&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;eraseToAnyPublisher()
    }
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;h2&gt;CurrentValueSubject natually caches the latest value&lt;&#x2f;h2&gt;
&lt;p&gt;RX theorists will hate this: sometimes it&#x27;s just practical to expose
a synchronous interface to the latest vaule in the stream!&lt;&#x2f;p&gt;
&lt;p&gt;Two things.&lt;&#x2f;p&gt;
&lt;ol&gt;
&lt;li&gt;It might be tempting to expose the subject and let your user use its
&lt;code&gt;.value&lt;&#x2f;code&gt;. Well, you shouldn&#x27;t (as explained in the previous section).
A separate interface dedicated to the latest value prevents people from
polluting your stream.&lt;&#x2f;li&gt;
&lt;&#x2f;ol&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; (Still) bad&lt;&#x2f;span&gt;
&lt;span class=&quot;storage modifier&quot;&gt;public&lt;&#x2f;span&gt; &lt;span class=&quot;storage modifier&quot;&gt;final&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;keyword entity&quot;&gt;class&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;support class&quot;&gt;GreatInts&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
    &lt;span class=&quot;storage modifier&quot;&gt;public&lt;&#x2f;span&gt; &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; updates = &lt;span class=&quot;support class&quot;&gt;CurrentValueSubject&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Int&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;Never&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;(&lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;)
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Remember &lt;code&gt;CurrentValueSubject&lt;&#x2f;code&gt; has that &lt;code&gt;.value&lt;&#x2f;code&gt; property! It may seem
surprising, but I&#x27;ve seen folks transitioning to RX clinging to the old ways:&lt;&#x2f;li&gt;
&lt;&#x2f;ol&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;storage modifier&quot;&gt;public&lt;&#x2f;span&gt; &lt;span class=&quot;storage modifier&quot;&gt;final&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;keyword entity&quot;&gt;class&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;support class&quot;&gt;GreatInts&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
    &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; well, at least it&amp;#39;s not a public subject...&lt;&#x2f;span&gt;
    &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; subject = &lt;span class=&quot;support class&quot;&gt;CurrentValueSubject&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Int&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;Never&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;(&lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;) &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; &amp;lt;- initial value 0&lt;&#x2f;span&gt;
    &lt;span class=&quot;storage modifier&quot;&gt;public&lt;&#x2f;span&gt; &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;updates&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;AnyPublisher&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Int&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;Never&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt; {
        subject&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;eraseToAnyPublisher()
    }

    &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; Wait, there&amp;#39;s that 0 again&lt;&#x2f;span&gt;
    &lt;span class=&quot;storage modifier&quot;&gt;public&lt;&#x2f;span&gt; &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;latest&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;Int&lt;&#x2f;span&gt; = &lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt; {
        &lt;span class=&quot;keyword control&quot;&gt;didSet&lt;&#x2f;span&gt; {
            subject&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;send(latest) &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; ?&lt;&#x2f;span&gt;
        }
    }
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;First, you&#x27;ll notice that &lt;code&gt;0&lt;&#x2f;code&gt;, the initial value, is duplicated as both the
subject&#x27;s initial value, as well as the value of a stored property. And these
duplicated sources of truth persist throughout the parent&#x27;s life time. Weird,
right?&lt;&#x2f;p&gt;
&lt;p&gt;Here&#x27;s a slightly better version:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;storage modifier&quot;&gt;public&lt;&#x2f;span&gt; &lt;span class=&quot;storage modifier&quot;&gt;final&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;keyword entity&quot;&gt;class&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;support class&quot;&gt;GreatInts&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
    &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; subject = &lt;span class=&quot;support class&quot;&gt;PassthroughSubject&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Int&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;Never&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;()
    &lt;span class=&quot;storage modifier&quot;&gt;public&lt;&#x2f;span&gt; &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;updates&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;AnyPublisher&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Int&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;Never&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt; {
        subject&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;eraseToAnyPublisher()
    }

    &lt;span class=&quot;storage modifier&quot;&gt;public&lt;&#x2f;span&gt; &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;latest&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;Int&lt;&#x2f;span&gt; = &lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt; {
        &lt;span class=&quot;keyword control&quot;&gt;didSet&lt;&#x2f;span&gt; {
            subject&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;send(latest) &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; ?&lt;&#x2f;span&gt;
        }
    }
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Now there&#x27;s no two copy of the latest value in memory anymore. But in my opinion
it does not embrace the full power of Combine. Here&#x27;s the most natual way to do
this:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;storage modifier&quot;&gt;public&lt;&#x2f;span&gt; &lt;span class=&quot;storage modifier&quot;&gt;final&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;keyword entity&quot;&gt;class&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;support class&quot;&gt;GreatInts&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
    &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&#x2f;&lt;&#x2f;span&gt; This is a CurrentValueSubject again.&lt;&#x2f;span&gt;
    &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; subject = &lt;span class=&quot;support class&quot;&gt;CurrentValueSubject&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Int&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;Never&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;(&lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;)
    &lt;span class=&quot;storage modifier&quot;&gt;public&lt;&#x2f;span&gt; &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;updates&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;AnyPublisher&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Int&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;Never&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt; {
        subject&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;eraseToAnyPublisher()
    }

    &lt;span class=&quot;storage modifier&quot;&gt;public&lt;&#x2f;span&gt; &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;latest&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;Int&lt;&#x2f;span&gt; {
        subject&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;value
    }
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Essentially, you create separate public interface, each vends a little piece of
&lt;code&gt;CurrentValueSubject&lt;&#x2f;code&gt;&#x27;s power.&lt;&#x2f;p&gt;
&lt;h2&gt;No really, don&#x27;t use &lt;code&gt;Subject&lt;&#x2f;code&gt;s&lt;&#x2f;h2&gt;
&lt;p&gt;Even a well-scoped &lt;code&gt;Subject&lt;&#x2f;code&gt; (properly being private or internal, depending on
your tool of choice for access control) still has a mutable state that you
probably don&#x27;t want: its stream can go from &amp;quot;alive&amp;quot; to &amp;quot;complete&amp;quot;. And, again,
anyone with access can make this state transition happen, leaving you in the
undefensible position of … hoping everyone on your team to not misuse your
stuff?&lt;&#x2f;p&gt;
&lt;p&gt;Lucky for you (and me), a &amp;quot;incompletable&amp;quot; subject is a established concept -- a
&amp;quot;Relay&amp;quot;. I&#x27;ve put together a repo for you to look and&#x2f;or use:&lt;&#x2f;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;relay&quot;&gt;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;relay&lt;&#x2f;a&gt;&lt;&#x2f;p&gt;
&lt;p&gt;Yeah, ban all Subjects in your project with a linter. Seriously.&lt;&#x2f;p&gt;
&lt;h2&gt;Fin&lt;&#x2f;h2&gt;
&lt;p&gt;That&#x27;s all for now. I&#x27;m not an expert with RX myself. Hopefully these
perspective can help you avoid some nasties.&lt;&#x2f;p&gt;
</description>
                <pubDate>Mon, 01 Jul 2019 20:22:48 -0700</pubDate>
                <link>https://duan.ca/2019/07/01/combine-hygiene/</link>
                <guid isPermaLink="true">https://duan.ca/2019/07/01/combine-hygiene/</guid>
            </item>
            <item>
                <title>TOML Decoder Playlist</title>
                <description>&lt;p&gt;I enjoyed making &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;TOMLDeserializer&quot;&gt;TOMLDeserializer&lt;&#x2f;a&gt; and &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;TOMLDecoder&quot;&gt;TOMLDecoder&lt;&#x2f;a&gt; recently. Let&#x27;s hope
some projects will pick them up and TOML as a configuration format will start to
spead in Swift communities.&lt;&#x2f;p&gt;
&lt;p&gt;What&#x27;s outstanding about these projects is that I started working on them while
&lt;a href=&quot;https:&#x2f;&#x2f;twitch.tv&#x2f;daniel_duan&quot;&gt;streaming&lt;&#x2f;a&gt;. Personally, I consume a lot of content like this. So now people
can watch me writing Swift, too.&lt;&#x2f;p&gt;
&lt;p&gt;I&#x27;ve been archiving recordings of these streams as much as I can. Here are the
links to these videos, each is around 1-1.5 hours long:&lt;&#x2f;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2f;&#x2f;youtu.be&#x2f;XLLlCEfuFLw&quot;&gt;Turn TOML Test Fixtures Into XCTests With Vim Macros&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2f;&#x2f;youtu.be&#x2f;Ztq3K3cq8f0&quot;&gt;Passing TOML Deserialization Tests&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2f;&#x2f;youtu.be&#x2f;GTCYSIc6n3U&quot;&gt;Finishing TOML Invalidation Tests&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2f;&#x2f;youtu.be&#x2f;HP2Wzh8MVvg&quot;&gt;TOML Decoder: The Beginning&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2f;&#x2f;youtu.be&#x2f;EZ7VpbrLkH0&quot;&gt;TOML Decoder: Filling In Missing Implementation Pieces&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2f;&#x2f;youtu.be&#x2f;bISMVVWOHKg&quot;&gt;TOML Decoder: Adding The First TOML Decoding Strategy!&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2f;&#x2f;youtu.be&#x2f;oOOS4bnhwx4&quot;&gt;TOML Decoder: Project Overview And Data Decoding Support&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2f;&#x2f;youtu.be&#x2f;9yDtXsrMtbU&quot;&gt;TOML Decoder: Key Decoding Strategies&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2f;&#x2f;youtu.be&#x2f;g1V872HL4Dk&quot;&gt;TOML Decoder: Project Updates&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;&#x2f;ul&gt;
&lt;p&gt;The TOMLDecoder projects would&#x27;ve been capture on camera entirely if I weren&#x27;t
such a streaming n00b and messed up a few streams. Hilarious.&lt;&#x2f;p&gt;
</description>
                <pubDate>Sun, 10 Mar 2019 20:32:37 -0700</pubDate>
                <link>https://duan.ca/2019/03/10/toml-decoder/</link>
                <guid isPermaLink="true">https://duan.ca/2019/03/10/toml-decoder/</guid>
            </item>
            <item>
                <title>Kick-ass CLI Tools In Swift</title>
                <description>&lt;p&gt;As someone who lives in a terminal simulator, I&#x27;m pleasantly surprised by the
new toys we get in recent years such as &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;junegunn&#x2f;fzf&quot;&gt;fzf&lt;&#x2f;a&gt;, &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;BurntSushi&#x2f;ripgrep&quot;&gt;ripgrep&lt;&#x2f;a&gt;, &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;sharkdp&#x2f;fd&quot;&gt;fd&lt;&#x2f;a&gt;, etc.
A great number of these are written in relatively young programming languages
such as Go and Rust. But, noticibly, none of them are written in Swift.&lt;&#x2f;p&gt;
&lt;p&gt;In this post, I&#x27;ll try to explain why that is.&lt;&#x2f;p&gt;
&lt;h2&gt;POSIX Ergonomics&lt;&#x2f;h2&gt;
&lt;p&gt;Unix-like virtual file systems has been around for decades. API that manupulates
such systems has standardized a long time ago and exists in most computers
running Linux&#x2f;BSD&#x2f;macOS today (and, to a large extend, smart phones). To Swift
users, Using these APIs is straight-forward (&lt;code&gt;rmdir(&amp;quot;path&#x2f;to&#x2f;dir&amp;quot;)&lt;&#x2f;code&gt;).&lt;&#x2f;p&gt;
&lt;p&gt;So Swift programmers are all happy campers (re-)inventeing all sorts of file
system utilities, right?&lt;&#x2f;p&gt;
&lt;p&gt;Well, not quite.&lt;&#x2f;p&gt;
&lt;p&gt;Okay, I lied about POSIX APIs being &amp;quot;straight-forward&amp;quot; in Swift. Or rather, this
is very subjective.&lt;&#x2f;p&gt;
&lt;p&gt;Continuing with the &lt;code&gt;rmdir&lt;&#x2f;code&gt; example, we must first import it from either &lt;code&gt;Glibc&lt;&#x2f;code&gt;
or &lt;code&gt;Darwin&lt;&#x2f;code&gt;, depending on your OS. To know whether the operation is successful,
we need to see whether it returned integer 0. To learn &lt;em&gt;why&lt;&#x2f;em&gt; 0 was not returned,
we need to read the &amp;quot;magical&amp;quot; variable &lt;code&gt;errno&lt;&#x2f;code&gt;. &lt;code&gt;errno&lt;&#x2f;code&gt; could be written to by
other APIs so we&#x27;d better capture it in time…&lt;&#x2f;p&gt;
&lt;p&gt;And that&#x27;s one of the simpler APIs in POSIX calls!&lt;&#x2f;p&gt;
&lt;p&gt;Programmers whine about ergonomics partially because we are previlidged and
spoiled. But mostly because our attention is a limited resources. Mixing API
conventions distracts us from solving the problem at hand. Bad ergonomics,
therefore, drives away a good potion of users who cares about quality of their
tools.&lt;&#x2f;p&gt;
&lt;h2&gt;Culture and History&lt;&#x2f;h2&gt;
&lt;p&gt;As of this writing, the release of Swift 5 is imminent. The vast majority of
existing Swift code is written to run on iOS. The concept of a file, or the
traditional virtal file system, is hidden to iOS users, and sandboxed for
developers. I bet most Swift users rarely think about the fact that there&#x27;s
a entire set of POSIX API at their disposal.&lt;&#x2f;p&gt;
&lt;p&gt;&lt;code&gt;Foundation&lt;&#x2f;code&gt; alleviates the need to deal with files and directories: &lt;code&gt;Bundle&lt;&#x2f;code&gt;
locates the files; &lt;code&gt;CoreData&lt;&#x2f;code&gt;, &lt;code&gt;UserDefaults&lt;&#x2f;code&gt; or the keychain is your primary
way to persist data; &lt;code&gt;Data&lt;&#x2f;code&gt;, &lt;code&gt;String&lt;&#x2f;code&gt; or &lt;code&gt;NSCoding&lt;&#x2f;code&gt; has methods to read and
write to files.  And finally, if you really need to deal with files,
&lt;code&gt;NSFileManager&lt;&#x2f;code&gt; has everything you&#x27;ll ever need.&lt;&#x2f;p&gt;
&lt;p&gt;Why would a productive Swift programmer think about POSIX in this environment?
Why would a tutor teach POSIX over the useful&#x2f;practical&#x2f;&amp;quot;native&amp;quot; alternatives?&lt;&#x2f;p&gt;
&lt;p&gt;We can trace &amp;quot;riding on the Apple platform&amp;quot; mentality back to the pre-iPhone
days, where a very small Mac developer community labors on on a niche platform
(compared to iOS today) and they &lt;em&gt;loved&lt;&#x2f;em&gt; it. However, I&#x27;m sure they used more
POSIX stuff back then than the average iOS developers today.&lt;&#x2f;p&gt;
&lt;p&gt;Having a great library such as Foundation on the most popular developer
platform where the language thrives means it&#x27;ll take longer for &amp;quot;subcultures&amp;quot;
to emerge, if they do at all.&lt;&#x2f;p&gt;
&lt;h2&gt;The Standard Library And Its Influence on New Users&lt;&#x2f;h2&gt;
&lt;p&gt;File system APIs being in &lt;code&gt;Foundation&lt;&#x2f;code&gt; as opposed to the standard library is
probably a temporary condition. Nevertheless, it has at least the following
implications:&lt;&#x2f;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Its quality of implementation is not held on the same standard that those
APIs in the standard library. This is especially true for the separate,
open-source &lt;code&gt;Foundation&lt;&#x2f;code&gt; implementation. Getting consistent and correct
behaviors across macOS and Linux is hard.&lt;&#x2f;p&gt;
&lt;&#x2f;li&gt;
&lt;li&gt;
&lt;p&gt;A person learning Swift won&#x27;t explore the language with a file system API.
This I suspect, is &lt;strong&gt;the most important reason many of these great CLI
utilites are written in other programming languages&lt;&#x2f;strong&gt;. Programmers seek
instant gratification when they learn. And they usually stay in a limited
domain (like iOS) at first. This is where the built-in library is special: no
matter which domain is chosen, it&#x27;s always available. Languages such as Go
and Rust include things like paths and files in their built-in library.
Playing with these APIs while learning the lanugage plants a seed for future,
serious, projects. There are less users of these languages compared to Swift,
but there are more people thinking about projects that involves file systems
in thoes communities. (Note I don&#x27;t have statistics here, just a guess.)&lt;&#x2f;p&gt;
&lt;&#x2f;li&gt;
&lt;&#x2f;ol&gt;
&lt;h2&gt;Conclusion&lt;&#x2f;h2&gt;
&lt;p&gt;The next killer CLI tool is still more likely to be written in Go or Rust,
than in Swift. Hopefully, somewhere in these speculations is a true cause of
this phenomena. Maybe someone reading this will be inspired to accelerate change
that will eventually revert the condition. (I&#x27;m &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;Pathos&quot;&gt;trying&lt;&#x2f;a&gt;).&lt;&#x2f;p&gt;
</description>
                <pubDate>Sun, 20 Jan 2019 16:09:38 -0800</pubDate>
                <link>https://duan.ca/2019/01/20/kick-ass-cli-tools-in-swift/</link>
                <guid isPermaLink="true">https://duan.ca/2019/01/20/kick-ass-cli-tools-in-swift/</guid>
            </item>
            <item>
                <title>Magical Interactions</title>
                <description>&lt;p&gt;I want to talk about this little function:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;func&lt;&#x2f;span&gt; &lt;span class=&quot;entity name function&quot;&gt;&lt;span class=&quot;variable function&quot;&gt;interact&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;(&lt;span class=&quot;constant language other&quot;&gt;_&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;process&lt;&#x2f;span&gt;: (&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;) -&amp;gt; &lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;)&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
    &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; input = &lt;span class=&quot;string quoted double&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2f;span&gt;
    &lt;span class=&quot;keyword control&quot;&gt;while&lt;&#x2f;span&gt; &lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; line = readLine() {
        input += line
    }

    print(process(input))
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Brief explanation: it reads all the input from stdin as a &lt;code&gt;String&lt;&#x2f;code&gt;, feeds it
into a closure &lt;code&gt;process&lt;&#x2f;code&gt;, which it takes in as its only argument, and prints
&lt;code&gt;process&lt;&#x2f;code&gt;&#x27;s output.&lt;&#x2f;p&gt;
&lt;p&gt;Here&#x27;s how one might use it:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; counts characters from stdin and prints result to stdout&lt;&#x2f;span&gt;
interact { &lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;(&lt;span class=&quot;keyword operator&quot;&gt;$&lt;&#x2f;span&gt;&lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;count) }
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Got that? Well, now I&#x27;m going to rewrite it in a slightly less Swift-y way:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;count&lt;&#x2f;span&gt;: (&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;) -&amp;gt; &lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt; = {
    &lt;span class=&quot;keyword control&quot;&gt;return&lt;&#x2f;span&gt; &lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;(&lt;span class=&quot;keyword operator&quot;&gt;$&lt;&#x2f;span&gt;&lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;count)
}

interact(count)
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;The argument for &lt;code&gt;interact&lt;&#x2f;code&gt; got defined with a name and an explicit type
signature.&lt;&#x2f;p&gt;
&lt;p&gt;So, what&#x27;s so special about this &lt;code&gt;interact&lt;&#x2f;code&gt; function? Two words: &lt;em&gt;side effects&lt;&#x2f;em&gt;.
More precisely, it took away the concern of side-effects from the user. &lt;code&gt;count&lt;&#x2f;code&gt;
belongs in the realm of &lt;em&gt;pure&lt;&#x2f;em&gt; functions. It has no worries about file handles
or operating systems. It&#x27;s &lt;code&gt;(String) -&amp;gt; String&lt;&#x2f;code&gt;. I wanted to emphasize this with
the rewrite. Look at that empty line. Now you see a boundary between 2 worlds.&lt;&#x2f;p&gt;
&lt;p&gt;This may all seem contrived. But when I learned about &lt;a href=&quot;http:&#x2f;&#x2f;hackage.haskell.org&#x2f;package&#x2f;base-4.11.1.0&#x2f;docs&#x2f;Prelude.html#v:interact&quot;&gt;this function in
Haskell&lt;&#x2f;a&gt;, I was blown away.&lt;&#x2f;p&gt;
&lt;p&gt;It&#x27;s like a great magic trick: you are presented a scenario, say, writing
a little script. Maybe you need to process some CLI output and print out a CSV
or JSON string (literally 90% of the script I write).  A Haskell programmer
would jump into the bottom level of the problem and start writing these little
pure functions: one to split the string, one to convert some numbers, one to
manipulate a list, one to match some patterns...gradually the broken-down
absractions get built back up via function composition. You can see the light at
the end of the tunnel, yes, yes! If you feed this list into that function that
returns a string you&#x27;ll have the right value to print out!  Okay, now the
problem is solved in the pure functional world! The only thing left to do is...&lt;&#x2f;p&gt;
&lt;p&gt;Now, the setup of the magic is complete. Now, you are onboard with the solution,
you thought the problem through with the magician...you are distracted. The
ending came so...quickly, but unexpected. What? You just feed your solution to
this &lt;code&gt;interact&lt;&#x2f;code&gt; function and...that&#x27;s it? I was expecting some &lt;code&gt;readLine&lt;&#x2f;code&gt;s or
&lt;code&gt;print&lt;&#x2f;code&gt;s (okay, at least 1 &lt;code&gt;print&lt;&#x2f;code&gt; statement)!&lt;&#x2f;p&gt;
&lt;p&gt;That&#x27;s the thing: &lt;code&gt;interact&lt;&#x2f;code&gt; deals with &lt;em&gt;two&lt;&#x2f;em&gt; side effects, the input and the
output. But its user deals with &lt;em&gt;zero&lt;&#x2f;em&gt;. It&#x27;s as if the two effects &amp;quot;cancel&amp;quot; each
other out! It&#x27;s a &lt;em&gt;neat&lt;&#x2f;em&gt; trick, really. Small, low-key, easy to miss. But I&#x27;m
glad I noticed it and come to appreciate its power and simplicity.&lt;&#x2f;p&gt;
</description>
                <pubDate>Sat, 01 Sep 2018 11:08:57 -0700</pubDate>
                <link>https://duan.ca/2018/09/01/magical-interaction/</link>
                <guid isPermaLink="true">https://duan.ca/2018/09/01/magical-interaction/</guid>
            </item>
            <item>
                <title>A Tale of Two Dates</title>
                <description>&lt;p&gt;Recently, I discovered a curious thing about &lt;code&gt;Date&lt;&#x2f;code&gt;s in two large projects
I work on. Simply put, both projects receives, from various HTTP endpoints, the
same object component: a timestamp, and a duration. Combining these two pieces,
both projects derives two &lt;code&gt;Foundation.Date&lt;&#x2f;code&gt;s to represent a time range. So far,
so good.&lt;&#x2f;p&gt;
&lt;p&gt;However, project &lt;code&gt;A&lt;&#x2f;code&gt; uses &lt;code&gt;Fonudation.DateInterval&lt;&#x2f;code&gt; to represent this concept,
while project &lt;code&gt;B&lt;&#x2f;code&gt; uses &lt;code&gt;Range&amp;lt;Date&amp;gt;&lt;&#x2f;code&gt;. But why? Why represent the same component
differently? What a gigantic waste of brain power for everyone on both projects!&lt;&#x2f;p&gt;
&lt;p&gt;So I set out to unify this thing. Wherever a &lt;code&gt;Range&lt;&#x2f;code&gt; literal is used, I swap in
&lt;code&gt;DateInterval.init(start:end:)&lt;&#x2f;code&gt;; &lt;code&gt;Range.lowerBound&lt;&#x2f;code&gt; becomes
&lt;code&gt;DateInterval.start&lt;&#x2f;code&gt;; &lt;code&gt;Range.upperBound&lt;&#x2f;code&gt; becomes &lt;code&gt;DateInterval.end&lt;&#x2f;code&gt;, etc. It
didn&#x27;t take long to complete the conversion to &lt;code&gt;DateInterval&lt;&#x2f;code&gt; in project &lt;code&gt;B&lt;&#x2f;code&gt;,
now it builds and runs!&lt;&#x2f;p&gt;
&lt;p&gt;Oh, wait, why are some tests failing in project &lt;code&gt;B&lt;&#x2f;code&gt;? Shouldn&#x27;t this just be an
mechanical change?&lt;&#x2f;p&gt;
&lt;p&gt;I spent time investigating. The failing tests are for some very specific
business logic that I&#x27;m not familiar with. So things took a while to become
clear. What felt like a long time later, I realized my mistake.&lt;&#x2f;p&gt;
&lt;p&gt;(I&#x27;m sorry if this has been obvious to you. You are a better Swift programmer!)&lt;&#x2f;p&gt;
&lt;p&gt;Somewhere in project &lt;code&gt;B&lt;&#x2f;code&gt; is the following:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;keyword entity&quot;&gt;struct&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;support class&quot;&gt;Item&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
    &lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;range&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;Range&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Date&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;
}

&lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;keyword entity&quot;&gt;struct&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;support class&quot;&gt;Container&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
    &lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;items&lt;&#x2f;span&gt;: [&lt;span class=&quot;support class&quot;&gt;Item&lt;&#x2f;span&gt;]
}

&lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;func&lt;&#x2f;span&gt; &lt;span class=&quot;entity name function&quot;&gt;&lt;span class=&quot;variable function&quot;&gt;containerFactory&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;(&lt;span class=&quot;variable parameter&quot;&gt;range&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;Range&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Date&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;, &lt;span class=&quot;variable parameter&quot;&gt;items&lt;&#x2f;span&gt;: [&lt;span class=&quot;support class&quot;&gt;Item&lt;&#x2f;span&gt;])&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; -&amp;gt; &lt;span class=&quot;support class&quot;&gt;Container&lt;&#x2f;span&gt; {
    &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&#x2f;&lt;&#x2f;span&gt; pretend there&amp;#39;s more code here&lt;&#x2f;span&gt;

    &lt;span class=&quot;keyword control&quot;&gt;return&lt;&#x2f;span&gt; &lt;span class=&quot;support class&quot;&gt;Conatiner&lt;&#x2f;span&gt;(&lt;span class=&quot;variable parameter&quot;&gt;items&lt;&#x2f;span&gt;: items&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;filter { $&lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;range&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;contains(range&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;lowerBound) })
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;And of course, after my &amp;quot;refactor&amp;quot;, it became&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;keyword entity&quot;&gt;struct&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;support class&quot;&gt;Item&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
    &lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;range&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;DateInterval&lt;&#x2f;span&gt;
}

&lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;keyword entity&quot;&gt;struct&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;support class&quot;&gt;Container&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
    &lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;items&lt;&#x2f;span&gt;: [&lt;span class=&quot;support class&quot;&gt;Item&lt;&#x2f;span&gt;]
}

&lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;func&lt;&#x2f;span&gt; &lt;span class=&quot;entity name function&quot;&gt;&lt;span class=&quot;variable function&quot;&gt;containerFactory&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;(&lt;span class=&quot;variable parameter&quot;&gt;range&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;DateInterval&lt;&#x2f;span&gt;, &lt;span class=&quot;variable parameter&quot;&gt;items&lt;&#x2f;span&gt;: [&lt;span class=&quot;support class&quot;&gt;Item&lt;&#x2f;span&gt;])&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; -&amp;gt; &lt;span class=&quot;support class&quot;&gt;Container&lt;&#x2f;span&gt; {
    &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&#x2f;&lt;&#x2f;span&gt; pretend there&amp;#39;s more code here&lt;&#x2f;span&gt;

    &lt;span class=&quot;keyword control&quot;&gt;return&lt;&#x2f;span&gt; &lt;span class=&quot;support class&quot;&gt;Conatiner&lt;&#x2f;span&gt;(&lt;span class=&quot;variable parameter&quot;&gt;items&lt;&#x2f;span&gt;: items&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;filter { $&lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;range&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;contains(range&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;start) })
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Tests for &lt;code&gt;containerFactory&lt;&#x2f;code&gt; failed. And here&#x27;s why: &lt;strong&gt;&lt;code&gt;DateInterval.contains&lt;&#x2f;code&gt;
is inclusive for its upper bound (&lt;code&gt;.end&lt;&#x2f;code&gt;), whereas &lt;code&gt;Range.contains&lt;&#x2f;code&gt; isn&#x27;t!&lt;&#x2f;strong&gt; You
can see it plainly by running the following&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;keyword other import&quot;&gt;import&lt;&#x2f;span&gt; &lt;span class=&quot;support class&quot;&gt;Foundation&lt;&#x2f;span&gt;

&lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; sooner = &lt;span class=&quot;support class&quot;&gt;Date&lt;&#x2f;span&gt;(&lt;span class=&quot;variable parameter&quot;&gt;timeIntervalSince1970&lt;&#x2f;span&gt;: &lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;)
&lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; later = sooner&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;addingTimeInterval(&lt;span class=&quot;constant numeric decimal&quot;&gt;1000&lt;&#x2f;span&gt;)

&lt;span class=&quot;support class&quot;&gt;DateInterval&lt;&#x2f;span&gt;(&lt;span class=&quot;variable parameter&quot;&gt;start&lt;&#x2f;span&gt;: sooner, &lt;span class=&quot;variable parameter&quot;&gt;end&lt;&#x2f;span&gt;: later)&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;contains(later) &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; true&lt;&#x2f;span&gt;
(sooner&lt;span class=&quot;keyword operator&quot;&gt;..&amp;lt;&lt;&#x2f;span&gt;later)&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;contains(later)                        &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; false&lt;&#x2f;span&gt;
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;So here&#x27;s what stumped me:&lt;&#x2f;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The 2 projects chose to interpret the same component differently, which
I didn&#x27;t not expect.&lt;&#x2f;p&gt;
&lt;&#x2f;li&gt;
&lt;li&gt;
&lt;p&gt;I didn&#x27;t know how &lt;code&gt;Foundation.DateInterval&lt;&#x2f;code&gt; works.&lt;&#x2f;p&gt;
&lt;&#x2f;li&gt;
&lt;&#x2f;ol&gt;
&lt;p&gt;Well, today I learned.&lt;&#x2f;p&gt;
</description>
                <pubDate>Sat, 25 Aug 2018 17:11:43 -0700</pubDate>
                <link>https://duan.ca/2018/08/25/a-tale-of-two-dates/</link>
                <guid isPermaLink="true">https://duan.ca/2018/08/25/a-tale-of-two-dates/</guid>
            </item>
            <item>
                <title>Supporting Foundation.Data Without Depending On It</title>
                <description>&lt;p&gt;While implementing some file I&#x2f;O APIs in &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;Pathos&quot;&gt;Pathos&lt;&#x2f;a&gt;, I decided reading&#x2f;writing
file content as &lt;code&gt;Foundation.Data&lt;&#x2f;code&gt; is kind of important (can you blame me?). But
Pathos, by accident, does not depend on Swift &lt;code&gt;Foundation&lt;&#x2f;code&gt;. Now what?&lt;&#x2f;p&gt;
&lt;p&gt;After browsing the &lt;a href=&quot;https:&#x2f;&#x2f;developer.apple.com&#x2f;documentation&#x2f;foundation&#x2f;data&quot;&gt;documentation&lt;&#x2f;a&gt;, a pretty good solution emerged: &lt;code&gt;Data&lt;&#x2f;code&gt; is
a sequence of bytes! Lets say we hand our users some bytes, they can easily
construct a &lt;code&gt;Data&lt;&#x2f;code&gt; from it:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;content&lt;&#x2f;span&gt;: [&lt;span class=&quot;support class&quot;&gt;UInt8&lt;&#x2f;span&gt;] = &lt;span class=&quot;keyword control&quot;&gt;try&lt;&#x2f;span&gt; readBytes(fromPath &lt;span class=&quot;string quoted double&quot;&gt;&amp;quot;&#x2f;tmp&#x2f;test&amp;quot;&lt;&#x2f;span&gt;)
&lt;span class=&quot;support class&quot;&gt;Data&lt;&#x2f;span&gt;(&lt;span class=&quot;variable parameter&quot;&gt;bytes&lt;&#x2f;span&gt;: content)
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Okay, so this built-in initializer makes &lt;code&gt;[UInt8]&lt;&#x2f;code&gt; an acceptable substitute for
returning &lt;code&gt;Data&lt;&#x2f;code&gt;. What can we do about about &lt;code&gt;Data&lt;&#x2f;code&gt; as input? Well, turns out,
&lt;code&gt;Data&lt;&#x2f;code&gt; is a &lt;code&gt;Collection&lt;&#x2f;code&gt; of &lt;code&gt;UInt8&lt;&#x2f;code&gt;s! So we can accept &lt;code&gt;Data&lt;&#x2f;code&gt; indirectly like
so:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;func&lt;&#x2f;span&gt; &lt;span class=&quot;entity name function&quot;&gt;&lt;span class=&quot;variable function&quot;&gt;write&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Bytes&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;(&lt;span class=&quot;constant language other&quot;&gt;_&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;bytes&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;Bytes&lt;&#x2f;span&gt;)
    &lt;span class=&quot;keyword control&quot;&gt;where&lt;&#x2f;span&gt; &lt;span class=&quot;support class&quot;&gt;Bytes&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;Collection&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;Bytes&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Element&lt;&#x2f;span&gt; == &lt;span class=&quot;support class&quot;&gt;UInt8&lt;&#x2f;span&gt;
{
    &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; blah&lt;&#x2f;span&gt;
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;User can pass in a &lt;code&gt;Data&lt;&#x2f;code&gt; as argument and it just works™.&lt;&#x2f;p&gt;
&lt;p&gt;The only disadvantage of supporting &lt;code&gt;Data&lt;&#x2f;code&gt; in these ways is that it requires
your user to discover it either via your excellent documentation, or through
their super good knowledge of &lt;code&gt;Foundation&lt;&#x2f;code&gt;.&lt;&#x2f;p&gt;
&lt;p&gt;&lt;em&gt;Update: this could also &lt;a href=&quot;https:&#x2f;&#x2f;mastodon.social&#x2f;@helge&#x2f;100573358160444340&quot;&gt;be&lt;&#x2f;a&gt; &lt;a href=&quot;https:&#x2f;&#x2f;twitter.com&#x2f;daniel_dunbar&#x2f;status&#x2f;1030938273047179264&quot;&gt;slower&lt;&#x2f;a&gt; than using Data directly. Luckily
I&#x27;m only doing file I&#x2f;O here.&lt;&#x2f;em&gt;&lt;&#x2f;p&gt;
&lt;p&gt;But this is pretty nice, regardless.&lt;&#x2f;p&gt;
</description>
                <pubDate>Sat, 18 Aug 2018 11:00:41 -0700</pubDate>
                <link>https://duan.ca/2018/08/18/supporting-data-without-depending-on-it/</link>
                <guid isPermaLink="true">https://duan.ca/2018/08/18/supporting-data-without-depending-on-it/</guid>
            </item>
            <item>
                <title>Unix File Permissions In Swift</title>
                <description>&lt;p&gt;Wrap file permissions from &lt;code&gt;stat&lt;&#x2f;code&gt; and &lt;code&gt;chmod&lt;&#x2f;code&gt; in an &lt;code&gt;OptionSet&lt;&#x2f;code&gt; in Swift.&lt;&#x2f;p&gt;
&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe src=&quot;https:&#x2f;&#x2f;www.youtube.com&#x2f;embed&#x2f;1ZrouR_F-AU&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen&gt;&lt;&#x2f;iframe&gt;
&lt;&#x2f;div&gt;
</description>
                <pubDate>Sun, 06 May 2018 16:43:20 -0700</pubDate>
                <link>https://duan.ca/2018/05/06/unix-file-permissions-in-swift/</link>
                <guid isPermaLink="true">https://duan.ca/2018/05/06/unix-file-permissions-in-swift/</guid>
            </item>
            <item>
                <title>An Interpreter Without A Language</title>
                <description>&lt;p&gt;From the &lt;a href=&quot;&#x2f;2018&#x2f;01&#x2f;13&#x2f;coding-without-a-language&#x2f;&quot;&gt;AST&lt;&#x2f;a&gt; and &lt;a href=&quot;&#x2f;2018&#x2f;01&#x2f;20&#x2f;scopes&#x2f;&quot;&gt;scopes&lt;&#x2f;a&gt;, come a simple interpreter. This intepreter can &amp;quot;execute&amp;quot; the fibonacci
function AST and produce a correct results.&lt;&#x2f;p&gt;
&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe src=&quot;https:&#x2f;&#x2f;www.youtube.com&#x2f;embed&#x2f;C16PD44qyOY&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;&#x2f;iframe&gt;
&lt;&#x2f;div&gt;
</description>
                <pubDate>Tue, 30 Jan 2018 12:53:38 -0800</pubDate>
                <link>https://duan.ca/2018/01/30/an-interpreter-without-a-language/</link>
                <guid isPermaLink="true">https://duan.ca/2018/01/30/an-interpreter-without-a-language/</guid>
            </item>
            <item>
                <title>Scopes Without A Language</title>
                <description>&lt;p&gt;A short video on the concept of static scope.&lt;&#x2f;p&gt;
&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe src=&quot;https:&#x2f;&#x2f;www.youtube.com&#x2f;embed&#x2f;o0jwyd8nUK4&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen&gt;&lt;&#x2f;iframe&gt;
&lt;&#x2f;div&gt;
</description>
                <pubDate>Sat, 20 Jan 2018 19:50:24 -0800</pubDate>
                <link>https://duan.ca/2018/01/20/scopes/</link>
                <guid isPermaLink="true">https://duan.ca/2018/01/20/scopes/</guid>
            </item>
            <item>
                <title>Coding Without A Language</title>
                <description>&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe src=&quot;https:&#x2f;&#x2f;www.youtube.com&#x2f;embed&#x2f;OKjQtn_Gvug&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;&#x2f;iframe&gt;
&lt;&#x2f;div&gt;
&lt;p&gt;Sorry for the click-baity title. I actually really like this one.&lt;&#x2f;p&gt;
</description>
                <pubDate>Sat, 13 Jan 2018 12:07:19 -0800</pubDate>
                <link>https://duan.ca/2018/01/13/coding-without-a-language/</link>
                <guid isPermaLink="true">https://duan.ca/2018/01/13/coding-without-a-language/</guid>
            </item>
            <item>
                <title>Scripting A &#x27;cat&#x27; Under 1 Minute</title>
                <description>&lt;p&gt;This video demonstrates a few things: the &lt;code&gt;readLine&lt;&#x2f;code&gt; standard library function, scripting with Swift, and
pattern matching as loop conditions. Enjoy!&lt;&#x2f;p&gt;
&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe src=&quot;https:&#x2f;&#x2f;www.youtube.com&#x2f;embed&#x2f;8rAqzvChbak&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen&gt;&lt;&#x2f;iframe&gt;
&lt;&#x2f;div&gt;
</description>
                <pubDate>Sat, 06 Jan 2018 18:34:39 -0800</pubDate>
                <link>https://duan.ca/2018/01/06/cat-under-1-minute/</link>
                <guid isPermaLink="true">https://duan.ca/2018/01/06/cat-under-1-minute/</guid>
            </item>
            <item>
                <title>Building &#x27;pwd&#x27; Under 1 Minute In Swift</title>
                <description>&lt;p&gt;I guess I&#x27;m starting a series of minute-long videos. In this first video, I built &lt;code&gt;pwd&lt;&#x2f;code&gt; out of &lt;code&gt;getcwd&lt;&#x2f;code&gt;. The
code turned out shorter than I imagined (1 line). Which is a good demonstration of Swift&#x27;s great C-interop
capability.&lt;&#x2f;p&gt;
&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https:&#x2f;&#x2f;www.youtube.com&#x2f;embed&#x2f;YR4MCcMnHrI&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen&gt;&lt;&#x2f;iframe&gt;
&lt;&#x2f;div&gt;
&lt;p&gt;Some details are lost in this video, however. For example, the POSIX standard actually says &lt;code&gt;getcwd&lt;&#x2f;code&gt;&#x27;s 2nd
argument being &lt;code&gt;0&lt;&#x2f;code&gt; is undefined. Luckily, both macOS and Linux define it the way we want (allocate as much
memory as needed). Swift&#x27;s handling of &lt;code&gt;char *&lt;&#x2f;code&gt; aka &lt;code&gt;UnsafeMutablePointer&amp;lt;CChar&amp;gt;&lt;&#x2f;code&gt; in context of a &lt;code&gt;var&lt;&#x2f;code&gt; array
is also very cool.&lt;&#x2f;p&gt;
</description>
                <pubDate>Wed, 27 Dec 2017 01:13:07 -0800</pubDate>
                <link>https://duan.ca/2017/12/27/building-pwd-under-1-minute-in-swift/</link>
                <guid isPermaLink="true">https://duan.ca/2017/12/27/building-pwd-under-1-minute-in-swift/</guid>
            </item>
            <item>
                <title>Contributing To Open-Source Swift</title>
                <description>&lt;p&gt;I discover, report, fix and merge a bug in the open-source Foundation project. And why, yes, on YouTube.&lt;&#x2f;p&gt;
&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe src=&quot;https:&#x2f;&#x2f;www.youtube.com&#x2f;embed&#x2f;rwuj80W8TtI&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen&gt;&lt;&#x2f;iframe&gt;
&lt;&#x2f;div&gt;
&lt;ul&gt;
&lt;li&gt;Pull request: &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;apple&#x2f;swift-corelibs-foundation&#x2f;pull&#x2f;1376&quot;&gt;https:&#x2f;&#x2f;github.com&#x2f;apple&#x2f;swift-corelibs-foundation&#x2f;pull&#x2f;1376&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;SR-6647: &lt;a href=&quot;https:&#x2f;&#x2f;bugs.swift.org&#x2f;browse&#x2f;SR-6647&quot;&gt;https:&#x2f;&#x2f;bugs.swift.org&#x2f;browse&#x2f;SR-6647&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;&#x2f;ul&gt;
</description>
                <pubDate>Sat, 23 Dec 2017 13:21:10 -0800</pubDate>
                <link>https://duan.ca/2017/12/23/contributing-to-open-source-foundation/</link>
                <guid isPermaLink="true">https://duan.ca/2017/12/23/contributing-to-open-source-foundation/</guid>
            </item>
            <item>
                <title>BitArray The Final Act</title>
                <description>&lt;p&gt;Alas, there&#x27;s the 3rd and last video about &lt;code&gt;BitArray&lt;&#x2f;code&gt;, originated on my spark of inspiration on a Caltrain
ride home. This makes my first YouTube playlist as well, even tho the first 2 videos were planned to be
completely separate.&lt;&#x2f;p&gt;
&lt;p&gt;We added more standard library functionalities to BitArray (ExpressibleByArrayLiteral,
CustomStringConvertible, Equatable, etc). Then, we added documentation and other open-source things left
undone from &amp;quot;episode 2&amp;quot;.&lt;&#x2f;p&gt;
&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe src=&quot;https:&#x2f;&#x2f;www.youtube.com&#x2f;embed&#x2f;ckrd_FoFMl0&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen&gt;&lt;&#x2f;iframe&gt;
&lt;&#x2f;div&gt;
</description>
                <pubDate>Tue, 19 Dec 2017 12:17:49 -0800</pubDate>
                <link>https://duan.ca/2017/12/19/bitarray-final-act/</link>
                <guid isPermaLink="true">https://duan.ca/2017/12/19/bitarray-final-act/</guid>
            </item>
            <item>
                <title>Making An Open-Source Swift Project</title>
                <description>&lt;p&gt;This video shows what it takes to open source a Swift project. Starting from some code in a playground,
I created a framework that supports distribution via Swift Package Manager, CocoaPods, Xcode project and
Carthage. The framework can be used across iOS, macOS, watchOS, tvOS and Linux. In addition, we also added
SwiftLint to the project, added a Makefile, put everything on GitHub and set up continuous integration via
Travis. README, COC, LICENSE and CHANGELOG are stubbed in as well.&lt;&#x2f;p&gt;
&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe src=&quot;https:&#x2f;&#x2f;www.youtube.com&#x2f;embed&#x2f;pA0T1CdqMt8&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen&gt;&lt;&#x2f;iframe&gt;
&lt;&#x2f;div&gt;
&lt;p&gt;This is not at all a comprehensive list of things a good Open Source project should have. We are still missing
the version tag, documentation generation, automatic Carthage binary generation, test coverage...&lt;&#x2f;p&gt;
&lt;p&gt;Anyways, here&#x27;s some stuff mentioned in the video:&lt;&#x2f;p&gt;
&lt;ul&gt;
&lt;li&gt;Sample project from the video: &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;BitArray&quot;&gt;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;BitArray&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;Video of me writing the code in this project: &lt;a href=&quot;https:&#x2f;&#x2f;www.youtube.com&#x2f;watch?v=-k_jrIoD56k&quot;&gt;https:&#x2f;&#x2f;www.youtube.com&#x2f;watch?v=-k_jrIoD56k&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;Swift Package Manager: &lt;a href=&quot;https:&#x2f;&#x2f;swift.org&#x2f;package-manager&#x2f;&quot;&gt;https:&#x2f;&#x2f;swift.org&#x2f;package-manager&#x2f;&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;CocoaPods: &lt;a href=&quot;https:&#x2f;&#x2f;cocoapods.org&quot;&gt;https:&#x2f;&#x2f;cocoapods.org&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;Carthage: &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;Carthage&#x2f;Carthage&quot;&gt;https:&#x2f;&#x2f;github.com&#x2f;Carthage&#x2f;Carthage&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;Xcconfigs for universal framework: &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;mrackwitz&#x2f;xcconfigs&quot;&gt;https:&#x2f;&#x2f;github.com&#x2f;mrackwitz&#x2f;xcconfigs&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;SwiftLint: &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;realm&#x2f;SwiftLint&quot;&gt;https:&#x2f;&#x2f;github.com&#x2f;realm&#x2f;SwiftLint&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;Travis CI: &lt;a href=&quot;https:&#x2f;&#x2f;travis-ci.org&quot;&gt;https:&#x2f;&#x2f;travis-ci.org&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;&#x2f;ul&gt;
</description>
                <pubDate>Sun, 17 Dec 2017 21:24:43 -0800</pubDate>
                <link>https://duan.ca/2017/12/17/making-an-open-source-swift-project/</link>
                <guid isPermaLink="true">https://duan.ca/2017/12/17/making-an-open-source-swift-project/</guid>
            </item>
            <item>
                <title>Let&#x27;s Build A BitArray In Swift</title>
                <description>&lt;p&gt;In this video, I build a space-efficient BitArray that confirms to &lt;code&gt;RandomAccessCollection&lt;&#x2f;code&gt; in Swift in
a playground. It involves some basic (but neat!) bitwise manipulation tricks.&lt;&#x2f;p&gt;
&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe src=&quot;https:&#x2f;&#x2f;www.youtube.com&#x2f;embed&#x2f;-k_jrIoD56k&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen&gt;&lt;&#x2f;iframe&gt;
&lt;&#x2f;div&gt;
&lt;p&gt;I guess I&#x27;m a YouTuber now. You can subscribe to my &lt;a href=&quot;https:&#x2f;&#x2f;www.youtube.com&#x2f;channel&#x2f;UCkBVC0dMgyUnxzettP7qE-A&quot;&gt;channel&lt;&#x2f;a&gt; 😛.&lt;&#x2f;p&gt;
</description>
                <pubDate>Tue, 12 Dec 2017 22:51:04 -0800</pubDate>
                <link>https://duan.ca/2017/12/12/lets-build-a-bitarray-in-swift/</link>
                <guid isPermaLink="true">https://duan.ca/2017/12/12/lets-build-a-bitarray-in-swift/</guid>
            </item>
            <item>
                <title>List Comprehension In Swift</title>
                <description>&lt;p&gt;Let&#x27;s explore ways to add list comprehension to Swift.&lt;&#x2f;p&gt;
&lt;h2&gt;Motivation&lt;&#x2f;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2f;&#x2f;en.wikipedia.org&#x2f;wiki&#x2f;List_comprehension&quot;&gt;List comprehension&lt;&#x2f;a&gt; should be no stranger to a Python or (and?) Haskell user. It&#x27;s a really compact syntax
that deals with &lt;a href=&quot;https:&#x2f;&#x2f;en.wikipedia.org&#x2f;wiki&#x2f;Cartesian_product&quot;&gt;Cartesian product&lt;&#x2f;a&gt; of lists. In the case of Python, it&#x27;s probably responsible for the lack
of evolution of lambda expressions, since it&#x27;s much nicer to write one-liners with it in place of &lt;code&gt;map&lt;&#x2f;code&gt;s and
&lt;code&gt;filter&lt;&#x2f;code&gt;s.&lt;&#x2f;p&gt;
&lt;p&gt;Here&#x27;s an example of an list comprehension in Haskell from Wikipedia:&lt;&#x2f;p&gt;
&lt;pre&gt;a = [(x,y) | x &lt;- [1..5], y &lt;- [3..5]]
-- [(1,3),(1,4),(1,5),(2,3),(2,4) ...
&lt;&#x2f;pre&gt;
&lt;p&gt;In this example, a list of pair of integers is constructed from 2 lists of integers.&lt;&#x2f;p&gt;
&lt;p&gt;Here is what that example would be in Python:&lt;&#x2f;p&gt;
&lt;pre&gt;a = [(x, y) for x in range(1,6) for y in range(3, 6)]
# [(1, 3), (1, 4), (1, 5), (2, 3), (2, 4) ...
&lt;&#x2f;pre&gt;
&lt;p&gt;Here&#x27;s what it would be in mathematics (except we are dealing with sets, not lists, but I&#x27;ll only refer to
lists from here on.):&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;code&gt;Let (a, b) be an ordered list of elements

{(x, y)|x ∈ {1,2,3,4,5}, y ∈ {3,4,5}}
&lt;&#x2f;code&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;One can filter out unwanted elements with predicates, and apply arbitrary functions to elements of the
result. Let&#x27;s say we only want even numbers from the first list, and we want the sum of x and y, continuing on
our examples:&lt;&#x2f;p&gt;
&lt;pre&gt;a = [x+y | x &lt;- [1..5], y &lt;- [3..5], x `mod` 2 == 0]
&lt;&#x2f;pre&gt;
&lt;pre&gt;a = [x + y for x in range(1,6) for y in range(3, 6) if x % 2 == 0]
&lt;&#x2f;pre&gt;
&lt;pre&gt;&lt;code&gt;{x+y|x ∈ {1,2,3,4,5}, y ∈ {3,4,5}, x is even}
&lt;&#x2f;code&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;In theory, this syntax can be applied to an arbitrary number of lists. Putting aside how often this need comes
up in day-to-day programming in your domain, it should be obvious that it&#x27;s alternative, be it nested loops or
&lt;code&gt;map&lt;&#x2f;code&gt;s and &lt;code&gt;filter&lt;&#x2f;code&gt;s, is pretty clumsy in comparison.&lt;&#x2f;p&gt;
&lt;h2&gt;Adding List Comprehension in Swift&lt;&#x2f;h2&gt;
&lt;p&gt;A comprehension can be considered in 3 parts:&lt;&#x2f;p&gt;
&lt;ol&gt;
&lt;li&gt;some lists, each may contain a different type of elements.&lt;&#x2f;li&gt;
&lt;li&gt;a predicate (or a series of them joined logically) to filter out elements.&lt;&#x2f;li&gt;
&lt;li&gt;a function to process the combination of elements into results.&lt;&#x2f;li&gt;
&lt;&#x2f;ol&gt;
&lt;p&gt;In Swift, if our input is only one list, there&#x27;s a pretty sweet way to achieve that:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;list&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;filter(predicate)&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;map(processor)
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;To make comprehension work with more lists, we have some syntax options.&lt;&#x2f;p&gt;
&lt;h3&gt;Option One&lt;&#x2f;h3&gt;
&lt;p&gt;The &amp;quot;brute force&amp;quot; option would be a function that parameterize all 3 parts of the comprehension. Such as&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; going with order of appearance in Python&#x2f;Haskell syntax&lt;&#x2f;span&gt;
&lt;span class=&quot;storage type function&quot;&gt;func&lt;&#x2f;span&gt; &lt;span class=&quot;entity name function&quot;&gt;&lt;span class=&quot;variable function&quot;&gt;comprehension&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Element&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;List&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;Result&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;(
    &lt;span class=&quot;variable parameter&quot;&gt;predicate&lt;&#x2f;span&gt;: (&lt;span class=&quot;support class&quot;&gt;Element&lt;&#x2f;span&gt;) -&amp;gt; &lt;span class=&quot;support class&quot;&gt;Bool&lt;&#x2f;span&gt;,
    &lt;span class=&quot;variable parameter&quot;&gt;list&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;List&lt;&#x2f;span&gt;,
    &lt;span class=&quot;variable parameter&quot;&gt;processor&lt;&#x2f;span&gt;: (&lt;span class=&quot;support class&quot;&gt;Element&lt;&#x2f;span&gt;) -&amp;gt; &lt;span class=&quot;support class&quot;&gt;Result&lt;&#x2f;span&gt;
) &lt;span class=&quot;keyword control&quot;&gt;where&lt;&#x2f;span&gt;
    &lt;span class=&quot;support class&quot;&gt;List&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;Sequence&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;List&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Element&lt;&#x2f;span&gt; == &lt;span class=&quot;support class&quot;&gt;Element&lt;&#x2f;span&gt;

{
    &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; implementation&lt;&#x2f;span&gt;
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;To supporting more than one list, just add more parameters to both types and the function itself.&lt;&#x2f;p&gt;
&lt;p&gt;(Can&#x27;t wait until we can have &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;apple&#x2f;swift&#x2f;blob&#x2f;master&#x2f;docs&#x2f;GenericsManifesto.md#variadic-generics&quot;&gt;variadic generic parameters&lt;&#x2f;a&gt;!)&lt;&#x2f;p&gt;
&lt;h3&gt;Option Two&lt;&#x2f;h3&gt;
&lt;p&gt;Deploy more syntax tricks. Somehow make it visually similar to the math&#x2f;Haskell&#x2f;Python notation. If we can
accept some temporary data structure and introduce&#x2f;implement some operators, there&#x27;d be many possibilities.&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&#x2f;&lt;&#x2f;span&gt; Just an example of the infinite possibilities.&lt;&#x2f;span&gt;
processor | list0 &amp;amp;&amp;amp;&amp;amp; list1 | predicate
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;I&#x27;ll leave the implementation of this example as an exercise to the reader.&lt;&#x2f;p&gt;
&lt;h3&gt;Option That I Like&lt;&#x2f;h3&gt;
&lt;p&gt;I spent quite some time exploring the realm of possibilities in &amp;quot;option two&amp;quot;. However, introducing data
structures and custom operators just to do what &amp;quot;option one&amp;quot; offers seems really unappealing. It&#x27;s not
entirely clear that doing so would be &amp;quot;Swift-y&amp;quot; anyways! Eventually, I did find an arrangement that fits in
Swift, and requires no fancy syntax trickery.&lt;&#x2f;p&gt;
&lt;p&gt;The result of list comprehension is a list. The goal of this operation is to &lt;em&gt;construct&lt;&#x2f;em&gt; a list. Yep, thinking
along this line, it became obvious that using a &amp;quot;list&amp;quot;&#x27;s initializer is just natural:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; a = &lt;span class=&quot;support class&quot;&gt;Array&lt;&#x2f;span&gt;(&lt;span class=&quot;constant numeric decimal&quot;&gt;1&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;..&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;constant numeric decimal&quot;&gt;5&lt;&#x2f;span&gt;, &lt;span class=&quot;constant numeric decimal&quot;&gt;3&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;..&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;constant numeric decimal&quot;&gt;5&lt;&#x2f;span&gt;, &lt;span class=&quot;keyword control&quot;&gt;where&lt;&#x2f;span&gt;: { n, &lt;span class=&quot;constant language other&quot;&gt;_&lt;&#x2f;span&gt; &lt;span class=&quot;keyword control&quot;&gt;in&lt;&#x2f;span&gt; n % &lt;span class=&quot;constant numeric decimal&quot;&gt;2&lt;&#x2f;span&gt; == &lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt; }) { (&lt;span class=&quot;keyword operator&quot;&gt;$&lt;&#x2f;span&gt;&lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;, $&lt;span class=&quot;constant numeric decimal&quot;&gt;1&lt;&#x2f;span&gt;) }
&lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; [(2,3),(2,4),(2,5) ...&lt;&#x2f;span&gt;
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;The processing function is at the end to take advantage of the trailing closure syntax. It&#x27;s nicer when
there&#x27;s not predicate:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; a = &lt;span class=&quot;support class&quot;&gt;Array&lt;&#x2f;span&gt;(&lt;span class=&quot;constant numeric decimal&quot;&gt;1&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;..&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;constant numeric decimal&quot;&gt;5&lt;&#x2f;span&gt;, &lt;span class=&quot;constant numeric decimal&quot;&gt;3&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;..&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;constant numeric decimal&quot;&gt;5&lt;&#x2f;span&gt;) { (&lt;span class=&quot;keyword operator&quot;&gt;$&lt;&#x2f;span&gt;&lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;, $&lt;span class=&quot;constant numeric decimal&quot;&gt;1&lt;&#x2f;span&gt;) }
&lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; [(1,3),(1,4),(1,5),(2,3),(2,4) ...&lt;&#x2f;span&gt;
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;This syntax seems both succinct and Swift-y.&lt;&#x2f;p&gt;
&lt;p&gt;I put an implementation on &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;Comprehension&quot;&gt;github&lt;&#x2f;a&gt;, in case you find it useful.&lt;&#x2f;p&gt;
&lt;h2&gt;Parting Thoughts&lt;&#x2f;h2&gt;
&lt;p&gt;There&#x27;s no doubt that the conclusion in this post is imperfect. Though it feels more Swift-y, it deviates from
the mathematical syntax by a lot. We can only implement it for finite number of lists. When many lists are
involved, using a embedded closure as the predicate would make the compiler complain that the expression is
too complex. We suffer from the normal woes with Swift closures where anonymous arguments (&lt;code&gt;$0&lt;&#x2f;code&gt;, &lt;code&gt;$1&lt;&#x2f;code&gt;, etc)
won&#x27;t work unless the last one is mentioned in the closure&#x27;s body. Overloading &lt;code&gt;Array&lt;&#x2f;code&gt; initializer may
negatively affect compilation speed in large projects.&lt;&#x2f;p&gt;
&lt;p&gt;Not all of these issues are temporary.&lt;&#x2f;p&gt;
&lt;p&gt;Does list comprehension warrant a language change in Swift? Can you think of better ways to implement it
with the current compiler?&lt;&#x2f;p&gt;
</description>
                <pubDate>Sat, 09 Dec 2017 12:26:30 -0800</pubDate>
                <link>https://duan.ca/2017/12/09/list-comprehension-in-swift/</link>
                <guid isPermaLink="true">https://duan.ca/2017/12/09/list-comprehension-in-swift/</guid>
            </item>
            <item>
                <title>Building Swift Projects In Source Compatibility Mode</title>
                <description>&lt;p&gt;It&#x27;s a few weeks before WWDC, so naturally¹ it&#x27;s time to try build your Swift
projects in the compiler&#x27;s compatibility mode!&lt;&#x2f;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Download and install a snapshot for the next major version &lt;a href=&quot;https:&#x2f;&#x2f;swift.org&#x2f;download&#x2f;&quot;&gt;on
Swift.org&lt;&#x2f;a&gt;.&lt;&#x2f;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2f;assets&#x2f;2017&#x2f;05&#x2f;download-swift-snapshot.png&quot; alt=&quot;download swift toolchain&quot; &#x2f;&gt;
&lt;img src=&quot;&#x2f;assets&#x2f;2017&#x2f;05&#x2f;install-swift-snapshot.png&quot; alt=&quot;install swift toolchain&quot; &#x2f;&gt;&lt;&#x2f;p&gt;
&lt;&#x2f;li&gt;
&lt;li&gt;
&lt;p&gt;Choose the newly installed toolchain in Xcode.&lt;&#x2f;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2f;assets&#x2f;2017&#x2f;05&#x2f;choose-toolchain.png&quot; alt=&quot;choose swift toolchain in Xcode&quot; &#x2f;&gt;&lt;&#x2f;p&gt;
&lt;&#x2f;li&gt;
&lt;li&gt;
&lt;p&gt;Ask the compiler to use compatibility mode. This means using the complier
flag &lt;code&gt;-swift-version X&lt;&#x2f;code&gt;, where &amp;quot;X&amp;quot; is the &lt;em&gt;current&lt;&#x2f;em&gt; major Swift version.&lt;&#x2f;p&gt;
&lt;p&gt;In project&#x27;s &amp;quot;Build Settings&amp;quot;, value for &amp;quot;Other Swift Flags&amp;quot; should
contain &lt;code&gt;-swift-version X&lt;&#x2f;code&gt;. This could mean setting it in Xcode, in
&lt;code&gt;.xcconfig&lt;&#x2f;code&gt; files you are using and&#x2f;or in your dependency managers such
as Cocoapods.&lt;&#x2f;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2f;assets&#x2f;2017&#x2f;05&#x2f;compat-mode-flag.png&quot; alt=&quot;compatibility flag in xcode&quot; &#x2f;&gt;&lt;&#x2f;p&gt;
&lt;p&gt;For example, with Cocoapods, you&#x27;ll need to add the following in your
&lt;code&gt;Podfile&lt;&#x2f;code&gt; to compile 3rd party libraries in compatibility mode:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;code&gt; post_install do |installer|
     installer.pods_projects.targets.each do |target|
         target.build_configurations.each do |config|
             config.build_settings[&amp;quot;OTHER_SWIFT_FLAGS&amp;quot;] = &amp;quot;$(inherited) -swift-version 3&amp;quot;
         end
     end
 end
&lt;&#x2f;code&gt;&lt;&#x2f;pre&gt;
&lt;&#x2f;li&gt;
&lt;li&gt;
&lt;p&gt;Build your project! This is where things start to get exciting.&lt;&#x2f;p&gt;
&lt;p&gt;You should expect some warnings. Hopefully they are self-explanatory
enough. Most of them should correspond to &lt;a href=&quot;https:&#x2f;&#x2f;apple.github.io&#x2f;swift-evolution&#x2f;&quot;&gt;a swift-evolution
proposal&lt;&#x2f;a&gt;.&lt;&#x2f;p&gt;
&lt;p&gt;Improvement to the language or compiler usually means some of these
warnings tell you problems in your code that has been ignored by the
compiler previously. Fix them today!&lt;&#x2f;p&gt;
&lt;p&gt;The project should compile successfully in compatibility mode (despite
warnings). This where you can stop reading. Go celebrate with your
coworkers, friends, and family!&lt;&#x2f;p&gt;
&lt;p&gt;Things could go wrong for compiler snapshots, of course. Read on if see
errors or crashes (whaaaaat 😸).&lt;&#x2f;p&gt;
&lt;&#x2f;li&gt;
&lt;li&gt;
&lt;p&gt;It&#x27;s time to tell the compiler team about the error or crash you encountered.&lt;&#x2f;p&gt;
&lt;p&gt;Reduce the error or crash to a state that your are comfortable reporting in
public. Then go to &lt;a href=&quot;https:&#x2f;&#x2f;bugs.swift.org&quot;&gt;bugs.swift.org&lt;&#x2f;a&gt; and file a JIRA
ticket describing the error or compiler crash.&lt;&#x2f;p&gt;
&lt;p&gt;During the process of code reduction you may find ways to work around the
compile error or crash. Make the changes for the workaround and repeat
steps 4-5. Maybe your project will compile this time.&lt;&#x2f;p&gt;
&lt;&#x2f;li&gt;
&lt;li&gt;
&lt;p&gt;The issue you discovered will be fixed in the official Swift release come
fall. You&#x27;ve ensured a smooth Swift upgrade for your project and contributed
to the Swift community 🎉!&lt;&#x2f;p&gt;
&lt;&#x2f;li&gt;
&lt;&#x2f;ol&gt;
&lt;hr &#x2f;&gt;
&lt;p&gt;¹ source compatibility mode is a thing starting with Swift 4. As new
major version of Swift is released, code written in the previous version should
compile without change in compatibility mode.&lt;&#x2f;p&gt;
</description>
                <pubDate>Mon, 22 May 2017 09:04:01 -0700</pubDate>
                <link>https://duan.ca/2017/05/22/build-in-swift-compatibility-mode/</link>
                <guid isPermaLink="true">https://duan.ca/2017/05/22/build-in-swift-compatibility-mode/</guid>
            </item>
            <item>
                <title>Making TUI Applications In Swift</title>
                <description>&lt;p&gt;One of my fondest memory in programming is writing the game Snake on one of
these:&lt;&#x2f;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2f;assets&#x2f;2016&#x2f;12&#x2f;e-dictionary.jpg&quot; alt=&quot;An Electronic&#x2f;Digital Dictionary&quot; &#x2f;&gt;&lt;&#x2f;p&gt;
&lt;p&gt;At the time, I was in a very restrictive school where a real computer wasn&#x27;t
permited in class. The actual thing (that&#x27;s an &amp;quot;electronic dictionary&amp;quot; by the
way) was probably older, slower and of a different brand than the one in the
photo. In fact, I didn&#x27;t know how to make a copy of the code, and the device
wasn&#x27;t even mine. So the game just stayed there when the device was returned to
the owener and its fate unknown.&lt;&#x2f;p&gt;
&lt;p&gt;But I love it nontheless. Design the game, write it, playing it, showing it off&lt;&#x2f;p&gt;
&lt;ul&gt;
&lt;li&gt;everything.&lt;&#x2f;li&gt;
&lt;&#x2f;ul&gt;
&lt;br &#x2f;&gt;
&lt;p&gt;Fastforward to today. I use and write software applications for a living.
Programs I use directly range from terminal commands to GUI apps and web apps in
a browser.&lt;&#x2f;p&gt;
&lt;p&gt;Some programs, however, don&#x27;t belong to those categories: vim, tig, irssi, etc.
They run in a terminal like CLI commands. But unlike commands like &lt;code&gt;ls&lt;&#x2f;code&gt;, they
take over the entire buffer to offer different modes of interaction. You can
use hotkeys to navigate menus, trigger functions and so on.  Sometimes you can
use mouse, too. Their layout often resemble that of a GUI application running in
it&#x27;s own &amp;quot;window&amp;quot;:&lt;&#x2f;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2f;assets&#x2f;2016&#x2f;12&#x2f;tig.png&quot; alt=&quot;tig&quot; &#x2f;&gt;&lt;&#x2f;p&gt;
&lt;p&gt;Just to make things painfully clear, these apps&#x27;s interface is composed
exclusively of text. We can vaguely categorize them as &amp;quot;Text-based User
Interface(TUI)&amp;quot; application.&lt;&#x2f;p&gt;
&lt;p&gt;There are many reasons to like TUI applications. Compared to a CLI program,
they can display information in 2-dimentional, more organized layout (aka more
like a GUI app). Unlike a GUI application, they almost only require a terminal
to run. If you ssh onto a Linux server on your iPad, they&#x27;d work the same as
running locally on a Mac. For people who live in terminal simulators, it&#x27;s nice
to run apps that don&#x27;t open a new Window. Oh, they often tend to look the same
no matter how your OS changes.&lt;&#x2f;p&gt;
&lt;p&gt;Most importantly, they remind me of the programs I built on that electronic
dictionary. I want to make them today, with my favorite programming language
Swift!&lt;&#x2f;p&gt;
&lt;br &#x2f;&gt;
&lt;p&gt;The go-to library for writing TUI apps is &lt;a href=&quot;https:&#x2f;&#x2f;www.gnu.org&#x2f;software&#x2f;ncurses&#x2f;&quot;&gt;ncurses&lt;&#x2f;a&gt;. Classics such as vim,
emacs and mutt were written with it to some degree. But I find it hard to dive
into: it has a large number of strange legacy function names and offers
pre-built UI elements like panels, menus, forms etc. The terminal in my mind is
a spread of characters that can be updated by me. That sounds fun. Ncurses seems
more like UIKit :P.&lt;&#x2f;p&gt;
&lt;p&gt;Luckily, I found the fun library: &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;nsf&#x2f;termbox&quot;&gt;termbox&lt;&#x2f;a&gt; by &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;nsf&quot;&gt;nsf&lt;&#x2f;a&gt;. Termbox offers around
a dozen functions that gives us size of the terminal, a way to update text at
a row&#x2f;column coordinates, and user inputs in forms of key-presses and
mouse-clicks. And that&#x27;s it!&lt;&#x2f;p&gt;
&lt;p&gt;After making &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;Termbox&quot;&gt;a Swift wrapper&lt;&#x2f;a&gt;, I was able to build a painter app in
&lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;TerminalPaint&quot;&gt;a handleful of lines&lt;&#x2f;a&gt;:&lt;&#x2f;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2f;assets&#x2f;2016&#x2f;12&#x2f;terminal-paint.png&quot; alt=&quot;terminal paint&quot; &#x2f;&gt;&lt;&#x2f;p&gt;
&lt;p&gt;So that&#x27;s an TUI app drawing according to mouse clicks built with only a few
primitives from termbox. Awww yeah! Here&#x27;s the code with the comment stripped,
to give you a taste:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;keyword other import&quot;&gt;import&lt;&#x2f;span&gt; &lt;span class=&quot;support class&quot;&gt;Termbox&lt;&#x2f;span&gt;
&lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;func&lt;&#x2f;span&gt; &lt;span class=&quot;entity name function&quot;&gt;&lt;span class=&quot;variable function&quot;&gt;printAt&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;(&lt;span class=&quot;variable parameter&quot;&gt;x&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;Int32&lt;&#x2f;span&gt;, &lt;span class=&quot;variable parameter&quot;&gt;y&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;Int32&lt;&#x2f;span&gt;, &lt;span class=&quot;variable parameter&quot;&gt;text&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;,
    &lt;span class=&quot;variable parameter&quot;&gt;foreground&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;Attributes&lt;&#x2f;span&gt; = .&lt;span class=&quot;constant language enum&quot;&gt;default&lt;&#x2f;span&gt;,
    &lt;span class=&quot;variable parameter&quot;&gt;background&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;Attributes&lt;&#x2f;span&gt; = .&lt;span class=&quot;constant language enum&quot;&gt;default&lt;&#x2f;span&gt;)&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;
{
    &lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; border = &lt;span class=&quot;support class&quot;&gt;Termbox&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;width

    &lt;span class=&quot;keyword control&quot;&gt;for&lt;&#x2f;span&gt; (c, xi) &lt;span class=&quot;keyword control&quot;&gt;in&lt;&#x2f;span&gt; zip(text&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;unicodeScalars, x ..&amp;lt; border) {
        &lt;span class=&quot;support class&quot;&gt;Termbox&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;put(&lt;span class=&quot;variable parameter&quot;&gt;x&lt;&#x2f;span&gt;: xi, &lt;span class=&quot;variable parameter&quot;&gt;y&lt;&#x2f;span&gt;: y, &lt;span class=&quot;variable parameter&quot;&gt;character&lt;&#x2f;span&gt;: c,
            &lt;span class=&quot;variable parameter&quot;&gt;foreground&lt;&#x2f;span&gt;: foreground, &lt;span class=&quot;variable parameter&quot;&gt;background&lt;&#x2f;span&gt;: background)
    }
}

&lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;func&lt;&#x2f;span&gt; &lt;span class=&quot;entity name function&quot;&gt;&lt;span class=&quot;variable function&quot;&gt;updateHelp&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;(&lt;span class=&quot;variable parameter&quot;&gt;drawing&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;UnicodeScalar&lt;&#x2f;span&gt;)&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
    &lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; lastY = &lt;span class=&quot;support class&quot;&gt;Termbox&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;height - &lt;span class=&quot;constant numeric decimal&quot;&gt;1&lt;&#x2f;span&gt;
    &lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; content = [
        &lt;span class=&quot;string quoted double&quot;&gt;&amp;quot;Drawing [&lt;span class=&quot;punctuation section embedded&quot;&gt;\(&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;drawing&lt;span class=&quot;string quoted double&quot;&gt;&lt;span class=&quot;punctuation section embedded&quot;&gt;)&lt;&#x2f;span&gt;]&amp;quot;&lt;&#x2f;span&gt;,
        &lt;span class=&quot;string quoted double&quot;&gt;&amp;quot;Press other character to change&amp;quot;&lt;&#x2f;span&gt;,
        &lt;span class=&quot;string quoted double&quot;&gt;&amp;quot;Use mouse to draw&amp;quot;&lt;&#x2f;span&gt;,
        &lt;span class=&quot;string quoted double&quot;&gt;&amp;quot;Press &amp;#39;q&amp;#39; to quit&amp;quot;&lt;&#x2f;span&gt;
    ].&lt;span class=&quot;constant language enum&quot;&gt;joined&lt;&#x2f;span&gt;(&lt;span class=&quot;variable parameter&quot;&gt;separator&lt;&#x2f;span&gt;: &lt;span class=&quot;string quoted double&quot;&gt;&amp;quot; | &amp;quot;&lt;&#x2f;span&gt;)

    &lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; filler = &lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;(&lt;span class=&quot;variable parameter&quot;&gt;repeating&lt;&#x2f;span&gt;: &lt;span class=&quot;string quoted double&quot;&gt;&amp;quot; &amp;quot;&lt;&#x2f;span&gt;,
        &lt;span class=&quot;variable parameter&quot;&gt;count&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;Int&lt;&#x2f;span&gt;(&lt;span class=&quot;support class&quot;&gt;Termbox&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;width) - content&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;unicodeScalars&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;count)

    printAt(&lt;span class=&quot;variable parameter&quot;&gt;x&lt;&#x2f;span&gt;: &lt;span class=&quot;constant numeric decimal&quot;&gt;0&lt;&#x2f;span&gt;, &lt;span class=&quot;variable parameter&quot;&gt;y&lt;&#x2f;span&gt;: lastY, &lt;span class=&quot;variable parameter&quot;&gt;text&lt;&#x2f;span&gt;: content + filler,
        &lt;span class=&quot;variable parameter&quot;&gt;foreground&lt;&#x2f;span&gt;: .&lt;span class=&quot;constant language enum&quot;&gt;white&lt;&#x2f;span&gt;, &lt;span class=&quot;variable parameter&quot;&gt;background&lt;&#x2f;span&gt;: .&lt;span class=&quot;constant language enum&quot;&gt;blue&lt;&#x2f;span&gt;)
}

&lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;func&lt;&#x2f;span&gt; &lt;span class=&quot;entity name function&quot;&gt;&lt;span class=&quot;variable function&quot;&gt;paint&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;()&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
    &lt;span class=&quot;keyword control&quot;&gt;do&lt;&#x2f;span&gt; {
        &lt;span class=&quot;keyword control&quot;&gt;try&lt;&#x2f;span&gt; &lt;span class=&quot;support class&quot;&gt;Termbox&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;initialize()
    } &lt;span class=&quot;keyword control&quot;&gt;catch&lt;&#x2f;span&gt; &lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; error {
        print(error)
        &lt;span class=&quot;keyword control&quot;&gt;return&lt;&#x2f;span&gt;
    }
    &lt;span class=&quot;support class&quot;&gt;Termbox&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;inputModes = [.&lt;span class=&quot;constant language enum&quot;&gt;esc&lt;&#x2f;span&gt;, .&lt;span class=&quot;constant language enum&quot;&gt;mouse&lt;&#x2f;span&gt;]

    &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;drawingCharacter&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;UnicodeScalar&lt;&#x2f;span&gt; = &lt;span class=&quot;string quoted double&quot;&gt;&amp;quot;.&amp;quot;&lt;&#x2f;span&gt; {
        &lt;span class=&quot;keyword control&quot;&gt;didSet&lt;&#x2f;span&gt; {
            updateHelp(&lt;span class=&quot;variable parameter&quot;&gt;drawing&lt;&#x2f;span&gt;: drawingCharacter)
        }
    }

    updateHelp(&lt;span class=&quot;variable parameter&quot;&gt;drawing&lt;&#x2f;span&gt;: drawingCharacter)

    &lt;span class=&quot;support class&quot;&gt;Termbox&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;present()

    &lt;span class=&quot;variable parameter&quot;&gt;outer&lt;&#x2f;span&gt;: &lt;span class=&quot;keyword control&quot;&gt;while&lt;&#x2f;span&gt; &lt;span class=&quot;constant language true&quot;&gt;true&lt;&#x2f;span&gt; {
        &lt;span class=&quot;keyword control&quot;&gt;guard&lt;&#x2f;span&gt; &lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; event = &lt;span class=&quot;support class&quot;&gt;Termbox&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;pollEvent() &lt;span class=&quot;keyword control&quot;&gt;else&lt;&#x2f;span&gt; {
            &lt;span class=&quot;keyword control&quot;&gt;continue&lt;&#x2f;span&gt;
        }

        &lt;span class=&quot;keyword control&quot;&gt;switch&lt;&#x2f;span&gt; event {
        &lt;span class=&quot;keyword control&quot;&gt;case&lt;&#x2f;span&gt; &lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; .&lt;span class=&quot;constant language enum&quot;&gt;character&lt;&#x2f;span&gt;(&lt;span class=&quot;constant language other&quot;&gt;_&lt;&#x2f;span&gt;, value):
            &lt;span class=&quot;keyword control&quot;&gt;if&lt;&#x2f;span&gt; value == &lt;span class=&quot;string quoted double&quot;&gt;&amp;quot;q&amp;quot;&lt;&#x2f;span&gt; {
                &lt;span class=&quot;keyword control&quot;&gt;break&lt;&#x2f;span&gt; outer
            }

            drawingCharacter = value

        &lt;span class=&quot;keyword control&quot;&gt;case&lt;&#x2f;span&gt; &lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; .&lt;span class=&quot;constant language enum&quot;&gt;key&lt;&#x2f;span&gt;(&lt;span class=&quot;constant language other&quot;&gt;_&lt;&#x2f;span&gt;, value):
            &lt;span class=&quot;keyword control&quot;&gt;if&lt;&#x2f;span&gt; value == .&lt;span class=&quot;constant language enum&quot;&gt;space&lt;&#x2f;span&gt; {
                drawingCharacter = &lt;span class=&quot;string quoted double&quot;&gt;&amp;quot; &amp;quot;&lt;&#x2f;span&gt;
            }

        &lt;span class=&quot;keyword control&quot;&gt;case&lt;&#x2f;span&gt; &lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; .&lt;span class=&quot;constant language enum&quot;&gt;mouse&lt;&#x2f;span&gt;(x, y):
            &lt;span class=&quot;support class&quot;&gt;Termbox&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;put(&lt;span class=&quot;variable parameter&quot;&gt;x&lt;&#x2f;span&gt;: x, &lt;span class=&quot;variable parameter&quot;&gt;y&lt;&#x2f;span&gt;: y,
                &lt;span class=&quot;variable parameter&quot;&gt;character&lt;&#x2f;span&gt;: drawingCharacter,
                &lt;span class=&quot;variable parameter&quot;&gt;foreground&lt;&#x2f;span&gt;: .&lt;span class=&quot;constant language enum&quot;&gt;red&lt;&#x2f;span&gt;)
        &lt;span class=&quot;keyword control&quot;&gt;default&lt;&#x2f;span&gt;:
            &lt;span class=&quot;keyword control&quot;&gt;continue&lt;&#x2f;span&gt;
        }

        &lt;span class=&quot;support class&quot;&gt;Termbox&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;present()
    }

    &lt;span class=&quot;support class&quot;&gt;Termbox&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;shutdown()
}

paint()
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;Termbox&quot;&gt;Library&lt;&#x2f;a&gt; and this &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;TerminalPaint&quot;&gt;app&lt;&#x2f;a&gt; are both on Github. Go and
have fun :)&lt;&#x2f;p&gt;
</description>
                <pubDate>Mon, 26 Dec 2016 21:39:05 -0800</pubDate>
                <link>https://duan.ca/2016/12/26/making-tui-programs-in-swift/</link>
                <guid isPermaLink="true">https://duan.ca/2016/12/26/making-tui-programs-in-swift/</guid>
            </item>
            <item>
                <title>How To Omit Needless Words</title>
                <description>&lt;p&gt;A typical experience in adopting Swift 3 may look like this:&lt;&#x2f;p&gt;
&lt;ul&gt;
&lt;li&gt;Run the migrator.&lt;&#x2f;li&gt;
&lt;li&gt;Fix up what the migrator left undone so your project complies.&lt;&#x2f;li&gt;
&lt;li&gt;Remove artifacts that migrator added to ensure successful compilation (you
know what this means if you finished previous step in a mildly sized code
base).&lt;&#x2f;li&gt;
&lt;li&gt;Fix bugs caused by mechanical changes.&lt;&#x2f;li&gt;
&lt;li&gt;Try to adapt your code base to the new style: lowercased static members, etc.&lt;&#x2f;li&gt;
&lt;&#x2f;ul&gt;
&lt;p&gt;The last step is particularly challenging in a team environment because it
involves naming things. Luckily we have (IMHO) the best &amp;quot;features&amp;quot; in Swift
3 for help: the &lt;a href=&quot;https:&#x2f;&#x2f;swift.org&#x2f;documentation&#x2f;api-design-guidelines&#x2f;&quot;&gt;API Design Guidelines&lt;&#x2f;a&gt;.&lt;&#x2f;p&gt;
&lt;hr &#x2f;&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2f;&#x2f;swift.org&#x2f;documentation&#x2f;api-design-guidelines&#x2f;#omit-needless-words&quot;&gt;Omit needless words&lt;&#x2f;a&gt; is one of the most differentiating
guideline for function names between Swift 2 and 3. In Swift 2 we used to name
things like so…&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;code&gt;func doStuffWithThing(thing: Thing) { … }
&lt;&#x2f;code&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;… and use it like …&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;code&gt;doStuffWithThing(someThing)
&lt;&#x2f;code&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;That&#x27;s a lot of &amp;quot;thing&amp;quot;s, have you noticed?&lt;&#x2f;p&gt;
&lt;p&gt;Since the word &amp;quot;Thing&amp;quot; is &lt;em&gt;merely repeating&lt;&#x2f;em&gt; the type information, we can omit
it in Swift 3:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;code&gt;&#x2f;&#x2f; declare
func doStuff(with thing: Thing) { … }

&#x2f;&#x2f; use
doStuff(with: someThing)
&lt;&#x2f;code&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;It&#x27;s clear at both declaration and use site what we are doing stuff to.&lt;&#x2f;p&gt;
&lt;p&gt;So … you should go through you code base and make this change! In the next
section, we&#x27;ll discuss one way to make it happen.&lt;&#x2f;p&gt;
&lt;hr &#x2f;&gt;
&lt;h2&gt;Step 1: Automate&lt;&#x2f;h2&gt;
&lt;p&gt;A good indicator of &amp;quot;merely repeating type information&amp;quot; is repetition of words.
If you have been disciplined about naming your functions in Swift 2, finding
such repetition should take no more than one or two good regular expressions.
After the migrator, your code may contain a mixture of these:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;func&lt;&#x2f;span&gt; &lt;span class=&quot;entity name function&quot;&gt;&lt;span class=&quot;variable function&quot;&gt;doStuffWithX&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;(&lt;span class=&quot;constant language other&quot;&gt;_&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;X&lt;&#x2f;span&gt;)&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; { … }
&lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;func&lt;&#x2f;span&gt; &lt;span class=&quot;entity name function&quot;&gt;&lt;span class=&quot;variable function&quot;&gt;doStuff&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;(forY &lt;span class=&quot;variable parameter&quot;&gt;y&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;Y&lt;&#x2f;span&gt;)&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; { … }
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;In other words, the repeating word (&lt;code&gt;X&lt;&#x2f;code&gt; or &lt;code&gt;Y&lt;&#x2f;code&gt;) is preceded by a
&lt;a href=&quot;https:&#x2f;&#x2f;www.englishclub.com&#x2f;grammar&#x2f;prepositions-list.htm&quot;&gt;preposition&lt;&#x2f;a&gt;.&lt;&#x2f;p&gt;
&lt;p&gt;Finding these in a large code base is quite fun. If you don&#x27;t feel like writing
the scripts yourself, I&#x27;ve made a little tool for it &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;needless&quot;&gt;here&lt;&#x2f;a&gt;.&lt;&#x2f;p&gt;
&lt;p&gt;(Sometimes the repeating words aren&#x27;t a exact match because of prefixes such as
&amp;quot;CG&amp;quot; in &lt;code&gt;CGSize&lt;&#x2f;code&gt;. That&#x27;s covered by the tool as well.)&lt;&#x2f;p&gt;
&lt;h2&gt;Step 2: Update&lt;&#x2f;h2&gt;
&lt;p&gt;You can further rearrange the pieces in function name mechanically to:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;func&lt;&#x2f;span&gt; &lt;span class=&quot;entity name function&quot;&gt;&lt;span class=&quot;variable function&quot;&gt;doStuff&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;(preposition &lt;span class=&quot;variable parameter&quot;&gt;originalArgName&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;Type&lt;&#x2f;span&gt;)&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; { … }
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;needless&quot;&gt;tool&lt;&#x2f;a&gt; I wrote can suggest alternatives like this. Applying them
is technically automatable. But I find manually doing tasks such as fixing up
indentation for multi-line functions or updating their use site to be easier.
Your conclusion may depend the size of your code base and your patience.&lt;&#x2f;p&gt;
&lt;h2&gt;Step 3: Audit&lt;&#x2f;h2&gt;
&lt;p&gt;The main goal for the API Design Guidelines is &amp;quot;clarity at the point of use&amp;quot;.
Our automated process will yield some undesirable results. I&#x27;ll list a few
scenarios here.&lt;&#x2f;p&gt;
&lt;p&gt;&lt;strong&gt;Poorly named function name becomes poorer&lt;&#x2f;strong&gt;. Example:
&lt;code&gt;alertForScreenSize(_ size CGRize)&lt;&#x2f;code&gt; becomes &lt;code&gt;alert(forScreen size: CGSize)&lt;&#x2f;code&gt;.
Obviously, &amp;quot;for screen&amp;quot; is misleading since a &lt;code&gt;CGSize&lt;&#x2f;code&gt; is not a screen. The
problem here is the &amp;quot;alert&amp;quot; is not for a &amp;quot;size&amp;quot; to begin with. We as human
intuitively pick up that it&#x27;s for a &amp;quot;screen with a certain size&amp;quot;. So the correct
renaming here should be &lt;code&gt;alertForScreen(with size: CGSize)&lt;&#x2f;code&gt;.&lt;&#x2f;p&gt;
&lt;p&gt;&lt;strong&gt;Awkward literal values results in ungrammatical phrases&lt;&#x2f;strong&gt;. Imagine our
argument is a enum:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;keyword entity&quot;&gt;enum&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;support class&quot;&gt;Mode&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
  &lt;span class=&quot;keyword control&quot;&gt;case&lt;&#x2f;span&gt; add
  &lt;span class=&quot;keyword control&quot;&gt;case&lt;&#x2f;span&gt; edit
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;… and we renamed a function &lt;code&gt;updateUIForMode(mode: Mode)&lt;&#x2f;code&gt; to
&lt;code&gt;update(for mode: Mode)&lt;&#x2f;code&gt;. The call site, therefore, becomes
&lt;code&gt;update(for: .add)&lt;&#x2f;code&gt;.&lt;&#x2f;p&gt;
&lt;p&gt;What makes it feels wrong? Well, a preposition followed by a verb (&amp;quot;for add&amp;quot;)
is not very grammatical. Normally we would say &amp;quot;update UI for &lt;em&gt;adding&lt;&#x2f;em&gt;&amp;quot;. So here
we need to update the literals in that enum to &amp;quot;adding&amp;quot; and &amp;quot;editing&amp;quot;.&lt;&#x2f;p&gt;
&lt;p&gt;&lt;strong&gt;Type information becomes too weak&lt;&#x2f;strong&gt;. This can happen very often with enum
literals. We often name enum values with an adjective to qualify its name:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;keyword entity&quot;&gt;enum&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;support class&quot;&gt;UIControlState&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
    &lt;span class=&quot;keyword control&quot;&gt;case&lt;&#x2f;span&gt; automatic &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; which state? the *automatic* state!&lt;&#x2f;span&gt;
    …
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;After renaming, we&#x27;ll have functions that simply becomes too generic and
mysterious at call site:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;update(&lt;span class=&quot;keyword control&quot;&gt;for&lt;&#x2f;span&gt;: .&lt;span class=&quot;constant language enum&quot;&gt;automatic&lt;&#x2f;span&gt;) &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; automatic what? 😂&lt;&#x2f;span&gt;
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;This is where we need to be flexible and use our own good judgement. Perhaps
it&#x27;s simply better to keep the qualifying postfix:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;update(&lt;span class=&quot;variable parameter&quot;&gt;forControlState&lt;&#x2f;span&gt;: .&lt;span class=&quot;constant language enum&quot;&gt;automatic&lt;&#x2f;span&gt;) &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; better&lt;&#x2f;span&gt;
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;In the guideline&#x27;s parlance, this is &lt;a href=&quot;https:&#x2f;&#x2f;swift.org&#x2f;documentation&#x2f;api-design-guidelines&#x2f;#weak-type-information&quot;&gt;compensate for weak type
information&lt;&#x2f;a&gt;.&lt;&#x2f;p&gt;
&lt;p&gt;&lt;strong&gt;Other argument labels needs updates too&lt;&#x2f;strong&gt;. A function at call site should read
like a sentence as much as possible. We removed words at beginning of the
&amp;quot;sentence&amp;quot;, it&#x27;s important to take a look at labels for the rest of the sentence
and ensure the whole thing fits together.&lt;&#x2f;p&gt;
&lt;hr &#x2f;&gt;
&lt;p&gt;There are &lt;em&gt;many&lt;&#x2f;em&gt;, &lt;em&gt;many&lt;&#x2f;em&gt; other fallouts from mechanically omitting needless
words that I didn&#x27;t cover in this post. There are many many other things in the
API Design Guidelines that are worth conforming to. There will be much much bike
shedding among your team members.&lt;&#x2f;p&gt;
&lt;p&gt;Just remember, the API guidelines don&#x27;t provide an answer to every naming
decision. Following it means your code base will fit in with the rest of the
community and APIs from Foundation&#x2f;Swift standard library. But find what feels
right for your team is the most important thing. In the end, you should be glad
that everyone cares so much about your code base&#x27;s &amp;quot;Swiftness&amp;quot; and it&#x27;ll be all
worth it!&lt;&#x2f;p&gt;
</description>
                <pubDate>Sat, 22 Oct 2016 17:08:41 -0700</pubDate>
                <link>https://duan.ca/2016/10/22/how-to-omit-needless-words/</link>
                <guid isPermaLink="true">https://duan.ca/2016/10/22/how-to-omit-needless-words/</guid>
            </item>
            <item>
                <title>Distribution Tests</title>
                <description>&lt;p&gt;There are several ways to build dependencies for a Swift 3 project:
Swift Package Manager, Cocoapods, Carthage, etc. Many have an opinion on which
is the best choice for their projects. As a library author who want to help as
many people as possible, however, they can&#x27;t ignore any of them.&lt;&#x2f;p&gt;
&lt;p&gt;I sometimes question the sanity of that conclusion: instead of becoming an
export in each package manager, I find myself a novice of all. Did I break
support for any of them with this project change? Is it still working on
a particular platform, say, tvOS? Can I &lt;em&gt;really&lt;&#x2f;em&gt; know?&lt;&#x2f;p&gt;
&lt;p&gt;The only way to &lt;em&gt;really&lt;&#x2f;em&gt; know is to verify yourself: both Cocoapods and
Carthage support four platforms -- iOS, macOS, watchOS, tvOS; Swift Package
Manager only works on Mac or Linux. So that&#x27;s 2*4+1=9 targets. All these
targets need is have the library in question fetched and imported. Every Swift
library author should have such verification before publishing updates of
their project.&lt;&#x2f;p&gt;
&lt;p&gt;The steps to verify can be triggered with commands: fetch and build
dependencies, build Xcode&#x2f;Swift project. To automate the process, put these
commands in a script or a Makefile. But wait, there&#x27;s more! One shouldn&#x27;t have
to create these dummy projects every time they create a new library. If all
these projects do is importing a library and attempt to build, they should
work for &lt;em&gt;any&lt;&#x2f;em&gt; library. The config in &lt;code&gt;Package.swift&lt;&#x2f;code&gt;&#x2f;&lt;code&gt;Cocoapods&lt;&#x2f;code&gt;&#x2f;&lt;code&gt;Cartfile&lt;&#x2f;code&gt;
and the &lt;code&gt;import&lt;&#x2f;code&gt; statements just needs some strings replaced: name of the next
library, URL for its git repository, etc. And that&#x27;s a scriptable process as
well!&lt;&#x2f;p&gt;
&lt;p&gt;To recap, one could, in theory, copy in some dummy projects, run a command to
inject information about a new library, run another command to build all these
project, verifying that support for those package managers remain functional.&lt;&#x2f;p&gt;
&lt;p&gt;In reality, I have created &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;DistributionTests&quot;&gt;DistributionTests&lt;&#x2f;a&gt; and put it
on &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;DistributionTests&quot;&gt;Github&lt;&#x2f;a&gt; 😉.&lt;&#x2f;p&gt;
&lt;p&gt;The script &lt;code&gt;customize&lt;&#x2f;code&gt; requires 3 pieces of information of the library: its
import name, its git repository URL and a major version number. The assumption
here is the library generates uniformly named artifacts: the file name for
&lt;code&gt;.framework&lt;&#x2f;code&gt; and the name users use to import it are the same. Testing
distribution of a library is as simple as:&lt;&#x2f;p&gt;
&lt;ol&gt;
&lt;li&gt;clone the project.&lt;&#x2f;li&gt;
&lt;li&gt;customize the project with &lt;code&gt;customize&lt;&#x2f;code&gt;.&lt;&#x2f;li&gt;
&lt;li&gt;run &lt;code&gt;make&lt;&#x2f;code&gt;.&lt;&#x2f;li&gt;
&lt;&#x2f;ol&gt;
&lt;p&gt;If you do step 1 and 2, include the projects in library&#x27;s repository, then
only step 3 is necessary! This makes testing distribution methods trivial on
a continuous integration server.&lt;&#x2f;p&gt;
&lt;p&gt;Go forth and create fearlessly!&lt;&#x2f;p&gt;
</description>
                <pubDate>Mon, 10 Oct 2016 10:34:49 -0700</pubDate>
                <link>https://duan.ca/2016/10/10/distribution-tests/</link>
                <guid isPermaLink="true">https://duan.ca/2016/10/10/distribution-tests/</guid>
            </item>
            <item>
                <title>A Case For OOP?</title>
                <description>&lt;p&gt;Python&#x27;s standard library includes a very handy &lt;code&gt;defaultdict&lt;&#x2f;code&gt;. It behaves
almost exactly like the standard dictionary except it&#x27;ll supply a pre-defined
value for any non-existence keys. It is, unsurpringly, a subclass of &lt;code&gt;dict&lt;&#x2f;code&gt;.&lt;&#x2f;p&gt;
&lt;p&gt;I find my self missing this handy container in Swift. Especially when I use
a normal &lt;code&gt;Dictionary&lt;&#x2f;code&gt; to accumulate&#x2f;coalesce values under distinct keys. So I
wrote my own:&lt;&#x2f;p&gt;
&lt;script src=&quot;https:&#x2f;&#x2f;gist.github.com&#x2f;dduan&#x2f;31ed39c4c98ecb88290f0743cb394c20.js&quot;&gt;&lt;&#x2f;script&gt;
&lt;p&gt;There are a few noticable things about this implementation:&lt;&#x2f;p&gt;
&lt;ul&gt;
&lt;li&gt;It does not conform to the &lt;code&gt;DictionaryLiteralConvertible&lt;&#x2f;code&gt; protocol, for no
good reasons, really. The initializer in this protocol takes a varadic
argument. There&#x27;s no conevient way to forward this array to a normal
dictionary&#x27;s initializer (incidentally, this is a Swift feature I really
want). Plus, I don&#x27;t need &lt;code&gt;DefaultDictionary&lt;&#x2f;code&gt; to be a literal convertible.&lt;&#x2f;li&gt;
&lt;li&gt;Most of the code, including the imaginary &lt;code&gt;init&lt;&#x2f;code&gt; mentioned in previous
point, simply reuses stuff from &lt;code&gt;Dictionary&lt;&#x2f;code&gt;: asscociated type, indexes,
generator, subscript, etc.&lt;&#x2f;li&gt;
&lt;&#x2f;ul&gt;
&lt;p&gt;In comparison, Python implements &lt;code&gt;defaultdict&lt;&#x2f;code&gt; in a more intuitive way -- via
inheritance.&lt;&#x2f;p&gt;
&lt;p&gt;But do we want inheritance for &lt;code&gt;struct&lt;&#x2f;code&gt;s and &lt;code&gt;enum&lt;&#x2f;code&gt;s in Swift? What does that
even mean? Is it simply a case that will go away when protocols become more
powerful?&lt;&#x2f;p&gt;
</description>
                <pubDate>Thu, 19 May 2016 12:03:02 -0700</pubDate>
                <link>https://duan.ca/2016/05/19/a-case-for-oop/</link>
                <guid isPermaLink="true">https://duan.ca/2016/05/19/a-case-for-oop/</guid>
            </item>
            <item>
                <title>Cheap Orders</title>
                <description>&lt;p&gt;How to create order? If the second law of thermal dynamics tells us anything,
we&#x27;d better get to work, right?
{: .lead}&lt;&#x2f;p&gt;
&lt;p&gt;Before going full existential, let&#x27;s limit &amp;quot;order&amp;quot; to Swift&#x27;s set and
dictionaries -- there is none. Of course, you can take values&#x2f;keys out and
sort them. But what if all you care about is &lt;em&gt;some&lt;&#x2f;em&gt; order?&lt;&#x2f;p&gt;
&lt;hr &#x2f;&gt;
&lt;p&gt;Recently, I wrote&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;keyword entity&quot;&gt;enum&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;support class&quot;&gt;Token&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
  &lt;span class=&quot;storage modifier&quot;&gt;static&lt;&#x2f;span&gt; &lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; all = [
    &lt;span class=&quot;string quoted double&quot;&gt;&amp;quot;=&amp;quot;&lt;&#x2f;span&gt;: .&lt;span class=&quot;constant language enum&quot;&gt;Equal&lt;&#x2f;span&gt;,
    &lt;span class=&quot;string quoted double&quot;&gt;&amp;quot;-&amp;quot;&lt;&#x2f;span&gt;: .&lt;span class=&quot;constant language enum&quot;&gt;Minus&lt;&#x2f;span&gt;,
    &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; more token mappings …&lt;&#x2f;span&gt;
  ]
  &lt;span class=&quot;keyword control&quot;&gt;case&lt;&#x2f;span&gt; &lt;span class=&quot;support class&quot;&gt;Equal&lt;&#x2f;span&gt;
  &lt;span class=&quot;keyword control&quot;&gt;case&lt;&#x2f;span&gt; &lt;span class=&quot;support class&quot;&gt;Minus&lt;&#x2f;span&gt;
  &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; more tokens …&lt;&#x2f;span&gt;
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;… in the hope that I can take each value from &lt;code&gt;Token.all.keys&lt;&#x2f;code&gt; and see if
a prefix of a string is a matching token. It started to fail as the tokens
expands to multiple characters:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;keyword entity&quot;&gt;enum&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;support class&quot;&gt;Token&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
  &lt;span class=&quot;storage modifier&quot;&gt;static&lt;&#x2f;span&gt; &lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; all = [
    &lt;span class=&quot;string quoted double&quot;&gt;&amp;quot;=&amp;quot;&lt;&#x2f;span&gt;: .&lt;span class=&quot;constant language enum&quot;&gt;Equal&lt;&#x2f;span&gt;,
    &lt;span class=&quot;string quoted double&quot;&gt;&amp;quot;-&amp;quot;&lt;&#x2f;span&gt;: .&lt;span class=&quot;constant language enum&quot;&gt;Minus&lt;&#x2f;span&gt;,
    &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; more token mappings …&lt;&#x2f;span&gt;
    &lt;span class=&quot;string quoted double&quot;&gt;&amp;quot;==&amp;quot;&lt;&#x2f;span&gt;: .&lt;span class=&quot;constant language enum&quot;&gt;Equality&lt;&#x2f;span&gt;,
    &lt;span class=&quot;string quoted double&quot;&gt;&amp;quot;-&amp;gt;&amp;quot;&lt;&#x2f;span&gt;: .&lt;span class=&quot;constant language enum&quot;&gt;Arrow&lt;&#x2f;span&gt;,
    &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; more token mappings …&lt;&#x2f;span&gt;
    &lt;span class=&quot;string quoted double&quot;&gt;&amp;quot;===&amp;quot;&lt;&#x2f;span&gt;: .&lt;span class=&quot;constant language enum&quot;&gt;Identity&lt;&#x2f;span&gt;,
    &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; more token mappings …&lt;&#x2f;span&gt;
  ]
  &lt;span class=&quot;keyword control&quot;&gt;case&lt;&#x2f;span&gt; &lt;span class=&quot;support class&quot;&gt;Equal&lt;&#x2f;span&gt;
  &lt;span class=&quot;keyword control&quot;&gt;case&lt;&#x2f;span&gt; &lt;span class=&quot;support class&quot;&gt;Minus&lt;&#x2f;span&gt;
  &lt;span class=&quot;keyword control&quot;&gt;case&lt;&#x2f;span&gt; &lt;span class=&quot;support class&quot;&gt;Equality&lt;&#x2f;span&gt;
  &lt;span class=&quot;keyword control&quot;&gt;case&lt;&#x2f;span&gt; &lt;span class=&quot;support class&quot;&gt;Arrow&lt;&#x2f;span&gt;
  &lt;span class=&quot;keyword control&quot;&gt;case&lt;&#x2f;span&gt; &lt;span class=&quot;support class&quot;&gt;Identity&lt;&#x2f;span&gt;
  &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; … more tokens …&lt;&#x2f;span&gt;
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;&lt;code&gt;-&amp;gt;&lt;&#x2f;code&gt; could get a match with &lt;code&gt;-&lt;&#x2f;code&gt; and &lt;code&gt;===&lt;&#x2f;code&gt; would match to either &lt;code&gt;==&lt;&#x2f;code&gt; or &lt;code&gt;=&lt;&#x2f;code&gt;,
etc.&lt;&#x2f;p&gt;
&lt;p&gt;Since the tokens in this exercise have at most 3 characters, I decided to
group them by length and match from the longer group first. The groups became:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;keyword entity&quot;&gt;enum&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;support class&quot;&gt;Token&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
  &lt;span class=&quot;storage modifier&quot;&gt;static&lt;&#x2f;span&gt; &lt;span class=&quot;storage modifier&quot;&gt;private&lt;&#x2f;span&gt; &lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; group1 = [
    &lt;span class=&quot;string quoted double&quot;&gt;&amp;quot;=&amp;quot;&lt;&#x2f;span&gt;: .&lt;span class=&quot;constant language enum&quot;&gt;Equal&lt;&#x2f;span&gt;,
    &lt;span class=&quot;string quoted double&quot;&gt;&amp;quot;-&amp;quot;&lt;&#x2f;span&gt;: .&lt;span class=&quot;constant language enum&quot;&gt;Minus&lt;&#x2f;span&gt;,
    &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; more token mappings …&lt;&#x2f;span&gt;
  ]

  &lt;span class=&quot;storage modifier&quot;&gt;static&lt;&#x2f;span&gt; &lt;span class=&quot;storage modifier&quot;&gt;private&lt;&#x2f;span&gt; &lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; group2 = [
    &lt;span class=&quot;string quoted double&quot;&gt;&amp;quot;==&amp;quot;&lt;&#x2f;span&gt;: .&lt;span class=&quot;constant language enum&quot;&gt;Equality&lt;&#x2f;span&gt;,
    &lt;span class=&quot;string quoted double&quot;&gt;&amp;quot;-&amp;gt;&amp;quot;&lt;&#x2f;span&gt;: .&lt;span class=&quot;constant language enum&quot;&gt;Arrow&lt;&#x2f;span&gt;,
    &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; more token mappings …&lt;&#x2f;span&gt;
  ]

  &lt;span class=&quot;storage modifier&quot;&gt;static&lt;&#x2f;span&gt; &lt;span class=&quot;storage modifier&quot;&gt;private&lt;&#x2f;span&gt; &lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; group3 = [
    &lt;span class=&quot;string quoted double&quot;&gt;&amp;quot;===&amp;quot;&lt;&#x2f;span&gt;: .&lt;span class=&quot;constant language enum&quot;&gt;Identity&lt;&#x2f;span&gt;,
    &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; more token mappings …&lt;&#x2f;span&gt;
  ]
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Now I can choose which group to take values first. There&#x27;s a way to do it
without adding some control flow logic:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;[group3&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;keys, group2&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;keys, group3&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;keys].&lt;span class=&quot;constant language enum&quot;&gt;flatten&lt;&#x2f;span&gt;()
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Even better, I&#x27;ll make it a lazy property…&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;keyword entity&quot;&gt;enum&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;support class&quot;&gt;Token&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
  &lt;span class=&quot;storage modifier&quot;&gt;static&lt;&#x2f;span&gt; &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; all = {
    [group3&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;keys, group2&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;keys, group3&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;keys].&lt;span class=&quot;constant language enum&quot;&gt;flatten&lt;&#x2f;span&gt;()
  }()
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;…except an important piece of information is missing from the property: what&#x27;s
&lt;code&gt;all&lt;&#x2f;code&gt;&#x27;s type? Turns out, it&#x27;s become&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;support class&quot;&gt;FlattenCollection&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Array&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;LazyMapCollection&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;Dictionary&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;Token&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;&#x2f;span&gt;
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Ahh, it seems that in the pursue of cheap, lazy creation of these structures,
we are forced to deal with a bunch of type wrappers, each having a good reason
to be here!&lt;&#x2f;p&gt;
&lt;p&gt;But I really just need something like &lt;code&gt;Array&amp;lt;String&amp;gt;&lt;&#x2f;code&gt; for the consumer. If
only there&#x27;s a way to make all this stuff go away from my type signature, as
if they are &lt;a href=&quot;http:&#x2f;&#x2f;robnapier.net&#x2f;erasure&quot;&gt;erased&lt;&#x2f;a&gt; :).&lt;&#x2f;p&gt;
&lt;p&gt;Okay, I&#x27;m talking about &lt;code&gt;AnySequence&lt;&#x2f;code&gt; now. Rob Napier has an excellent post on
this topic &lt;a href=&quot;http:&#x2f;&#x2f;robnapier.net&#x2f;erasure&quot;&gt;here&lt;&#x2f;a&gt; if you need to catch up. Our
code eventually end up like this:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;keyword entity&quot;&gt;enum&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;support class&quot;&gt;Token&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
  &lt;span class=&quot;storage modifier&quot;&gt;static&lt;&#x2f;span&gt; &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;all&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;AnySequence&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt; = {
    &lt;span class=&quot;support class&quot;&gt;AnySequence&lt;&#x2f;span&gt;(
      [group3&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;keys, group2&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;keys, group3&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;keys]
        .&lt;span class=&quot;constant language enum&quot;&gt;flatten&lt;&#x2f;span&gt;())
  }()
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Instead of &lt;code&gt;Array&amp;lt;String&amp;gt;&lt;&#x2f;code&gt;, we have an &lt;code&gt;AnySequence&amp;lt;String&amp;gt;&lt;&#x2f;code&gt;. Our tokens now
gets checked with the correct order. We didn&#x27;t need to sort the entire set of
tokens, nor did we do any heavy data massage upfront, making a bunch of copies
along the way.&lt;&#x2f;p&gt;
&lt;hr &#x2f;&gt;
&lt;p&gt;Looking back, this post really failed to capture the eureka moment as I came
up with the erasure method. I discovered a series of small challenges and got
help from Swift&#x27;s designers in each step. Everything fell together in the end.&lt;&#x2f;p&gt;
</description>
                <pubDate>Sun, 15 May 2016 17:42:27 -0700</pubDate>
                <link>https://duan.ca/2016/05/15/cheap-orders/</link>
                <guid isPermaLink="true">https://duan.ca/2016/05/15/cheap-orders/</guid>
            </item>
            <item>
                <title>char ** in Swift</title>
                <description>&lt;p&gt;A &amp;quot;string&amp;quot; in C is just a continuous chunk of &lt;code&gt;char&lt;&#x2f;code&gt; values in memory with
&lt;code&gt;\0&lt;&#x2f;code&gt; at the end. To reference it, a variable of type &lt;code&gt;char *&lt;&#x2f;code&gt; is used to store
the address of the first &lt;code&gt;char&lt;&#x2f;code&gt; (commonly known as a pointer 😉).  It&#x27;s common
to have string manipulating functions take this form:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;void foo(char **errorMessage) {
    &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; ...&lt;&#x2f;span&gt;
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;To mutate the arugment &lt;code&gt;errorMessage&lt;&#x2f;code&gt; of type &lt;code&gt;char *&lt;&#x2f;code&gt;, &lt;code&gt;foo&lt;&#x2f;code&gt; takes a pointer
to it, &lt;code&gt;(char *)*&lt;&#x2f;code&gt;.&lt;&#x2f;p&gt;
&lt;hr &#x2f;&gt;
&lt;p&gt;How do we call &lt;code&gt;foo&lt;&#x2f;code&gt; in Swift?&lt;&#x2f;p&gt;
&lt;p&gt;Here&#x27;s the tl;dr. We can wrap it in a Swift function that have the same
interface:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;func&lt;&#x2f;span&gt; &lt;span class=&quot;entity name function&quot;&gt;&lt;span class=&quot;variable function&quot;&gt;fooSwift&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;(inout &lt;span class=&quot;variable parameter&quot;&gt;errorMessage&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;?&lt;&#x2f;span&gt;)&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
    &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;message&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;UnsafeMutablePointer&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;CChar&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&lt;&#x2f;span&gt; = &lt;span class=&quot;constant language nil&quot;&gt;nil&lt;&#x2f;span&gt;

    foo(&lt;span class=&quot;keyword operator&quot;&gt;&amp;amp;&lt;&#x2f;span&gt;message)
    errorMessage = &lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;fromCString(message)
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;&lt;code&gt;errorMessage&lt;&#x2f;code&gt; will contain whatever our C function &lt;code&gt;foo&lt;&#x2f;code&gt; assigns to it.&lt;&#x2f;p&gt;
&lt;hr &#x2f;&gt;
&lt;p&gt;So, what&#x27;s really going on here?&lt;&#x2f;p&gt;
&lt;p&gt;Inspecting &lt;code&gt;foo&lt;&#x2f;code&gt;&#x27;s signature in Swift, we see&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;func&lt;&#x2f;span&gt; &lt;span class=&quot;entity name function&quot;&gt;&lt;span class=&quot;variable function&quot;&gt;foo&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;(&lt;span class=&quot;variable parameter&quot;&gt;errorMessage&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;UnsafeMutablePointer&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;UnsafeMutablePointer&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span class=&quot;support class&quot;&gt;CChar&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2f;span&gt;)&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;… okey, &lt;code&gt;errorMessage&lt;&#x2f;code&gt;&#x27;s type is little intimidating to someone who doesn&#x27;t
use C functions in Swift everyday (like me)!&lt;&#x2f;p&gt;
&lt;p&gt;Let&#x27;s break it down. Swift does a ton of work for us to interoperate with C:&lt;&#x2f;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CChar&lt;&#x2f;code&gt; is Swift&#x27;s name for &lt;em&gt;&lt;code&gt;char&lt;&#x2f;code&gt; in C&lt;&#x2f;em&gt; (shocking, amiright?)&lt;&#x2f;p&gt;
&lt;&#x2f;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UnsafeMutablePointer&amp;lt;Type&amp;gt;&lt;&#x2f;code&gt; roughly translates to &lt;code&gt;Type *&lt;&#x2f;code&gt;, so
syntactically, we can see why
&lt;code&gt;UnsafeMutablePointer&amp;lt;UnsafeMutablePointer&amp;lt;CChar&amp;gt;&amp;gt;&lt;&#x2f;code&gt; is used to bridge the
C type &lt;code&gt;(char *)*&lt;&#x2f;code&gt;.&lt;&#x2f;p&gt;
&lt;&#x2f;li&gt;
&lt;li&gt;
&lt;p&gt;A function that takes &lt;code&gt;UnsafeMutablePointer&amp;lt;Type&amp;gt;&lt;&#x2f;code&gt; argument accepts
&lt;code&gt;inout Type&lt;&#x2f;code&gt; values. Therefore, we can look at &lt;code&gt;foo&lt;&#x2f;code&gt; as&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;code&gt;foo(inout errorMessage: UnsafeMutablePointer&amp;lt;CChar&amp;gt;)
&lt;&#x2f;code&gt;&lt;&#x2f;pre&gt;
&lt;&#x2f;li&gt;
&lt;li&gt;
&lt;p&gt;Swift acknowledge C&#x27;s string representation and provides convenient
methods for converting &lt;code&gt;char *&lt;&#x2f;code&gt; &#x2f; &lt;code&gt;UnsafeMutablePointer&amp;lt;CChar&amp;gt;&lt;&#x2f;code&gt; to its own
&lt;code&gt;String&lt;&#x2f;code&gt; type (&lt;code&gt;String.fromCString()&lt;&#x2f;code&gt;).&lt;&#x2f;p&gt;
&lt;&#x2f;li&gt;
&lt;&#x2f;ol&gt;
&lt;p&gt;Hopefully you can see how &lt;code&gt;fooSwift&lt;&#x2f;code&gt; works now.&lt;&#x2f;p&gt;
&lt;hr &#x2f;&gt;
&lt;p&gt;Taking a step back, to deal with &lt;code&gt;char **&lt;&#x2f;code&gt; in Swift, we overcame 2 obstacles:&lt;&#x2f;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The difference in string representation between C and Swift.&lt;&#x2f;p&gt;
&lt;&#x2f;li&gt;
&lt;li&gt;
&lt;p&gt;Compared to C pointers, Swift&#x27;s &lt;code&gt;inout&lt;&#x2f;code&gt; expresses mutability of function
arguments in a more restricted way. We can&#x27;t nest &lt;code&gt;inout&lt;&#x2f;code&gt;s to represent
the infinite layers of indirections that pointers achieve.&lt;&#x2f;p&gt;
&lt;&#x2f;li&gt;
&lt;&#x2f;ol&gt;
</description>
                <pubDate>Sun, 01 Nov 2015 11:18:40 -0800</pubDate>
                <link>https://duan.ca/2015/11/01/char-star-star-in-swift/</link>
                <guid isPermaLink="true">https://duan.ca/2015/11/01/char-star-star-in-swift/</guid>
            </item>
            <item>
                <title>Swift Algebraic Data Types</title>
                <description>&lt;h2&gt;The Basics&lt;&#x2f;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2f;&#x2f;en.wikipedia.org&#x2f;wiki&#x2f;Algebraic_data_type&quot;&gt;Algebraic Data Type&lt;&#x2f;a&gt; is a fancy name for &amp;quot;a type creaded by combining other
types&amp;quot; in programming languages. One aspect of the &amp;quot;algebraic-ness&amp;quot; is how
many potential new values there are for the new type, given a set of type as
its building block.&lt;&#x2f;p&gt;
&lt;p&gt;To better illustrate this, consider the following example in Swift.&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;keyword entity&quot;&gt;enum&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;support class&quot;&gt;StarkChild&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; { &lt;span class=&quot;keyword control&quot;&gt;case&lt;&#x2f;span&gt; &lt;span class=&quot;support class&quot;&gt;Rickon&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;Bran&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;Arya&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;Sansa&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;Robb&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;Jon&lt;&#x2f;span&gt; }

&lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;keyword entity&quot;&gt;enum&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;support class&quot;&gt;Direwolf&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; { &lt;span class=&quot;keyword control&quot;&gt;case&lt;&#x2f;span&gt; &lt;span class=&quot;support class&quot;&gt;Shaggydog&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;Summer&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;Nymeria&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;Lady&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;Greywind&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;Ghost&lt;&#x2f;span&gt; }

&lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;keyword entity&quot;&gt;enum&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;support class&quot;&gt;Actor&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
    &lt;span class=&quot;keyword control&quot;&gt;case&lt;&#x2f;span&gt; &lt;span class=&quot;support class&quot;&gt;Wolf&lt;&#x2f;span&gt;(&lt;span class=&quot;support class&quot;&gt;Direwolf&lt;&#x2f;span&gt;)
    &lt;span class=&quot;keyword control&quot;&gt;case&lt;&#x2f;span&gt; &lt;span class=&quot;support class&quot;&gt;Person&lt;&#x2f;span&gt;(&lt;span class=&quot;support class&quot;&gt;StarkChild&lt;&#x2f;span&gt;)
}

&lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;keyword entity&quot;&gt;struct&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;support class&quot;&gt;Parters&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
    &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;wolf&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;Direwolf&lt;&#x2f;span&gt;
    &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;person&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;StarkChild&lt;&#x2f;span&gt;
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;&lt;code&gt;StarkChild&lt;&#x2f;code&gt; and &lt;code&gt;Direwolf&lt;&#x2f;code&gt; each has 6 potential values. Combining them, we
get two new types.&lt;&#x2f;p&gt;
&lt;p&gt;Question: how many potentiol values are there for &lt;code&gt;Actor&lt;&#x2f;code&gt;? How many for
&lt;code&gt;Parters&lt;&#x2f;code&gt;?&lt;&#x2f;p&gt;
&lt;hr&gt;
&lt;p&gt;An &lt;code&gt;Actor&lt;&#x2f;code&gt; can be either a &lt;code&gt;StarkChild&lt;&#x2f;code&gt; or a &lt;code&gt;DireWolf&lt;&#x2f;code&gt;, therefore it has `6&lt;&#x2f;p&gt;
&lt;ul&gt;
&lt;li&gt;6 = 12&lt;code&gt;potential values – the *sum* of&lt;&#x2f;code&gt;Child&lt;code&gt;&#x27;s and &lt;&#x2f;code&gt;DireWolf`&#x27;s values.&lt;&#x2f;li&gt;
&lt;&#x2f;ul&gt;
&lt;p&gt;A &lt;code&gt;Partners&lt;&#x2f;code&gt; requires us to select one value from &lt;code&gt;Child&lt;&#x2f;code&gt; and one from
&lt;code&gt;DireWolf&lt;&#x2f;code&gt;, resulting in &lt;code&gt;6 * 6 = 36&lt;&#x2f;code&gt; potential values – the &lt;em&gt;product&lt;&#x2f;em&gt; of
&lt;code&gt;Child&lt;&#x2f;code&gt;&#x27;s and &lt;code&gt;DireWolf&lt;&#x2f;code&gt;&#x27;s values.&lt;&#x2f;p&gt;
&lt;p&gt;&lt;code&gt;Actor&lt;&#x2f;code&gt;, an &lt;code&gt;enum&lt;&#x2f;code&gt;, is a &lt;em&gt;sum&lt;&#x2f;em&gt; type. &lt;code&gt;Parters&lt;&#x2f;code&gt;, a &lt;code&gt;struct&lt;&#x2f;code&gt;, is a &lt;em&gt;product&lt;&#x2f;em&gt;
type. Here, &lt;code&gt;Parters&lt;&#x2f;code&gt; could easily be defined as a &lt;code&gt;class&lt;&#x2f;code&gt; or a &lt;code&gt;tuple&lt;&#x2f;code&gt; and
remain a &lt;em&gt;product&lt;&#x2f;em&gt; type. Because we can create product or sum types in these
direct ways, we can say Swift has first class support for Algebraic Data
Types.&lt;&#x2f;p&gt;
&lt;h2&gt;The Crossovers&lt;&#x2f;h2&gt;
&lt;p&gt;However, the story doesn&#x27;t stop here. In Swift, an &lt;code&gt;enum&lt;&#x2f;code&gt;&#x27;s option can have
multiple values. If it happens to be the only option, then this
&lt;code&gt;enum&lt;&#x2f;code&gt;effectively becomes a &lt;em&gt;product&lt;&#x2f;em&gt; type:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; there are 6 * 6 = 36 potential values for Parters&lt;&#x2f;span&gt;
&lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;keyword entity&quot;&gt;enum&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;support class&quot;&gt;Parters&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
    &lt;span class=&quot;keyword control&quot;&gt;case&lt;&#x2f;span&gt; &lt;span class=&quot;support class&quot;&gt;Value&lt;&#x2f;span&gt;(&lt;span class=&quot;variable parameter&quot;&gt;wolf&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;DireWolf&lt;&#x2f;span&gt;, &lt;span class=&quot;variable parameter&quot;&gt;person&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;StarkChild&lt;&#x2f;span&gt;)
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Incidentally, this makes &lt;code&gt;enum&lt;&#x2f;code&gt; similar to &lt;code&gt;data&lt;&#x2f;code&gt; in Haskell, where &lt;em&gt;product&lt;&#x2f;em&gt;
and &lt;em&gt;sum&lt;&#x2f;em&gt; types can be created with a unified construct – &lt;code&gt;data&lt;&#x2f;code&gt;.&lt;&#x2f;p&gt;
&lt;p&gt;In C and C++, &lt;code&gt;union&lt;&#x2f;code&gt;s are the closest thing to &lt;em&gt;sum&lt;&#x2f;em&gt; types. However, &lt;code&gt;union&lt;&#x2f;code&gt;
is hardly used to combine arbitrary types due to its lack of associated
values. What do people do in need of &lt;em&gt;sum&lt;&#x2f;em&gt; types? They make do with product
types. Here&#x27;s one way to achive that in Swift:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; Actor.value can have only 6 + 6 = 12 potential values thanks to&lt;&#x2f;span&gt;
&lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; manual enforcement&lt;&#x2f;span&gt;
&lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;keyword entity&quot;&gt;class&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;support class&quot;&gt;Actor&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
    &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;child&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;StarkChild&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;?&lt;&#x2f;span&gt;
    &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;wolf&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;Direwolf&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;?&lt;&#x2f;span&gt;

    &lt;span class=&quot;keyword variable&quot;&gt;var&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter&quot;&gt;value&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;Any&lt;&#x2f;span&gt; {
        &lt;span class=&quot;keyword control&quot;&gt;get&lt;&#x2f;span&gt; {
            &lt;span class=&quot;keyword control&quot;&gt;return&lt;&#x2f;span&gt; child == &lt;span class=&quot;constant language nil&quot;&gt;nil&lt;&#x2f;span&gt; ? wolf&lt;span class=&quot;keyword operator&quot;&gt;!&lt;&#x2f;span&gt; : child&lt;span class=&quot;keyword operator&quot;&gt;!&lt;&#x2f;span&gt;
        }
        &lt;span class=&quot;keyword control&quot;&gt;set&lt;&#x2f;span&gt;(newValue) {
            &lt;span class=&quot;keyword control&quot;&gt;if&lt;&#x2f;span&gt; newValue &lt;span class=&quot;keyword control&quot;&gt;is&lt;&#x2f;span&gt; &lt;span class=&quot;support class&quot;&gt;StarkChild&lt;&#x2f;span&gt; {
                child = (newValue &lt;span class=&quot;keyword control&quot;&gt;as&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;!&lt;&#x2f;span&gt; &lt;span class=&quot;support class&quot;&gt;StarkChild&lt;&#x2f;span&gt;)
                wolf = &lt;span class=&quot;constant language nil&quot;&gt;nil&lt;&#x2f;span&gt;
            }
            &lt;span class=&quot;keyword control&quot;&gt;if&lt;&#x2f;span&gt; newValue &lt;span class=&quot;keyword control&quot;&gt;is&lt;&#x2f;span&gt; &lt;span class=&quot;support class&quot;&gt;Direwolf&lt;&#x2f;span&gt; {
                wolf = (newValue &lt;span class=&quot;keyword control&quot;&gt;as&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;!&lt;&#x2f;span&gt; &lt;span class=&quot;support class&quot;&gt;Direwolf&lt;&#x2f;span&gt;)
                child = &lt;span class=&quot;constant language nil&quot;&gt;nil&lt;&#x2f;span&gt;
            }
        }
    }

    &lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;init&lt;&#x2f;span&gt;(&lt;span class=&quot;variable parameter&quot;&gt;wolf&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;Direwolf&lt;&#x2f;span&gt;)&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
        &lt;span class=&quot;keyword variable&quot;&gt;self&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;wolf = wolf
    }
    &lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;init&lt;&#x2f;span&gt;(&lt;span class=&quot;variable parameter&quot;&gt;child&lt;&#x2f;span&gt;: &lt;span class=&quot;support class&quot;&gt;StarkChild&lt;&#x2f;span&gt;)&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
        &lt;span class=&quot;keyword variable&quot;&gt;self&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;.&lt;&#x2f;span&gt;child = child
    }
    &lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;init&lt;&#x2f;span&gt;()&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
        fatalError(&lt;span class=&quot;string quoted double&quot;&gt;&amp;quot;must initialize with a child or a wolf&amp;quot;&lt;&#x2f;span&gt;)
    }
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;It&#x27;s… ugly.&lt;&#x2f;p&gt;
&lt;h2&gt;Recursion Types&lt;&#x2f;h2&gt;
&lt;p&gt;Besides &lt;em&gt;sum&lt;&#x2f;em&gt; and &lt;em&gt;product&lt;&#x2f;em&gt;, another common class of algebraic type is
recursion types. The interesting bit here is that Swift struggles to support
it. In WWDC 2015, it was announced that &lt;code&gt;enum&lt;&#x2f;code&gt;s can be defined recursively in
Swift 2:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;keyword entity&quot;&gt;enum&lt;&#x2f;span&gt; &lt;span class=&quot;entity name type&quot;&gt;&lt;span class=&quot;support class&quot;&gt;Tree&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; {
    &lt;span class=&quot;keyword control&quot;&gt;case&lt;&#x2f;span&gt; &lt;span class=&quot;support class&quot;&gt;Empty&lt;&#x2f;span&gt;
    indirect &lt;span class=&quot;keyword control&quot;&gt;case&lt;&#x2f;span&gt; &lt;span class=&quot;support class&quot;&gt;Node&lt;&#x2f;span&gt;(&lt;span class=&quot;support class&quot;&gt;Tree&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;Tree&lt;&#x2f;span&gt;)
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;As of this writing, Xcode 7 beta 3 has not delivered this feature yet.
Also, it&#x27;s a good bet that &lt;code&gt;indirect&lt;&#x2f;code&gt; is not going to be available in tuple
aliases, such as:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;keyword variable&quot;&gt;typealias&lt;&#x2f;span&gt; &lt;span class=&quot;support class&quot;&gt;Node&lt;&#x2f;span&gt; = (indirect &lt;span class=&quot;support class&quot;&gt;Node&lt;&#x2f;span&gt;, indirect &lt;span class=&quot;support class&quot;&gt;Node&lt;&#x2f;span&gt;)
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;I hope this is on the Swift team&#x27;s (understandably) gigantic todo list 😉.&lt;&#x2f;p&gt;
</description>
                <pubDate>Sun, 12 Jul 2015 15:51:27 -0700</pubDate>
                <link>https://duan.ca/2015/07/12/swift-algebraic-data-types/</link>
                <guid isPermaLink="true">https://duan.ca/2015/07/12/swift-algebraic-data-types/</guid>
            </item>
            <item>
                <title>Let&#x27;s Build A &#x27;cat&#x27; In Swift 2</title>
                <description>&lt;p&gt;As a homework in one of the early college classes, I was asked to write unix
commands such as &lt;code&gt;cat&lt;&#x2f;code&gt; in C. Let&#x27;s do that in Swift today! To make things
interesting, let&#x27;s pretend we are on Linux. That means no Xcode nor Foundation
can be used.&lt;&#x2f;p&gt;
&lt;p&gt;It&#x27;s hard to find a simpler unix program than &lt;code&gt;cat&lt;&#x2f;code&gt;: It takes a list of file
names from the shell and write the content of each file to &lt;code&gt;stdout&lt;&#x2f;code&gt;. When no
argument is given, it uses &lt;code&gt;stdin&lt;&#x2f;code&gt; as the source of its output.&lt;&#x2f;p&gt;
&lt;p&gt;Writing it in C is trivial. Swift has exellent support for leveraging C. But
to call even the standard C functions, we need to import them first.&lt;&#x2f;p&gt;
&lt;p&gt;The &lt;code&gt;swiftc&lt;&#x2f;code&gt; command can compile a pure Swift source file like this:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;code&gt;swiftc cat.swift -o cat
&lt;&#x2f;code&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;We can add Objective-C bridging headers with the argument
&lt;code&gt;-import-objc-header&lt;&#x2f;code&gt;.  But to import the standard C functions, we also need
to specify path to an SDK:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;code&gt;swiftc -sdk $(xcrun --show-sdk-path --sdk macosx)\
       -import-objc-header bridge.h\
       cat.swift\
       -o cat
&lt;&#x2f;code&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Instead of typing&#x2f;copying that command, save this &lt;code&gt;Makefile&lt;&#x2f;code&gt; to the same
directory as &lt;code&gt;cat.swift&lt;&#x2f;code&gt;:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;code&gt;SDKPATH = $(shell xcrun --show-sdk-path --sdk macosx)
CBRIDGEHEADER = bridge.h
TARGETS := cat

.PHONY : all $(TARGETS)

all: $(TARGETS)

$(TARGETS):
    swiftc -sdk $(SDKPATH) $@.swift -import-objc-header $(CBRIDGEHEADER) -o $@
&lt;&#x2f;code&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Now &lt;code&gt;make cat&lt;&#x2f;code&gt; should take care of the compilation.&lt;&#x2f;p&gt;
&lt;p&gt;Since file I&#x2f;O is the only concern, we&#x27;ll need C APIs from &lt;code&gt;stdio.h&lt;&#x2f;code&gt;, so
&lt;code&gt;bridge.h&lt;&#x2f;code&gt; is a one liner:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source c&quot;&gt;&lt;span class=&quot;meta preprocessor include c&quot;&gt;&lt;span class=&quot;keyword control import include c&quot;&gt;#import&lt;&#x2f;span&gt; &lt;span class=&quot;string quoted other lt-gt include c&quot;&gt;&lt;span class=&quot;punctuation definition string begin c&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;stdio.h&lt;span class=&quot;punctuation definition string end c&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;
&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;The standard C function for opening a file is &lt;code&gt;fopen&lt;&#x2f;code&gt;:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source c&quot;&gt;FILE &lt;span class=&quot;keyword operator c&quot;&gt;*&lt;&#x2f;span&gt; &lt;span class=&quot;meta function c&quot;&gt;&lt;span class=&quot;entity name function c&quot;&gt;fopen&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;span class=&quot;meta function c&quot;&gt; &lt;&#x2f;span&gt;&lt;span class=&quot;meta function parameters c&quot;&gt;&lt;span class=&quot;meta group c&quot;&gt;&lt;span class=&quot;punctuation section group begin c&quot;&gt;(&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;span class=&quot;meta function parameters c&quot;&gt;&lt;span class=&quot;meta group c&quot;&gt; &lt;span class=&quot;storage modifier c&quot;&gt;const&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;char&lt;&#x2f;span&gt; &lt;span class=&quot;keyword operator c&quot;&gt;*&lt;&#x2f;span&gt;&lt;span class=&quot;variable parameter c&quot;&gt;filename&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation separator c&quot;&gt;,&lt;&#x2f;span&gt; &lt;span class=&quot;storage modifier c&quot;&gt;const&lt;&#x2f;span&gt; &lt;span class=&quot;storage type c&quot;&gt;char&lt;&#x2f;span&gt; &lt;span class=&quot;keyword operator c&quot;&gt;*&lt;&#x2f;span&gt;&lt;span class=&quot;variable parameter c&quot;&gt;mode&lt;&#x2f;span&gt; &lt;span class=&quot;punctuation section group end c&quot;&gt;)&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Hmmmm, how do we deal with all those pesky &#x27;*&#x27;s?&lt;&#x2f;p&gt;
&lt;p&gt;To reference a certain C &lt;code&gt;Type&lt;&#x2f;code&gt; in Swift, we can use &lt;code&gt;UnsafePointer&amp;lt;Type&amp;gt;&lt;&#x2f;code&gt; or
&lt;code&gt;UnsafeMutablePointer&amp;lt;Type&amp;gt;&lt;&#x2f;code&gt;. To make our lives easier, Swift &lt;code&gt;String&lt;&#x2f;code&gt;s
automatically bridge to &lt;code&gt;const char *&lt;&#x2f;code&gt;. In other words, we can treat the
signature of &lt;code&gt;fopen&lt;&#x2f;code&gt; as if it&#x27;s the following:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;code&gt;func fopen( filename: String, mode: String ) -&amp;gt; UnsafeMutablePointer&amp;lt;FILE&amp;gt;
&lt;&#x2f;code&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;A character in C is represented by a byte in memory. Therefore Swift sees
a &lt;code&gt;char&lt;&#x2f;code&gt; as of type &lt;code&gt;Int8&lt;&#x2f;code&gt; (8-bit integer).  So a &lt;code&gt;char *&lt;&#x2f;code&gt; would be referenced
as &lt;code&gt;UnsafeMutablePointer&amp;lt;Int8&amp;gt;&lt;&#x2f;code&gt; in Swift. So &lt;code&gt;getline&lt;&#x2f;code&gt;, a function from POSIX&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source c&quot;&gt;&lt;span class=&quot;support type sys-types c&quot;&gt;ssize_t&lt;&#x2f;span&gt; &lt;span class=&quot;meta function c&quot;&gt;&lt;span class=&quot;entity name function c&quot;&gt;getline&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;span class=&quot;meta function parameters c&quot;&gt;&lt;span class=&quot;meta group c&quot;&gt;&lt;span class=&quot;punctuation section group begin c&quot;&gt;(&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;span class=&quot;meta function parameters c&quot;&gt;&lt;span class=&quot;meta group c&quot;&gt; &lt;span class=&quot;storage type c&quot;&gt;char&lt;&#x2f;span&gt; &lt;span class=&quot;keyword operator c&quot;&gt;*&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator c&quot;&gt;*&lt;&#x2f;span&gt;&lt;span class=&quot;variable parameter c&quot;&gt;lineptr&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation separator c&quot;&gt;,&lt;&#x2f;span&gt; &lt;span class=&quot;support type sys-types c&quot;&gt;size_t&lt;&#x2f;span&gt; &lt;span class=&quot;keyword operator c&quot;&gt;*&lt;&#x2f;span&gt;&lt;span class=&quot;variable parameter c&quot;&gt;n&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation separator c&quot;&gt;,&lt;&#x2f;span&gt; FILE &lt;span class=&quot;keyword operator c&quot;&gt;*&lt;&#x2f;span&gt;&lt;span class=&quot;variable parameter c&quot;&gt;stream&lt;&#x2f;span&gt; &lt;span class=&quot;punctuation section group end c&quot;&gt;)&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2f;span&gt;
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;would look like this in Swift:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source c&quot;&gt;func &lt;span class=&quot;meta function c&quot;&gt;&lt;span class=&quot;entity name function c&quot;&gt;getline&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;span class=&quot;meta function parameters c&quot;&gt;&lt;span class=&quot;meta group c&quot;&gt;&lt;span class=&quot;punctuation section group begin c&quot;&gt;(&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;span class=&quot;meta function parameters c&quot;&gt;&lt;span class=&quot;meta group c&quot;&gt;
    inout lineptr&lt;span class=&quot;keyword operator ternary c&quot;&gt;:&lt;&#x2f;span&gt; UnsafeMutablePointer&lt;span class=&quot;keyword operator comparison c&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;Int8&lt;span class=&quot;keyword operator comparison c&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation separator c&quot;&gt;,&lt;&#x2f;span&gt;
    inout n&lt;span class=&quot;keyword operator ternary c&quot;&gt;:&lt;&#x2f;span&gt; &lt;span class=&quot;variable parameter c&quot;&gt;UInt&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation separator c&quot;&gt;,&lt;&#x2f;span&gt;
    stream&lt;span class=&quot;keyword operator ternary c&quot;&gt;:&lt;&#x2f;span&gt; UnsafeMutablePointer&lt;span class=&quot;keyword operator comparison c&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;FILE&lt;span class=&quot;keyword operator comparison c&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;
&lt;span class=&quot;punctuation section group end c&quot;&gt;)&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;span class=&quot;meta function c&quot;&gt; &lt;&#x2f;span&gt;&lt;span class=&quot;punctuation accessor c&quot;&gt;-&amp;gt;&lt;&#x2f;span&gt; Int
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;It returns the number if characters it finds.&lt;&#x2f;p&gt;
&lt;p&gt;We now can open a file, read and print its content line by line, and close it
with:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source c&quot;&gt;func &lt;span class=&quot;meta function c&quot;&gt;&lt;span class=&quot;entity name function c&quot;&gt;fclose&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;span class=&quot;meta function parameters c&quot;&gt;&lt;span class=&quot;meta group c&quot;&gt;&lt;span class=&quot;punctuation section group begin c&quot;&gt;(&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;span class=&quot;meta function parameters c&quot;&gt;&lt;span class=&quot;meta group c&quot;&gt;stream&lt;span class=&quot;keyword operator ternary c&quot;&gt;:&lt;&#x2f;span&gt; UnsafeMutablePointer&lt;span class=&quot;keyword operator comparison c&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;FILE&lt;span class=&quot;keyword operator comparison c&quot;&gt;&amp;gt;&lt;&#x2f;span&gt;&lt;span class=&quot;punctuation section group end c&quot;&gt;)&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;span class=&quot;meta function c&quot;&gt;
&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Repeat this on each file specified in &lt;code&gt;Process.arguments&lt;&#x2f;code&gt;, or simply read from
&lt;code&gt;stdin&lt;&#x2f;code&gt;, and we have a &lt;code&gt;cat&lt;&#x2f;code&gt;! Here&#x27;s a screenshot of it displaying its own
code:&lt;&#x2f;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2f;assets&#x2f;2015&#x2f;07&#x2f;swift-cat.png&quot; alt=&quot;Swift cat&quot; &#x2f;&gt;&lt;&#x2f;p&gt;
&lt;p&gt;The code is also available in this &lt;a href=&quot;https:&#x2f;&#x2f;gist.github.com&#x2f;dduan&#x2f;f6d359019db8b0b55962&quot;&gt;gist&lt;&#x2f;a&gt;.&lt;&#x2f;p&gt;
</description>
                <pubDate>Sat, 04 Jul 2015 20:56:19 -0700</pubDate>
                <link>https://duan.ca/2015/07/04/lets-build-a-cat-in-swift-2/</link>
                <guid isPermaLink="true">https://duan.ca/2015/07/04/lets-build-a-cat-in-swift-2/</guid>
            </item>
            <item>
                <title>Swift Function Fun Facts</title>
                <description>&lt;p&gt;You love Swift. You want to write a class that does HTTP, it might have
methods like the following:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;func&lt;&#x2f;span&gt; &lt;span class=&quot;entity name function&quot;&gt;&lt;span class=&quot;variable function&quot;&gt;get&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;(&lt;span class=&quot;support class&quot;&gt;URLString&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;, &lt;span class=&quot;variable parameter&quot;&gt;params&lt;&#x2f;span&gt;:[&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;AnyObject&lt;&#x2f;span&gt;],
    &lt;span class=&quot;variable parameter&quot;&gt;headers&lt;&#x2f;span&gt;:[&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;])&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;
&lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;func&lt;&#x2f;span&gt; &lt;span class=&quot;entity name function&quot;&gt;&lt;span class=&quot;variable function&quot;&gt;post&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;(&lt;span class=&quot;support class&quot;&gt;URLString&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;, &lt;span class=&quot;variable parameter&quot;&gt;params&lt;&#x2f;span&gt;:[&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;AnyObject&lt;&#x2f;span&gt;],
    &lt;span class=&quot;variable parameter&quot;&gt;headers&lt;&#x2f;span&gt;:[&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;])&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;
&lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;func&lt;&#x2f;span&gt; &lt;span class=&quot;entity name function&quot;&gt;&lt;span class=&quot;variable function&quot;&gt;put&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;(&lt;span class=&quot;support class&quot;&gt;URLString&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;, &lt;span class=&quot;variable parameter&quot;&gt;params&lt;&#x2f;span&gt;:[&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;AnyObject&lt;&#x2f;span&gt;],
    &lt;span class=&quot;variable parameter&quot;&gt;headers&lt;&#x2f;span&gt;:[&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;])&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;
&lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; and more for HEAD, OPTIONS …&lt;&#x2f;span&gt;

&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;But you don&#x27;t want to force your user to supply all arguments each time. You
know that Swift supports default arguments, so you added some. Take GET as an
example:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;func&lt;&#x2f;span&gt; &lt;span class=&quot;entity name function&quot;&gt;&lt;span class=&quot;variable function&quot;&gt;get&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;(&lt;span class=&quot;support class&quot;&gt;URLString&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;, &lt;span class=&quot;variable parameter&quot;&gt;params&lt;&#x2f;span&gt;:[&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;AnyObject&lt;&#x2f;span&gt;]=[:],
    &lt;span class=&quot;variable parameter&quot;&gt;headers&lt;&#x2f;span&gt;:[&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;]=[:])&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;

&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Now users can do things like&lt;&#x2f;p&gt;
&lt;p&gt;{% highlight swift %}
get(&amp;quot;http:&#x2f;&#x2f;github.com&amp;quot;)
get(&amp;quot;http:&#x2f;&#x2f;httpbin.org&#x2f;get&amp;quot;, headers:[&amp;quot;Answer&amp;quot;:42])
{% endhighlight %}&lt;&#x2f;p&gt;
&lt;p&gt;That&#x27;s flexible! Woohoo!&lt;&#x2f;p&gt;
&lt;p&gt;After you thought about implementing these, though, you realize that
&lt;code&gt;HTTPMethod&lt;&#x2f;code&gt; is merely a property on &lt;code&gt;NSURLRequest&lt;&#x2f;code&gt;. In other words, all of
the previous methods can share the same implementation. In honor of the DRY
principle, you write a function that accepts the method as an arguments and
the previous functions each forwards the arguments to this function:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;func&lt;&#x2f;span&gt; &lt;span class=&quot;entity name function&quot;&gt;&lt;span class=&quot;variable function&quot;&gt;impl&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;(&lt;span class=&quot;variable parameter&quot;&gt;method&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;URLString&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;,
    &lt;span class=&quot;variable parameter&quot;&gt;params&lt;&#x2f;span&gt;:[&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;AnyObject&lt;&#x2f;span&gt;],
    &lt;span class=&quot;variable parameter&quot;&gt;headers&lt;&#x2f;span&gt;:[&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;])&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;
{
    &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; …&lt;&#x2f;span&gt;
}

&lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;func&lt;&#x2f;span&gt; &lt;span class=&quot;entity name function&quot;&gt;&lt;span class=&quot;variable function&quot;&gt;get&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;(&lt;span class=&quot;support class&quot;&gt;URLString&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;, &lt;span class=&quot;variable parameter&quot;&gt;params&lt;&#x2f;span&gt;:[&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;AnyObject&lt;&#x2f;span&gt;]=[:],
    &lt;span class=&quot;variable parameter&quot;&gt;headers&lt;&#x2f;span&gt;:[&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;]=[:])&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;
{
    impl(&lt;span class=&quot;string quoted double&quot;&gt;&amp;quot;GET&amp;quot;&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;URLString&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;URLString&lt;&#x2f;span&gt;, &lt;span class=&quot;variable parameter&quot;&gt;params&lt;&#x2f;span&gt;:params,
        &lt;span class=&quot;variable parameter&quot;&gt;headers&lt;&#x2f;span&gt;:headers)
}

&lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;func&lt;&#x2f;span&gt; &lt;span class=&quot;entity name function&quot;&gt;&lt;span class=&quot;variable function&quot;&gt;post&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;(&lt;span class=&quot;support class&quot;&gt;URLString&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;, &lt;span class=&quot;variable parameter&quot;&gt;params&lt;&#x2f;span&gt;:[&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;AnyObject&lt;&#x2f;span&gt;]=[:],
    &lt;span class=&quot;variable parameter&quot;&gt;headers&lt;&#x2f;span&gt;:[&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;]=[:])&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;
{
    impl(&lt;span class=&quot;string quoted double&quot;&gt;&amp;quot;POST&amp;quot;&lt;&#x2f;span&gt;, &lt;span class=&quot;support class&quot;&gt;URLString&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;URLString&lt;&#x2f;span&gt;, &lt;span class=&quot;variable parameter&quot;&gt;params&lt;&#x2f;span&gt;:params,
        &lt;span class=&quot;variable parameter&quot;&gt;headers&lt;&#x2f;span&gt;:headers)
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;This seems like a sensible solution. Except that later you realize that there
needs to be more parameters for each function, so in the end, each function
looks like this:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;func&lt;&#x2f;span&gt; &lt;span class=&quot;entity name function&quot;&gt;&lt;span class=&quot;variable function&quot;&gt;post&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;(
    &lt;span class=&quot;support class&quot;&gt;URLString&lt;&#x2f;span&gt;             : &lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;,
    params                : [&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;AnyObject&lt;&#x2f;span&gt;]       = [:],
    json                  : [&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;AnyObject&lt;&#x2f;span&gt;]?      = &lt;span class=&quot;constant language nil&quot;&gt;nil&lt;&#x2f;span&gt;,
    headers               : [&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;AnyObject&lt;&#x2f;span&gt;]       = [:],
    auth                  : (&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;,&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;)&lt;span class=&quot;keyword operator&quot;&gt;?&lt;&#x2f;span&gt;         = &lt;span class=&quot;constant language nil&quot;&gt;nil&lt;&#x2f;span&gt;,
    allowRedirects        : &lt;span class=&quot;support class&quot;&gt;Bool&lt;&#x2f;span&gt;                     = &lt;span class=&quot;constant language true&quot;&gt;true&lt;&#x2f;span&gt;,
    requestBody           : &lt;span class=&quot;support class&quot;&gt;NSData&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;?&lt;&#x2f;span&gt;                  = &lt;span class=&quot;constant language nil&quot;&gt;nil&lt;&#x2f;span&gt;,
    &lt;span class=&quot;support class&quot;&gt;URLQuery&lt;&#x2f;span&gt;              : &lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;?&lt;&#x2f;span&gt;                  = &lt;span class=&quot;constant language nil&quot;&gt;nil&lt;&#x2f;span&gt;,
    &lt;span class=&quot;variable parameter&quot;&gt;asyncCompletionHandler&lt;&#x2f;span&gt;: ((&lt;span class=&quot;support class&quot;&gt;HTTPResult&lt;&#x2f;span&gt;&lt;span class=&quot;keyword operator&quot;&gt;!&lt;&#x2f;span&gt;) -&amp;gt; &lt;span class=&quot;support class&quot;&gt;Void&lt;&#x2f;span&gt;)&lt;span class=&quot;keyword operator&quot;&gt;?&lt;&#x2f;span&gt; = &lt;span class=&quot;constant language nil&quot;&gt;nil&lt;&#x2f;span&gt;
    )&lt;&#x2f;span&gt;&lt;&#x2f;span&gt; -&amp;gt; &lt;span class=&quot;support class&quot;&gt;HTTPResult&lt;&#x2f;span&gt; {
    &lt;span class=&quot;keyword control&quot;&gt;return&lt;&#x2f;span&gt; impl(
        &lt;span class=&quot;string quoted double&quot;&gt;&amp;quot;POST&amp;quot;&lt;&#x2f;span&gt;,
        &lt;span class=&quot;support class&quot;&gt;URLString&lt;&#x2f;span&gt;             : &lt;span class=&quot;support class&quot;&gt;URLString&lt;&#x2f;span&gt;,
        params                : params,
        json                  : json,
        headers               : headers,
        auth                  : auth,
        data                  : requestBody,
        &lt;span class=&quot;support class&quot;&gt;URLQuery&lt;&#x2f;span&gt;              : &lt;span class=&quot;support class&quot;&gt;URLQuery&lt;&#x2f;span&gt;,
        redirects             : allowRedirects,
        &lt;span class=&quot;variable parameter&quot;&gt;asyncCompletionHandler&lt;&#x2f;span&gt;: asyncCompletionHandler
    )
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Remembering that your goal is to respect DRY, and there are now giant blocks
of code that all look the same except that first argument to &lt;code&gt;impl()&lt;&#x2f;code&gt;, you
became determined to find a better alternative.&lt;&#x2f;p&gt;
&lt;p&gt;Well, why not give currying a try? This example of currying with Swift comes
to your mind:&lt;&#x2f;p&gt;
&lt;p&gt;{% highlight swift %}
func add(a:Int)(b:Int) -&amp;gt; Int { return a + b }
let add3 = add(3)
add3(b:2) &#x2f;&#x2f; 5
{% endhighlight %}&lt;&#x2f;p&gt;
&lt;p&gt;If we apply this technique and treat &lt;code&gt;method&lt;&#x2f;code&gt; in &lt;code&gt;impl()&lt;&#x2f;code&gt; as &lt;code&gt;a&lt;&#x2f;code&gt; in the
example, we would get:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;func&lt;&#x2f;span&gt; &lt;span class=&quot;entity name function&quot;&gt;&lt;span class=&quot;variable function&quot;&gt;impl&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;(&lt;span class=&quot;variable parameter&quot;&gt;method&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;)&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;(
    &lt;span class=&quot;support class&quot;&gt;URLString&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;,
    &lt;span class=&quot;variable parameter&quot;&gt;params&lt;&#x2f;span&gt;:[&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;AnyObject&lt;&#x2f;span&gt;],
    &lt;span class=&quot;variable parameter&quot;&gt;headers&lt;&#x2f;span&gt;:[&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;],
    …)
{
    &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; …&lt;&#x2f;span&gt;
}
&lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; &lt;span class=&quot;keyword control&quot;&gt;get&lt;&#x2f;span&gt; = impl(&lt;span class=&quot;string quoted double&quot;&gt;&amp;quot;GET&amp;quot;&lt;&#x2f;span&gt;)
&lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; post = impl(&lt;span class=&quot;string quoted double&quot;&gt;&amp;quot;POST&amp;quot;&lt;&#x2f;span&gt;)
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;right?  However, you are forcing users to supply each argument again. To make
things worse, the number of arguments is a lot larger.&lt;&#x2f;p&gt;
&lt;p&gt;Hmm, but that&#x27;s a solved problem, just add default values to &lt;code&gt;impl()&lt;&#x2f;code&gt;&#x27;s
parameters:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;func&lt;&#x2f;span&gt; &lt;span class=&quot;entity name function&quot;&gt;&lt;span class=&quot;variable function&quot;&gt;impl&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;(&lt;span class=&quot;variable parameter&quot;&gt;method&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;)&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;(
    &lt;span class=&quot;support class&quot;&gt;URLString&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;,
    &lt;span class=&quot;variable parameter&quot;&gt;params&lt;&#x2f;span&gt;:[&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;AnyObject&lt;&#x2f;span&gt;] = [:],
    &lt;span class=&quot;variable parameter&quot;&gt;headers&lt;&#x2f;span&gt;:[&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;] = [:],
    …)
{
    &lt;span class=&quot;comment line&quot;&gt;&lt;span class=&quot;punctuation definition comment&quot;&gt;&#x2f;&#x2f;&lt;&#x2f;span&gt; …&lt;&#x2f;span&gt;
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Ta-da! Wait a minute, Xcode now refuse to compile you code! &lt;code&gt;Default argument is only permitted for a non-curried function parameter&lt;&#x2f;code&gt;, it saids.&lt;&#x2f;p&gt;
&lt;p&gt;Stubborn as you are, you decide that perhaps the Swift team hasn&#x27;t got around
to implementing this feature for curry syntax yet. Functions are first-class
citizens! Surely if you return a function with default arguments…?&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;span class=&quot;source swift&quot;&gt;&lt;span class=&quot;meta function&quot;&gt;&lt;span class=&quot;meta toc-list&quot;&gt;&lt;span class=&quot;storage type function&quot;&gt;func&lt;&#x2f;span&gt; &lt;span class=&quot;entity name function&quot;&gt;&lt;span class=&quot;variable function&quot;&gt;methodFactory&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;(&lt;span class=&quot;variable parameter&quot;&gt;method&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;)&lt;&#x2f;span&gt;&lt;&#x2f;span&gt;
    -&amp;gt; (&lt;span class=&quot;variable parameter&quot;&gt;params&lt;&#x2f;span&gt;:[&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;AnyObject&lt;&#x2f;span&gt;] = [:],
        &lt;span class=&quot;variable parameter&quot;&gt;headers&lt;&#x2f;span&gt;:[&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;:&lt;span class=&quot;support class&quot;&gt;String&lt;&#x2f;span&gt;] = [:], …)
    -&amp;gt; &lt;span class=&quot;support class&quot;&gt;Void&lt;&#x2f;span&gt;
{
    &lt;span class=&quot;keyword control&quot;&gt;return&lt;&#x2f;span&gt; {(params, headers, …) &lt;span class=&quot;keyword control&quot;&gt;in&lt;&#x2f;span&gt;
        impl(method, &lt;span class=&quot;variable parameter&quot;&gt;params&lt;&#x2f;span&gt;:params, &lt;span class=&quot;variable parameter&quot;&gt;headers&lt;&#x2f;span&gt;:headers, …)
    }
}

&lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; &lt;span class=&quot;keyword control&quot;&gt;get&lt;&#x2f;span&gt; = methodFactory(&lt;span class=&quot;string quoted double&quot;&gt;&amp;quot;GET&amp;quot;&lt;&#x2f;span&gt;)
&lt;span class=&quot;keyword variable&quot;&gt;let&lt;&#x2f;span&gt; post = methodFactory(&lt;span class=&quot;string quoted double&quot;&gt;&amp;quot;POST&amp;quot;&lt;&#x2f;span&gt;)
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Turns out, this manual form of currying only works when default arguments
aren&#x27;t involved!&lt;&#x2f;p&gt;
&lt;p&gt;Now, you hate Swift.&lt;&#x2f;p&gt;
&lt;p&gt;(Just to be clear, I don&#x27;t really hate Swift as in, uh, &lt;em&gt;hate&lt;&#x2f;em&gt; Swift. Judgning
from some comments, I might have failed to convey the lightheartedness that
I felt writing this up. It&#x27;s really like saying to a friend &amp;quot;I hate you&amp;quot; after
he&#x2f;she pulls a prank on you.)&lt;&#x2f;p&gt;
</description>
                <pubDate>Sat, 18 Apr 2015 16:20:16 -0700</pubDate>
                <link>https://duan.ca/2015/04/18/swift-function-fun-facts/</link>
                <guid isPermaLink="true">https://duan.ca/2015/04/18/swift-function-fun-facts/</guid>
            </item>
    </channel>
</rss>