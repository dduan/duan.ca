<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Daniel Duan's Articles About SwiftPM</title>
        <link>https://duan.ca/tag/swiftpm/</link>
        <atom:link href="https://duan.ca/tag/swiftpm/feed.xml" rel="self" type="application/rss+xml" />
            <item>
                <title>Using Instruments on Non-macOS, Non-iOS Executables</title>
                <description>&lt;p&gt;How do you use use Instruments, the instrumentation tool distributed alongside Xcode? It&#x27;s easy if you are
profiling a macOS or iOS app. No so with a regular old command-line tool built, say, with SwiftPM. To do so,
you&#x27;ll need to codesign the target binary. Otherwise Instruments will give you a &lt;code&gt;&amp;quot;Failed to gain authorization&amp;quot;&lt;/code&gt; error message.&lt;/p&gt;
&lt;p&gt;Here&#x27;s the steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a entitlement file with &lt;code&gt;com.apple.security.get-task-allow&lt;/code&gt; set to true:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;
&amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt;
    &amp;lt;dict&amp;gt;
        &amp;lt;key&amp;gt;com.apple.security.get-task-allow&amp;lt;/key&amp;gt;
        &amp;lt;true/&amp;gt;
    &amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&#x27;s call it &lt;code&gt;Entitlements.plist&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;
&lt;p&gt;Build the executable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Codesign your executable with the entitlement file&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;codesign -s - -f --entitlements path/to/Entitlements.plist path/to/executable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now proceed with your profiling in Instruments.&lt;/p&gt;
&lt;p&gt;Not sure where this is officially documented. So I&#x27;m officially documenting it here.&lt;/p&gt;
</description>
                <pubDate>Thu, 31 Mar 2022 20:39:05 -0700</pubDate>
                <link>https://duan.ca/2022/03/31/instrumenting-commandline-executables/</link>
                <guid isPermaLink="true">https://duan.ca/2022/03/31/instrumenting-commandline-executables/</guid>
            </item>
            <item>
                <title>Building IndexStoreDB on Linux: The Portable Technique</title>
                <description>&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;As of writing of this article, when you attempt to use Apple&#x27;s Swift library &lt;a href=&quot;https://github.com/apple/indexstore-db&quot;&gt;IndexStoreDB&lt;/a&gt; on Linux as
a normal SwiftPM dependency, it won&#x27;t build successfully:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fish&quot;&gt;❯ cat Package.resolved
{
  &amp;quot;object&amp;quot;: {
    &amp;quot;pins&amp;quot;: [
      {
        &amp;quot;package&amp;quot;: &amp;quot;IndexStoreDB&amp;quot;,
        &amp;quot;repositoryURL&amp;quot;: &amp;quot;https://github.com/apple/indexstore-db&amp;quot;,
        &amp;quot;state&amp;quot;: {
          &amp;quot;branch&amp;quot;: &amp;quot;swift-5.5.2-RELEASE&amp;quot;,
          &amp;quot;revision&amp;quot;: &amp;quot;e771994778265c2efe8d33a7ca30adf5f3d2065a&amp;quot;,
          &amp;quot;version&amp;quot;: null
        }
      }
    ]
  },
  &amp;quot;version&amp;quot;: 1
}

❯ swift build &amp;gt; /dev/null

❯ echo $status
1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The issue is documented in the build instruction for Linux:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The C++ code in the index requires &lt;code&gt;libdispatch&lt;/code&gt;, but unlike Swift code, it cannot find it automatically on Linux. You can work around this by adding a search path manually.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;$ swift build -Xcxx -I&amp;lt;path_to_swift_toolchain&amp;gt;/usr/lib/swift -Xcxx -I&amp;lt;path_to_swift_toolchain&amp;gt;/usr/lib/swift/Block
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Okay, so, how would my package build in Linux environments where the Swift toolchain&#x27;s setup is unknown? How
do we avoid building with one toolchain while mixing in &lt;code&gt;libdispatch&lt;/code&gt; from another toolchain somewhere? Here&#x27;s
what I did for my command-line tool &lt;a href=&quot;https://github.com/dduan/Clue&quot;&gt;Clue&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;The solution&lt;/h2&gt;
&lt;p&gt;The essence of the problem is about the installation location of the Swift toolchain. Our solution makes the
following assumptions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A Swift toolchain is installed on the file system on Linux (duh!).&lt;/li&gt;
&lt;li&gt;The toolchain is at least similar to the one distributed on Swift.org. So &lt;code&gt;libdispatch&lt;/code&gt; is distributed
alongside the other binaries, in a stable relative directory.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Having the &lt;code&gt;swift&lt;/code&gt; command available (assumption #1), we can just let it tell us about itself with the
&lt;code&gt;-print-target-info&lt;/code&gt; flag:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fish&quot;&gt;❯ swift -print-target-info
{
  &amp;quot;compilerVersion&amp;quot;: &amp;quot;Swift version 5.5.2 (swift-5.5.2-RELEASE)&amp;quot;,
  &amp;quot;target&amp;quot;: {
    &amp;quot;triple&amp;quot;: &amp;quot;x86_64-unknown-linux-gnu&amp;quot;,
    &amp;quot;unversionedTriple&amp;quot;: &amp;quot;x86_64-unknown-linux-gnu&amp;quot;,
    &amp;quot;moduleTriple&amp;quot;: &amp;quot;x86_64-unknown-linux-gnu&amp;quot;,
    &amp;quot;compatibilityLibraries&amp;quot;: [ ],
    &amp;quot;librariesRequireRPath&amp;quot;: false
  },
  &amp;quot;paths&amp;quot;: {
    &amp;quot;runtimeLibraryPaths&amp;quot;: [
      &amp;quot;/home/dan/.swiftenv/versions/5.5.2/usr/lib/swift/linux&amp;quot;
    ],
    &amp;quot;runtimeLibraryImportPaths&amp;quot;: [
      &amp;quot;/home/dan/.swiftenv/versions/5.5.2/usr/lib/swift/linux&amp;quot;,
      &amp;quot;/home/dan/.swiftenv/versions/5.5.2/usr/lib/swift/linux/x86_64&amp;quot;
    ],
    &amp;quot;runtimeResourcePath&amp;quot;: &amp;quot;/home/dan/.swiftenv/versions/5.5.2/usr/lib/swift&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great! We see where the runtime is installed. Now we can invoke assumption #2, that &lt;code&gt;libdispatch&lt;/code&gt; is at
a relative location to the rest of the runtime. In the output from above, the value for &lt;code&gt;runtimeResourcePath&lt;/code&gt;
happens to be the parent directory for &lt;code&gt;libdispatch&lt;/code&gt;&#x27;s headers. The &lt;code&gt;&amp;lt;path_to_swift_toolchain&amp;gt;&lt;/code&gt; value in
&lt;a href=&quot;https://github.com/apple/indexstore-db&quot;&gt;IndexStoreDB&lt;/a&gt;&#x27;s official instruction in this particular setup would be
&lt;code&gt;/home/dan/.swiftenv/versions/5.5.2&lt;/code&gt;.  So the following command would have worked:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;swift build -Xcxx -I/home/dan/.swiftenv/versions/5.5.2/usr/lib/swift -Xcxx -I/home/dan/.swiftenv/versions/5.5.2/usr/lib/swift/Block
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All we need to do is parse this information at build time, and it should work on every Linux setup! Choose
whatever parsing method you like. Here&#x27;s (more or less) the &lt;code&gt;Makefile&lt;/code&gt; for &lt;a href=&quot;https://github.com/dduan/Clue&quot;&gt;Clue&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-make&quot;&gt;SHELL = /bin/bash
ifeq ($(shell uname),Darwin)
EXTRA_SWIFT_FLAGS = &amp;quot;--disable-sandbox&amp;quot;
else
SWIFT_TOOLCHAIN = &amp;quot;$(shell swift -print-target-info | grep runtimeResourcePath | cut -f 2 -d &#x27;:&#x27; | cut -f 2 -d &#x27;&amp;quot;&#x27;)&amp;quot;
EXTRA_SWIFT_FLAGS = -Xcxx -I${SWIFT_TOOLCHAIN} -Xcxx -I${SWIFT_TOOLCHAIN}/Block
endif

define build
	@swift build --configuration $(1) -Xswiftc -warnings-as-errors ${EXTRA_SWIFT_FLAGS}
endef

.PHONY: build
build:
	$(call build,release)

.PHONY: test
test:
	@swift test ${EXTRA_SWIFT_FLAGS}

.PHONY: debug
debug:
	$(call build,debug)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;make build&lt;/code&gt; / &lt;code&gt;make test&lt;/code&gt; / &lt;code&gt;make debug&lt;/code&gt; all work as expected, building IndexStoreDB successfully.&lt;/li&gt;
&lt;li&gt;As-is, this snippet is project-agnostic. So you can throw it in your SwiftPM project and it should &amp;quot;just
work&amp;quot;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Alright!&lt;/p&gt;
</description>
                <pubDate>Wed, 09 Feb 2022 15:58:41 -0800</pubDate>
                <link>https://duan.ca/2022/02/09/building-indexstoredb-on-linux/</link>
                <guid isPermaLink="true">https://duan.ca/2022/02/09/building-indexstoredb-on-linux/</guid>
            </item>
    </channel>
</rss>