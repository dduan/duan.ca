<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Daniel Duan's Articles About YouTube</title>
        <link>https://duan.ca/tag/youtube/</link>
        <atom:link href="https://duan.ca/tag/youtube/feed.xml" rel="self" type="application/rss+xml" />
            <item>
                <title>TOML Decoder Playlist</title>
                <description>&lt;p&gt;I enjoyed making &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;TOMLDeserializer&quot;&gt;TOMLDeserializer&lt;&#x2f;a&gt; and &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;TOMLDecoder&quot;&gt;TOMLDecoder&lt;&#x2f;a&gt; recently. Let&#x27;s hope
some projects will pick them up and TOML as a configuration format will start to
spead in Swift communities.&lt;&#x2f;p&gt;
&lt;p&gt;What&#x27;s outstanding about these projects is that I started working on them while
&lt;a href=&quot;https:&#x2f;&#x2f;twitch.tv&#x2f;daniel_duan&quot;&gt;streaming&lt;&#x2f;a&gt;. Personally, I consume a lot of content like this. So now people
can watch me writing Swift, too.&lt;&#x2f;p&gt;
&lt;p&gt;I&#x27;ve been archiving recordings of these streams as much as I can. Here are the
links to these videos, each is around 1-1.5 hours long:&lt;&#x2f;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2f;&#x2f;youtu.be&#x2f;XLLlCEfuFLw&quot;&gt;Turn TOML Test Fixtures Into XCTests With Vim Macros&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2f;&#x2f;youtu.be&#x2f;Ztq3K3cq8f0&quot;&gt;Passing TOML Deserialization Tests&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2f;&#x2f;youtu.be&#x2f;GTCYSIc6n3U&quot;&gt;Finishing TOML Invalidation Tests&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2f;&#x2f;youtu.be&#x2f;HP2Wzh8MVvg&quot;&gt;TOML Decoder: The Beginning&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2f;&#x2f;youtu.be&#x2f;EZ7VpbrLkH0&quot;&gt;TOML Decoder: Filling In Missing Implementation Pieces&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2f;&#x2f;youtu.be&#x2f;bISMVVWOHKg&quot;&gt;TOML Decoder: Adding The First TOML Decoding Strategy!&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2f;&#x2f;youtu.be&#x2f;oOOS4bnhwx4&quot;&gt;TOML Decoder: Project Overview And Data Decoding Support&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2f;&#x2f;youtu.be&#x2f;9yDtXsrMtbU&quot;&gt;TOML Decoder: Key Decoding Strategies&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2f;&#x2f;youtu.be&#x2f;g1V872HL4Dk&quot;&gt;TOML Decoder: Project Updates&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;&#x2f;ul&gt;
&lt;p&gt;The TOMLDecoder projects would&#x27;ve been capture on camera entirely if I weren&#x27;t
such a streaming n00b and messed up a few streams. Hilarious.&lt;&#x2f;p&gt;
</description>
                <pubDate>Sun, 10 Mar 2019 20:32:37 -0700</pubDate>
                <link>https://duan.ca/2019/03/10/toml-decoder/</link>
                <guid isPermaLink="true">https://duan.ca/2019/03/10/toml-decoder/</guid>
            </item>
            <item>
                <title>Unix File Permissions In Swift</title>
                <description>&lt;p&gt;Wrap file permissions from &lt;code&gt;stat&lt;&#x2f;code&gt; and &lt;code&gt;chmod&lt;&#x2f;code&gt; in an &lt;code&gt;OptionSet&lt;&#x2f;code&gt; in Swift.&lt;&#x2f;p&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
                <pubDate>Sun, 06 May 2018 16:43:20 -0700</pubDate>
                <link>https://duan.ca/2018/05/06/unix-file-permissions-in-swift/</link>
                <guid isPermaLink="true">https://duan.ca/2018/05/06/unix-file-permissions-in-swift/</guid>
            </item>
            <item>
                <title>An Interpreter Without A Language</title>
                <description>&lt;p&gt;From the &lt;a href=&quot;&#x2f;2018&#x2f;01&#x2f;13&#x2f;coding-without-a-language&#x2f;&quot;&gt;AST&lt;&#x2f;a&gt; and &lt;a href=&quot;&#x2f;2018&#x2f;01&#x2f;20&#x2f;scopes&#x2f;&quot;&gt;scopes&lt;&#x2f;a&gt;, come a simple interpreter. This intepreter can &amp;quot;execute&amp;quot; the fibonacci
function AST and produce a correct results.&lt;&#x2f;p&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
                <pubDate>Tue, 30 Jan 2018 12:53:38 -0800</pubDate>
                <link>https://duan.ca/2018/01/30/an-interpreter-without-a-language/</link>
                <guid isPermaLink="true">https://duan.ca/2018/01/30/an-interpreter-without-a-language/</guid>
            </item>
            <item>
                <title>Scopes Without A Language</title>
                <description>&lt;p&gt;A short video on the concept of static scope.&lt;&#x2f;p&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
                <pubDate>Sat, 20 Jan 2018 19:50:24 -0800</pubDate>
                <link>https://duan.ca/2018/01/20/scopes/</link>
                <guid isPermaLink="true">https://duan.ca/2018/01/20/scopes/</guid>
            </item>
            <item>
                <title>Scripting A &#x27;cat&#x27; Under 1 Minute</title>
                <description>&lt;p&gt;This video demonstrates a few things: the &lt;code&gt;readLine&lt;&#x2f;code&gt; standard library function, scripting with Swift, and
pattern matching as loop conditions. Enjoy!&lt;&#x2f;p&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
                <pubDate>Sat, 06 Jan 2018 18:34:39 -0800</pubDate>
                <link>https://duan.ca/2018/01/06/cat-under-1-minute/</link>
                <guid isPermaLink="true">https://duan.ca/2018/01/06/cat-under-1-minute/</guid>
            </item>
            <item>
                <title>Hello World In WebAssembly</title>
                <description>&lt;p&gt;Every now and then, I check on the progress of Web Assembly. I did it again
around the time of this post and finally found enough tutorials, examples, and
working software to get myself started in this area. In doing so, I made a video
to demo some progress. (&lt;em&gt;this article includes all the same information and
more, so just read on if you don&#x27;t have 15 minutes for YouTube&lt;&#x2f;em&gt;).&lt;&#x2f;p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2&gt;Our goal:&lt;&#x2f;h2&gt;
&lt;ol&gt;
&lt;li&gt;Use as much built-in tools on a Mac as possible. The web development
toolchain scares me.&lt;&#x2f;li&gt;
&lt;li&gt;Target the browser. That&#x27;s where the value of WebAssembly is. (Node supports
it as well. BUT, WHY THO?)&lt;&#x2f;li&gt;
&lt;li&gt;Build from scratch. In the video I started from &lt;code&gt;mkdir&lt;&#x2f;code&gt; a folder. We should
strive to understand details on every level whenever possible. Boilerplates
and dependencies should come later.&lt;&#x2f;li&gt;
&lt;&#x2f;ol&gt;
&lt;h2&gt;Things you&#x27;ll need:&lt;&#x2f;h2&gt;
&lt;ol&gt;
&lt;li&gt;Safari 11+&lt;&#x2f;li&gt;
&lt;li&gt;Xcode. More specifically, you should be able to run &lt;code&gt;clang&lt;&#x2f;code&gt; in a shell.&lt;&#x2f;li&gt;
&lt;&#x2f;ol&gt;
&lt;h2&gt;The Workflow&lt;&#x2f;h2&gt;
&lt;p&gt;Having these things installed, get a copy of &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;WebAssembly&#x2f;wabt&quot;&gt;The WebAssembly Binary
Toolkit&lt;&#x2f;a&gt; (wabt). Build it. The README has detailed instructions. I just went
into the folder and ran&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;code&gt;make clang-release
&lt;&#x2f;code&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;This will generate a bunch of binary files in &lt;code&gt;out&#x2f;clang&#x2f;Release&lt;&#x2f;code&gt; and you need
to make sure you can run them from wherever you want to work on WebAssembly
project (so either copy them into a folder included in your &lt;code&gt;PATH&lt;&#x2f;code&gt; environment
variable or add the absolute path to &lt;code&gt;out&#x2f;clang&#x2f;Release&lt;&#x2f;code&gt; to &lt;code&gt;PATH&lt;&#x2f;code&gt;).&lt;&#x2f;p&gt;
&lt;p&gt;Among the binaries &amp;quot;wabt&amp;quot; builds, &lt;code&gt;wat2wasm&lt;&#x2f;code&gt; takes a &lt;code&gt;.wat&lt;&#x2f;code&gt; file and compiles it
to a WebAssembly binary. A &lt;code&gt;.wat&lt;&#x2f;code&gt; is a source file in the &lt;a href=&quot;https:&#x2f;&#x2f;developer.mozilla.org&#x2f;en-US&#x2f;docs&#x2f;WebAssembly&#x2f;Understanding_the_text_format&quot;&gt;text format&lt;&#x2f;a&gt; for
WebAssembly, which is in the form of S-expressions. So&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;code&gt;wat2wasm main.wat -o main.wasm
&lt;&#x2f;code&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;â€¦will compile your WebAssembly module in &lt;code&gt;main.wat&lt;&#x2f;code&gt; to generate &lt;code&gt;main.wasm&lt;&#x2f;code&gt;, the
binary file. For now, &lt;code&gt;main.wat&lt;&#x2f;code&gt; can be the simplest WebAssembly program:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;(module)
&lt;&#x2f;code&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Running the binary in a browser demands the bulk of the work. First, we&#x27;ll need
a web page. It doesn&#x27;t need any content other than invoking some JavaScript
code.&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;&#x2f;title&amp;gt;
&amp;lt;&#x2f;head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;!-- The only thing that matters is the following line,
    although having a valid HTML5 page is nice. --&amp;gt;
    &amp;lt;script src=&amp;quot;play.js&amp;quot;&amp;gt;&amp;lt;&#x2f;script&amp;gt;
&amp;lt;&#x2f;body&amp;gt;
&amp;lt;&#x2f;html&amp;gt;
&lt;&#x2f;code&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;First, the Javascript logic needs to &lt;em&gt;fetch and instantiate the compiled
WebAssembly module&lt;&#x2f;em&gt;. Since this is not a JS or WebAssembly tutorial, I&#x27;ll point
you to the docmuntation for &lt;a href=&quot;https:&#x2f;&#x2f;developer.mozilla.org&#x2f;en-US&#x2f;docs&#x2f;Web&#x2f;API&#x2f;Fetch_API&quot;&gt;Fetch API&lt;&#x2f;a&gt;, &lt;a href=&quot;https:&#x2f;&#x2f;developer.mozilla.org&#x2f;en-US&#x2f;docs&#x2f;Web&#x2f;JavaScript&#x2f;Reference&#x2f;Global_Objects&#x2f;Promise&quot;&gt;Promises&lt;&#x2f;a&gt;, and &lt;a href=&quot;https:&#x2f;&#x2f;developer.mozilla.org&#x2f;en-US&#x2f;docs&#x2f;Web&#x2f;JavaScript&#x2f;Reference&#x2f;Global_Objects&#x2f;WebAssembly&quot;&gt;the WebAssembly
object&lt;&#x2f;a&gt; for details:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;fetch(&amp;quot;main.wasm&amp;quot;).then(reponse =&amp;gt;
    reponse.arrayBuffer()
).then(bytes =&amp;gt;
    WebAssembly.instantiate(bytes, {})
).then(result =&amp;gt;
    result.instance
).then(main);

&lt;&#x2f;code&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;This snippet fetches &lt;code&gt;main.wasm&lt;&#x2f;code&gt; (adjust this URL according to your choosing),
instantiate it, then pass it into a function named &lt;code&gt;main&lt;&#x2f;code&gt;, we can put
a placeholder logic for it for now:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function main(wasm) {
    console.log(wasm);
}
&lt;&#x2f;code&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Before we move on, you&#x27;ll find that simply opending your HTML file in browser
and looking at developer console won&#x27;t work. Safari would complain about
cross-domain request error for &lt;code&gt;fetch&lt;&#x2f;code&gt;. So we need to serve these resources
locally. I usually use the built in server module from Python standard library
for this kind of things:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;code&gt;# In your source folder, run
python -m SimpleHTTPServer
&lt;&#x2f;code&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Now go to &lt;a href=&quot;http:&#x2f;&#x2f;localhost:8000&quot;&gt;http:&#x2f;&#x2f;localhost:8000&lt;&#x2f;a&gt; and click on your HTML file. If everything
went well, you should see a WebAssembly instance logged in the developer
console.&lt;&#x2f;p&gt;
&lt;p&gt;Congratulations! You can start writing WebAssembly locally. Just remember to
re-compile &lt;code&gt;main.wat&lt;&#x2f;code&gt; with &lt;code&gt;wat2wasm&lt;&#x2f;code&gt; whenever you want to test things out in
browser.&lt;&#x2f;p&gt;
&lt;h2&gt;An Actual &amp;quot;Hello, World!&amp;quot; Implementation&lt;&#x2f;h2&gt;
&lt;p&gt;This is my implementation:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;(module
  ;; Allocate a page of linear memory (64kb). Export it as &amp;quot;memory&amp;quot;
  (memory (export &amp;quot;memory&amp;quot;) 1)

  ;; Write the string at the start of the linear memory.
  (data (i32.const 0) &amp;quot;Hello, world!&amp;quot;) ;; write string at location 0

  ;; Export the position and length of the string.
  (global (export &amp;quot;length&amp;quot;) i32 (i32.const 12))
  (global (export &amp;quot;position&amp;quot;) i32 (i32.const 0)))
&lt;&#x2f;code&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;In other words, we expose information of the linear memory we manipulated to the
JavaScript environment. Things that has been &lt;code&gt;export&lt;&#x2f;code&gt;ed will show up as
properties of &lt;code&gt;exports&lt;&#x2f;code&gt; of the &lt;code&gt;WebAssembly&lt;&#x2f;code&gt; instance. We can access them in the
&lt;code&gt;main&lt;&#x2f;code&gt; JavaScript functions:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function main(wasm) {
    const memory   = wasm.exports.memory;
    const length   = wasm.exports.length;
    const position = wasm.exports.position;
    ...
}
&lt;&#x2f;code&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Then it&#x27;s just plain-old Javascript (tho I had to steal it from tutorials).
&lt;code&gt;memory.buffer&lt;&#x2f;code&gt; is of type &lt;a href=&quot;https:&#x2f;&#x2f;developer.mozilla.org&#x2f;en-US&#x2f;docs&#x2f;Web&#x2f;JavaScript&#x2f;Reference&#x2f;Global_Objects&#x2f;ArrayBuffer&quot;&gt;ArrayBuffer&lt;&#x2f;a&gt;. We need to convert it into a string
and log it to the console:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function main(wasm) {
    const memory   = wasm.exports.memory;
    const length   = wasm.exports.length;
    const position = wasm.exports.position;

    const bytes = new Uint8Array(memory.buffer, position, length);
    const s = new TextDecoder(&#x27;utf8&#x27;).decode(bytes);

    console.log(s);
}
&lt;&#x2f;code&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Et, voilÃ ! &lt;code&gt;Hello, World!&lt;&#x2f;code&gt; hot off a Web Assembly module in your developer
console. To conclude, I personally like to use a &lt;code&gt;Makefile&lt;&#x2f;code&gt; to streamline some
of the typing. Here&#x27;s what I used for this demo:&lt;&#x2f;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-makefile&quot;&gt;compile:
	wat2wasm main.wat -o main.wasm

serve:
	python -m SimpleHTTPServer
&lt;&#x2f;code&gt;&lt;&#x2f;pre&gt;
&lt;h2&gt;Conclusion&lt;&#x2f;h2&gt;
&lt;p&gt;No fancy schmancy Javascript build stack, no 3rd-party code dependency. Write
code, compile, run on your (virtual, in browser) machine, repeat. That sounds like
&amp;quot;assembly&amp;quot; to me!&lt;&#x2f;p&gt;
</description>
                <pubDate>Sat, 30 Dec 2017 18:43:49 -0800</pubDate>
                <link>https://duan.ca/2017/12/30/hello-world-in-webassembly/</link>
                <guid isPermaLink="true">https://duan.ca/2017/12/30/hello-world-in-webassembly/</guid>
            </item>
            <item>
                <title>Building &#x27;pwd&#x27; Under 1 Minute In Swift</title>
                <description>&lt;p&gt;I guess I&#x27;m starting a series of minute-long videos. In this first video, I built &lt;code&gt;pwd&lt;&#x2f;code&gt; out of &lt;code&gt;getcwd&lt;&#x2f;code&gt;. The
code turned out shorter than I imagined (1 line). Which is a good demonstration of Swift&#x27;s great C-interop
capability.&lt;&#x2f;p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Some details are lost in this video, however. For example, the POSIX standard actually says &lt;code&gt;getcwd&lt;&#x2f;code&gt;&#x27;s 2nd
argument being &lt;code&gt;0&lt;&#x2f;code&gt; is undefined. Luckily, both macOS and Linux define it the way we want (allocate as much
memory as needed). Swift&#x27;s handling of &lt;code&gt;char *&lt;&#x2f;code&gt; aka &lt;code&gt;UnsafeMutablePointer&amp;lt;CChar&amp;gt;&lt;&#x2f;code&gt; in context of a &lt;code&gt;var&lt;&#x2f;code&gt; array
is also very cool.&lt;&#x2f;p&gt;
</description>
                <pubDate>Wed, 27 Dec 2017 01:13:07 -0800</pubDate>
                <link>https://duan.ca/2017/12/27/building-pwd-under-1-minute-in-swift/</link>
                <guid isPermaLink="true">https://duan.ca/2017/12/27/building-pwd-under-1-minute-in-swift/</guid>
            </item>
            <item>
                <title>Contributing To Open-Source Swift</title>
                <description>&lt;p&gt;I discover, report, fix and merge a bug in the open-source Foundation project. And why, yes, on YouTube.&lt;&#x2f;p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;Pull request: &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;apple&#x2f;swift-corelibs-foundation&#x2f;pull&#x2f;1376&quot;&gt;https:&#x2f;&#x2f;github.com&#x2f;apple&#x2f;swift-corelibs-foundation&#x2f;pull&#x2f;1376&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;SR-6647: &lt;a href=&quot;https:&#x2f;&#x2f;bugs.swift.org&#x2f;browse&#x2f;SR-6647&quot;&gt;https:&#x2f;&#x2f;bugs.swift.org&#x2f;browse&#x2f;SR-6647&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;&#x2f;ul&gt;
</description>
                <pubDate>Sat, 23 Dec 2017 13:21:10 -0800</pubDate>
                <link>https://duan.ca/2017/12/23/contributing-to-open-source-foundation/</link>
                <guid isPermaLink="true">https://duan.ca/2017/12/23/contributing-to-open-source-foundation/</guid>
            </item>
            <item>
                <title>BitArray The Final Act</title>
                <description>&lt;p&gt;Alas, there&#x27;s the 3rd and last video about &lt;code&gt;BitArray&lt;&#x2f;code&gt;, originated on my spark of inspiration on a Caltrain
ride home. This makes my first YouTube playlist as well, even tho the first 2 videos were planned to be
completely separate.&lt;&#x2f;p&gt;
&lt;p&gt;We added more standard library functionalities to BitArray (ExpressibleByArrayLiteral,
CustomStringConvertible, Equatable, etc). Then, we added documentation and other open-source things left
undone from &amp;quot;episode 2&amp;quot;.&lt;&#x2f;p&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
                <pubDate>Tue, 19 Dec 2017 12:17:49 -0800</pubDate>
                <link>https://duan.ca/2017/12/19/bitarray-final-act/</link>
                <guid isPermaLink="true">https://duan.ca/2017/12/19/bitarray-final-act/</guid>
            </item>
            <item>
                <title>Making An Open-Source Swift Project</title>
                <description>&lt;p&gt;This video shows what it takes to open source a Swift project. Starting from some code in a playground,
I created a framework that supports distribution via Swift Package Manager, CocoaPods, Xcode project and
Carthage. The framework can be used across iOS, macOS, watchOS, tvOS and Linux. In addition, we also added
SwiftLint to the project, added a Makefile, put everything on GitHub and set up continuous integration via
Travis. README, COC, LICENSE and CHANGELOG are stubbed in as well.&lt;&#x2f;p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;This is not at all a comprehensive list of things a good Open Source project should have. We are still missing
the version tag, documentation generation, automatic Carthage binary generation, test coverage...&lt;&#x2f;p&gt;
&lt;p&gt;Anyways, here&#x27;s some stuff mentioned in the video:&lt;&#x2f;p&gt;
&lt;ul&gt;
&lt;li&gt;Sample project from the video: &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;BitArray&quot;&gt;https:&#x2f;&#x2f;github.com&#x2f;dduan&#x2f;BitArray&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;Video of me writing the code in this project: &lt;a href=&quot;https:&#x2f;&#x2f;www.youtube.com&#x2f;watch?v=-k_jrIoD56k&quot;&gt;https:&#x2f;&#x2f;www.youtube.com&#x2f;watch?v=-k_jrIoD56k&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;Swift Package Manager: &lt;a href=&quot;https:&#x2f;&#x2f;swift.org&#x2f;package-manager&#x2f;&quot;&gt;https:&#x2f;&#x2f;swift.org&#x2f;package-manager&#x2f;&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;CocoaPods: &lt;a href=&quot;https:&#x2f;&#x2f;cocoapods.org&quot;&gt;https:&#x2f;&#x2f;cocoapods.org&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;Carthage: &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;Carthage&#x2f;Carthage&quot;&gt;https:&#x2f;&#x2f;github.com&#x2f;Carthage&#x2f;Carthage&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;Xcconfigs for universal framework: &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;mrackwitz&#x2f;xcconfigs&quot;&gt;https:&#x2f;&#x2f;github.com&#x2f;mrackwitz&#x2f;xcconfigs&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;SwiftLint: &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;realm&#x2f;SwiftLint&quot;&gt;https:&#x2f;&#x2f;github.com&#x2f;realm&#x2f;SwiftLint&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;li&gt;Travis CI: &lt;a href=&quot;https:&#x2f;&#x2f;travis-ci.org&quot;&gt;https:&#x2f;&#x2f;travis-ci.org&lt;&#x2f;a&gt;&lt;&#x2f;li&gt;
&lt;&#x2f;ul&gt;
</description>
                <pubDate>Sun, 17 Dec 2017 21:24:43 -0800</pubDate>
                <link>https://duan.ca/2017/12/17/making-an-open-source-swift-project/</link>
                <guid isPermaLink="true">https://duan.ca/2017/12/17/making-an-open-source-swift-project/</guid>
            </item>
            <item>
                <title>Let&#x27;s Build A BitArray In Swift</title>
                <description>&lt;p&gt;In this video, I build a space-efficient BitArray that confirms to &lt;code&gt;RandomAccessCollection&lt;&#x2f;code&gt; in Swift in
a playground. It involves some basic (but neat!) bitwise manipulation tricks.&lt;&#x2f;p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;I guess I&#x27;m a YouTuber now. You can subscribe to my &lt;a href=&quot;https:&#x2f;&#x2f;www.youtube.com&#x2f;channel&#x2f;UCkBVC0dMgyUnxzettP7qE-A&quot;&gt;channel&lt;&#x2f;a&gt; ðŸ˜›.&lt;&#x2f;p&gt;
</description>
                <pubDate>Tue, 12 Dec 2017 22:51:04 -0800</pubDate>
                <link>https://duan.ca/2017/12/12/lets-build-a-bitarray-in-swift/</link>
                <guid isPermaLink="true">https://duan.ca/2017/12/12/lets-build-a-bitarray-in-swift/</guid>
            </item>
    </channel>
</rss>